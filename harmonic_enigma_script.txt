on init
	declare @this_script_label
		@this_script_label := 		" H a r m o n i c  E n i g m a  S c r i p t  v 1 . 0 4 7"
	declare @label_copyright_string
		@label_copyright_string := 		" (c) Jan Machalski "
	declare @last_edit_date
		@last_edit_date :=	 	" 2024-12-27-00-32 "

	declare ?default_tuning[12] := (100.0, 200.0, 300.0, 400.0, 500.0, 600.0, 700.0, 800.0, 900.0, 1000.0, 1100.0, 1200.0)

	declare ~concert_pitch_freq := 261.625        {Default concert pitch in Hertz. Concert pitch can not be automated!}

	declare ~master_detune := 0.0 {apply global pitch shift in cents}

	declare $concert_pitch_midi_key := 60 {MIDI key that is tuned to ~concert_pitch  ("the tonic")}

{++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++}
{   H   a   r   m   o   n   i   c       E   n   i   g   m   a       S   c   r   i   p   t        }
{   this is my overkill swiss army knife for scalesmithing and other tuning related stuff        }
{++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++}

	if (1 = 1)
		disable_logging($NI_LOG_WARNING)
	end if

	set_script_title(" x Harmonic Enigma x ")
	message("")

	set_ui_height(8)

		make_persistent(~concert_pitch_freq)
		read_persistent_var(~concert_pitch_freq)
		if(~concert_pitch_freq = 0.0)
			~concert_pitch_freq := 440.0
		end if
		make_persistent(~master_detune)
		read_persistent_var(~master_detune)
		make_persistent($concert_pitch_midi_key)
		read_persistent_var($concert_pitch_midi_key)

		declare ~interval_of_equivalence {cents}
			~interval_of_equivalence := ?default_tuning[num_elements(?default_tuning)-1]
			make_persistent(~interval_of_equivalence)
			read_persistent_var(~interval_of_equivalence)
		declare $number_of_pitch_classes
			$number_of_pitch_classes := num_elements(?default_tuning)
			make_persistent($number_of_pitch_classes)
			read_persistent_var($number_of_pitch_classes)
			if ($number_of_pitch_classes < 1)
				$number_of_pitch_classes := 1
			end if

		declare ~reduction_interval
			~reduction_interval := 1200.0
			make_persistent(~reduction_interval)
			read_persistent_var(~reduction_interval)


	declare $counter1
	declare $counter2
	declare $counterA
	declare $counterB

	{helper variables for readibility:}
		declare $__i__
		declare ~__f__
		declare $__i1_
		declare $__i2_
		declare $__i3_
		declare ~__f1_
		declare ~__f2_
		declare ~__f3_
		declare ~__f4_
		declare ~mtof

	{init main tuning array:}
	declare ?tuning_table[1000] {cents}
		make_persistent(?tuning_table)
			?tuning_table[0] := 0.0
			$counter1 := 0
			while ($counter1 < num_elements(?default_tuning))
				?tuning_table[$counter1+1] := ?default_tuning[$counter1]
				inc($counter1)
			end while
			inc($counter1)
			while ($counter1 < num_elements(?tuning_table))
				?tuning_table[$counter1] := 100.0 * int_to_real($counter1)
				inc($counter1)
			end while
		read_persistent_var(?tuning_table)

	declare $script_min {lowest MIDI note affected by this script}
		make_persistent($script_min)
		$script_min := 24
		read_persistent_var($script_min)
	declare $script_max {highest MIDI note affected by this script}
		make_persistent($script_max)
		$script_max := 108
		read_persistent_var($script_max)

	{variables for script compatibility:}
		declare $relative_event_tuning {controls the relative bit of the change_tune() event}
			$relative_event_tuning := 1
			make_persistent($relative_event_tuning)
			read_persistent_var($relative_event_tuning)
		declare $play_nearest_zone {e.g. MIDI 72 key tuned by +200c will trigger MIDI key number 74 instead because it's closer in pitch. When disabled, played note will trigger it's sample regardless of how far it has to tune it to play it, even though there might be some closer zones in pitch.}
			$play_nearest_zone := 1
			make_persistent($play_nearest_zone)
			read_persistent_var($play_nearest_zone)
		declare $play_new_id {1 - on note generate new id; 0 - change_tune of the $EVENT_ID}
			$play_new_id := 0
			make_persistent($play_new_id)
			read_persistent_var($play_new_id)
		declare $ksp_0changetune_1eventpartune
			$ksp_0changetune_1eventpartune := 1
			make_persistent($ksp_0changetune_1eventpartune)
			read_persistent_var($ksp_0changetune_1eventpartune)

	{tuning logic helper variables:}

		declare polyphonic $new_id
		declare polyphonic $steps_from_reference_note {number of steps from $concert_pitch_midi_key}
		declare ~cents_from_a440 := 0.0 {interval [cents] from A=440.0Hz to the desired pitch}
		declare ~event_note_pitch_hz := 440.0
		declare ~display_frequency_of_the_note_relto69a440 := 0.0 {displayed in $label__last_freq}
		declare ?active_notes_hertz_table[128] := (440.0)
		declare ~octave_stretching_input_frequency_relto69a440 := 0.0
		declare ~display_detune_value_in_cents := 0.0 {displayed in $label__last_detune}
		declare polyphonic $detune_amount_milicents := 0 {detune amount in milicents - cent/1000. 1200000 = 1 octave}
		declare $display_value_of_the_most_recent_event_note {last $EVENT_NOTE outside of the on note callback}
		declare polyphonic $scale_degree_number {current step in the scale}
		declare ~scale_degree_cents {value of the step from current tuning in cents}
		declare polyphonic $scale_period_number {current period of the scale e.g. 0 for A4 and C5, 1 for A5 and -1 for A3 etc}
		declare ~scale_period_cents {current period coefficient of the scale in cents, e.g. -1200.0 if current pitch is in the range of the lower octave from the reference note}
		declare polyphonic $nearest_key {closest midi key to the desired pitch}
		declare polyphonic $target_key {midi key that shall be played}
		declare polyphonic $target_velocity {event_velocity}
		declare polyphonic $play_note_from_mirrored_version_of_the_scale {upside down ('utonal') version of the tuning}
		declare %custom_key_down_array[128] := (0)

		declare ~root_transposition_cents {dynamic variable}
		declare polyphonic $key_shift {diatonic transposition}


		declare ~concert_pitch_deviation_from_a440
		~concert_pitch_deviation_from_a440 := 1200.0*log(~concert_pitch_freq/440.0)/(log(2.0)) {cents from 440Hz to the value of ~concert_pitch_freq}

		declare %primes[54] := (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251)

		declare !note_class[12]
				!note_class[0] := "C"
				!note_class[1] := "C#"
				!note_class[2] := "D"
				!note_class[3] := "Eb"
				!note_class[4] := "E"
				!note_class[5] := "F"
				!note_class[6] := "F#"
				!note_class[7] := "G"
				!note_class[8] := "Ab"
				!note_class[9] := "A"
				!note_class[10] := "Bb"
				!note_class[11] := "B"

		declare !cyfry_rzymskie[1+50]
			!cyfry_rzymskie[0] := ""
			!cyfry_rzymskie[1] := "I"
			!cyfry_rzymskie[2] := "II"
			!cyfry_rzymskie[3] := "III"
			!cyfry_rzymskie[4] := "IV"
			!cyfry_rzymskie[5] := "V"
			!cyfry_rzymskie[6] := "VI"
			!cyfry_rzymskie[7] := "VII"
			!cyfry_rzymskie[8] := "VIII"
			!cyfry_rzymskie[9] := "IX"
			!cyfry_rzymskie[10] := "X"
			!cyfry_rzymskie[11] := "XI"
			!cyfry_rzymskie[12] := "XII"
			!cyfry_rzymskie[13] := "XIII"
			!cyfry_rzymskie[14] := "XIV"
			!cyfry_rzymskie[15] := "XV"
			!cyfry_rzymskie[16] := "XVI"
			!cyfry_rzymskie[17] := "XVII"
			!cyfry_rzymskie[18] := "XVIII"
			!cyfry_rzymskie[19] := "XIX"
			!cyfry_rzymskie[20] := "XX"
			!cyfry_rzymskie[21] := "XXI"
			!cyfry_rzymskie[22] := "XXII"
			!cyfry_rzymskie[23] := "XXIII"
			!cyfry_rzymskie[24] := "XXIV"
			!cyfry_rzymskie[25] := "XXV"
			!cyfry_rzymskie[26] := "XXVI"
			!cyfry_rzymskie[27] := "XXVII"
			!cyfry_rzymskie[28] := "XXVIII"
			!cyfry_rzymskie[29] := "XXIX"
			!cyfry_rzymskie[30] := "XXX"
			!cyfry_rzymskie[31] := "XXXI"
			!cyfry_rzymskie[32] := "XXXII"
			!cyfry_rzymskie[33] := "XXXIII"
			!cyfry_rzymskie[34] := "XXXIV"
			!cyfry_rzymskie[35] := "XXXV"
			!cyfry_rzymskie[36] := "XXXVI"
			!cyfry_rzymskie[37] := "XXXVII"
			!cyfry_rzymskie[38] := "XXXVIII"
			!cyfry_rzymskie[39] := "XXXIX"
			!cyfry_rzymskie[40] := "XL"
			!cyfry_rzymskie[41] := "XLI"
			!cyfry_rzymskie[42] := "XLII"
			!cyfry_rzymskie[43] := "XLIII"
			!cyfry_rzymskie[44] := "XLIV"
			!cyfry_rzymskie[45] := "XLV"
			!cyfry_rzymskie[46] := "XLVI"
			!cyfry_rzymskie[47] := "XLVII"
			!cyfry_rzymskie[48] := "XLVIII"
			!cyfry_rzymskie[49] := "XLIX"
			!cyfry_rzymskie[50] := "L"

	{monochrome keyboard layout - even out chromatic keys on the keyboard for easier playing}
	declare $monochrome_layout_mode {0 off (default); 1 white keys; -1 black keys;}
		{//e.g. in mode 0, diatonic scale from C would be mapped as C,C,D,D,E,F,F,G,G,A,A,B}
		$monochrome_layout_mode := 0
			make_persistent($monochrome_layout_mode)
			read_persistent_var($monochrome_layout_mode)
		declare $monochrome_behaviour {0 - omit scripting coloured(w/b) notes; 1 - substitute keys for neighbouring pitches}
		$monochrome_behaviour := 0
			make_persistent($monochrome_behaviour)
			read_persistent_var($monochrome_behaviour)
		{init monochrome layout functionality:}
				declare %monochrome_key_layout[12] := (0,1,0,1,0,0,1,0,1,0,1,0)
				declare %number_of_black_keys[128]
				declare %number_of_white_keys[128]
				%number_of_white_keys[0] := 1
				$counter1 := 1
				while ($counter1 < 128)
					select(%monochrome_key_layout[$counter1 mod 12])
						case 0
							%number_of_white_keys[$counter1] := %number_of_white_keys[$counter1-1]+1
						case 1
							%number_of_white_keys[$counter1] := %number_of_white_keys[$counter1-1]
					end select
					inc($counter1)
				end while
				%number_of_black_keys[0] := 0
				$counter1 := 1
				while ($counter1 < 128)
					select(%monochrome_key_layout[$counter1 mod 12])
						case 0
							%number_of_black_keys[$counter1] := %number_of_black_keys[$counter1-1]
						case 1
							%number_of_black_keys[$counter1] := %number_of_black_keys[$counter1-1]+1
					end select
					inc($counter1)
				end while

	{GUI:}
		declare ui_panel $gui_panel__setup_tab
				declare ui_panel $panel_concert_pitch
					set_control_par(get_ui_id ($panel_concert_pitch),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__setup_tab))
				declare ui_panel $panel_ebony_and_ivory
					set_control_par(get_ui_id ($panel_ebony_and_ivory),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__setup_tab))
				declare ui_panel $panel_scalesmithing_settings
					set_control_par(get_ui_id ($panel_scalesmithing_settings),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__setup_tab))
				declare ui_panel $panel__last_note_info
					set_control_par(get_ui_id($panel__last_note_info),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__setup_tab))
		declare ui_panel $gui_panel__scalesmithing_tab
				declare ui_panel $panel__freqratio
					set_control_par(get_ui_id($panel__freqratio),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__scalesmithing_tab))
				declare ui_panel $panel__periodandgenerator
					set_control_par(get_ui_id($panel__periodandgenerator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__scalesmithing_tab))
				declare ui_panel $panel__temperament_units
					set_control_par(get_ui_id($panel__temperament_units),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__scalesmithing_tab))
				declare ui_panel $panel__epimoric_scales
					set_control_par(get_ui_id($panel__epimoric_scales),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__scalesmithing_tab))
				declare ui_panel $panel__equalsteptuning
					set_control_par(get_ui_id($panel__equalsteptuning),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__scalesmithing_tab))
		declare ui_panel $gui_panel__pedaling_tab
				declare ui_panel $gui_panel__pedaling_tab_sus
					set_control_par(get_ui_id($gui_panel__pedaling_tab_sus),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__pedaling_tab))
				declare ui_panel $gui_panel__pedaling_tab_harp
					set_control_par(get_ui_id($gui_panel__pedaling_tab_harp),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__pedaling_tab))
				declare ui_panel $gui_panel__pedaling_tab_epimoric
					set_control_par(get_ui_id($gui_panel__pedaling_tab_epimoric),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__pedaling_tab))
		declare ui_panel $gui_panel__modulation_tab
				declare ui_panel $gui_panel__modulation_tab_transposition_common_note
					set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_common_note),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab))
				declare ui_panel $gui_panel__modulation_tab_transposition_epimoric
					set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_epimoric),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab))
				declare ui_panel $gui_panel__modulation_tab_transposition_interval
					set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_interval),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab))
				declare ui_panel $gui_panel__modulation_tab_transposition_whammy
					set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_whammy),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab))
				declare ui_panel $gui_panel__modulation_tab_transposition_monzo
					set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_monzo),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab))
		declare ui_panel $gui_panel__detune_tab
				declare ui_panel $panel__detune_specific_key
					set_control_par(get_ui_id($panel__detune_specific_key),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__detune_tab))
				declare ui_panel $panel__octave_stretching
					set_control_par(get_ui_id($panel__octave_stretching),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__detune_tab))
				declare ui_panel $panel__masterdetune
					set_control_par(get_ui_id($panel__masterdetune),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__detune_tab))
				declare ui_panel $panel__mastertransposition
					set_control_par(get_ui_id($panel__mastertransposition),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__detune_tab))

		declare ui_label $label_copyright (1,1)
			set_text ($label_copyright, @label_copyright_string)
			set_control_par(get_ui_id ($label_copyright),$CONTROL_PAR_POS_X,128+200)
			set_control_par(get_ui_id ($label_copyright),$CONTROL_PAR_POS_Y,2)
			set_control_par(get_ui_id($label_copyright),$CONTROL_PAR_WIDTH,471-200)
			set_control_par(get_ui_id($label_copyright),$CONTROL_PAR_HEIGHT,11)
			set_control_par(get_ui_id($label_copyright),$CONTROL_PAR_TEXT_ALIGNMENT,2)
		declare ui_label $label_scriptversion (1,1)
			set_text ($label_scriptversion, @this_script_label)
			set_control_par(get_ui_id ($label_scriptversion),$CONTROL_PAR_POS_X,128)
			set_control_par(get_ui_id ($label_scriptversion),$CONTROL_PAR_POS_Y,2)
			set_control_par(get_ui_id($label_scriptversion),$CONTROL_PAR_WIDTH,471-200)
			set_control_par(get_ui_id($label_scriptversion),$CONTROL_PAR_HEIGHT,11)
			set_control_par(get_ui_id($label_scriptversion),$CONTROL_PAR_TEXT_ALIGNMENT,0)
	{SETUP TAB:}

		declare $setup_panel_pos_x
				$setup_panel_pos_x := 24
		declare $setup_panel_pos_y
				$setup_panel_pos_y := 50
				set_control_par(get_ui_id ($gui_panel__setup_tab),$CONTROL_PAR_POS_X,$setup_panel_pos_x)
				set_control_par(get_ui_id ($gui_panel__setup_tab),$CONTROL_PAR_POS_Y,$setup_panel_pos_y)

		declare ui_panel $panel__script_range
			set_control_par(get_ui_id($panel__script_range),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__setup_tab))
				set_control_par(get_ui_id ($panel__script_range),$CONTROL_PAR_POS_X,200)
				set_control_par(get_ui_id ($panel__script_range),$CONTROL_PAR_POS_Y,0)

			declare ui_label $label_scriptrange (1,1)
				set_text ($label_scriptrange,"s c r i p t   r a n g e :")
				set_control_par(get_ui_id($label_scriptrange),$CONTROL_PAR_WIDTH,180)
				set_control_par(get_ui_id ($label_scriptrange),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_scriptrange),$CONTROL_PAR_POS_Y,0)
				set_control_par(get_ui_id($label_scriptrange),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__script_range))
				set_control_par(get_ui_id($label_scriptrange),$CONTROL_PAR_TEXT_ALIGNMENT,1)

			declare ui_knob $knob__script_min (1,127,1)
				set_control_par_str(get_ui_id($knob__script_min),$CONTROL_PAR_AUTOMATION_NAME,"tuning__lower_limit")
				$knob__script_min := $script_min
				set_text ($knob__script_min,"   HP")
				set_control_par(get_ui_id($knob__script_min),$CONTROL_PAR_WIDTH,58)
				set_control_par(get_ui_id ($knob__script_min),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($knob__script_min),$CONTROL_PAR_POS_Y,25)
				set_control_par(get_ui_id($knob__script_min),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__script_range))
				set_control_par_str(get_ui_id ($knob__script_min),$CONTROL_PAR_HELP, "The lowest MIDI pitch that is processed by this script.")

			declare ui_knob $knob__script_max (1,127,1)
				set_control_par_str(get_ui_id($knob__script_max),$CONTROL_PAR_AUTOMATION_NAME,"tuning__upper_limit")
				$knob__script_max := $script_max
				set_text ($knob__script_max,"   LP")
				make_persistent ($knob__script_max)
				set_control_par(get_ui_id($knob__script_max),$CONTROL_PAR_WIDTH,58)
				set_control_par(get_ui_id ($knob__script_max),$CONTROL_PAR_POS_X,92)
				set_control_par(get_ui_id ($knob__script_max),$CONTROL_PAR_POS_Y,25)
				set_control_par(get_ui_id($knob__script_max),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__script_range))
				set_control_par_str(get_ui_id ($knob__script_max),$CONTROL_PAR_HELP, "The highest MIDI pitch that is processed by this script.")

		declare ui_panel $panel__script_combatibility
			set_control_par(get_ui_id ($panel__script_combatibility),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__setup_tab))
			set_control_par(get_ui_id ($panel__script_combatibility),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id ($panel__script_combatibility),$CONTROL_PAR_POS_Y,80)
			declare $panel__script_combatibility_width
				$panel__script_combatibility_width := 194 {196}
			declare $panel__script_combatibility_btn_width
				$panel__script_combatibility_btn_width := 56
			declare $panel__script_combatibility_btn_positioning
				$panel__script_combatibility_btn_positioning := $panel__script_combatibility_width - $panel__script_combatibility_btn_width
			declare $panel__script_combatibility_btn_margin
				$panel__script_combatibility_btn_margin := 6

			declare ui_label $label__script_combatibility (1,1)
				set_text ($label__script_combatibility,"c o m b a t i b i l i t y :")
				set_control_par(get_ui_id($label__script_combatibility),$CONTROL_PAR_WIDTH,$panel__script_combatibility_width)
				set_control_par(get_ui_id ($label__script_combatibility),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__script_combatibility))
				set_control_par(get_ui_id ($label__script_combatibility),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__script_combatibility),$CONTROL_PAR_POS_Y,0)
				set_control_par(get_ui_id($label__script_combatibility),$CONTROL_PAR_TEXT_ALIGNMENT,1)

			declare ui_label $label__play_nearest_zone (1,1)
				set_text ($label__play_nearest_zone, "play nearest zone:")
				set_control_par(get_ui_id ($label__play_nearest_zone),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__script_combatibility))
				set_control_par(get_ui_id($label__play_nearest_zone),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id($label__play_nearest_zone),$CONTROL_PAR_POS_Y, 20)
	   			set_control_par(get_ui_id($label__play_nearest_zone), $CONTROL_PAR_WIDTH, $panel__script_combatibility_btn_positioning - $panel__script_combatibility_btn_margin)
	    		set_control_par(get_ui_id($label__play_nearest_zone), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($label__play_nearest_zone), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
			declare ui_switch $switch__play_nearest_zone
				set_control_par_str(get_ui_id($switch__play_nearest_zone),$CONTROL_PAR_AUTOMATION_NAME,"tuning__substitute_zone")
				$switch__play_nearest_zone := $play_nearest_zone
				set_control_par(get_ui_id ($switch__play_nearest_zone),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__script_combatibility))
				set_control_par(get_ui_id($switch__play_nearest_zone),$CONTROL_PAR_POS_X, $panel__script_combatibility_btn_positioning)
				set_control_par(get_ui_id($switch__play_nearest_zone),$CONTROL_PAR_POS_Y, 20)
	   			set_control_par(get_ui_id($switch__play_nearest_zone), $CONTROL_PAR_WIDTH, $panel__script_combatibility_btn_width)
	    		set_control_par(get_ui_id($switch__play_nearest_zone), $CONTROL_PAR_HEIGHT, 18 )
				set_control_par(get_ui_id($switch__play_nearest_zone), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				select ($switch__play_nearest_zone)
					case 0
						set_control_par_str(get_ui_id($switch__play_nearest_zone), $CONTROL_PAR_TEXT, "[ no ]")
					case 1
						set_control_par_str(get_ui_id($switch__play_nearest_zone), $CONTROL_PAR_TEXT, "[ Yes ]")
				end select

			declare ui_label $label__play_new_id (1,1)
				set_text ($label__play_new_id, "new id on note:")
				set_control_par(get_ui_id ($label__play_new_id),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__script_combatibility))
				set_control_par(get_ui_id($label__play_new_id),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id($label__play_new_id),$CONTROL_PAR_POS_Y, 40)
	   			set_control_par(get_ui_id($label__play_new_id), $CONTROL_PAR_WIDTH, $panel__script_combatibility_btn_positioning - $panel__script_combatibility_btn_margin)
	    		set_control_par(get_ui_id($label__play_new_id), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($label__play_new_id), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
			declare ui_switch $switch__play_new_id
				set_control_par_str(get_ui_id($switch__play_new_id),$CONTROL_PAR_AUTOMATION_NAME,"tuning__play_new_id")
				$switch__play_new_id := $play_new_id
				set_control_par(get_ui_id ($switch__play_new_id),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__script_combatibility))
				set_control_par(get_ui_id($switch__play_new_id),$CONTROL_PAR_POS_X, $panel__script_combatibility_btn_positioning)
				set_control_par(get_ui_id($switch__play_new_id),$CONTROL_PAR_POS_Y, 40)
	   			set_control_par(get_ui_id($switch__play_new_id), $CONTROL_PAR_WIDTH, $panel__script_combatibility_btn_width)
	    		set_control_par(get_ui_id($switch__play_new_id), $CONTROL_PAR_HEIGHT, 18 )
				set_control_par(get_ui_id($switch__play_new_id), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				select ($switch__play_new_id)
					case 0
						set_control_par_str(get_ui_id($switch__play_new_id), $CONTROL_PAR_TEXT, "[ no ]")
					case 1
						set_control_par_str(get_ui_id($switch__play_new_id), $CONTROL_PAR_TEXT, "[ Yes ]")
				end select

			declare ui_label $label__relative_event_tuning (1,1)
				set_text ($label__relative_event_tuning, "relative event tuning:")
				set_control_par(get_ui_id ($label__relative_event_tuning),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__script_combatibility))
				set_control_par(get_ui_id($label__relative_event_tuning),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id($label__relative_event_tuning),$CONTROL_PAR_POS_Y, 60)
	   			set_control_par(get_ui_id($label__relative_event_tuning), $CONTROL_PAR_WIDTH, $panel__script_combatibility_btn_positioning - $panel__script_combatibility_btn_margin)
	    		set_control_par(get_ui_id($label__relative_event_tuning), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($label__relative_event_tuning), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
			declare ui_switch $switch__relative_event_tuning
				set_control_par_str(get_ui_id($switch__relative_event_tuning),$CONTROL_PAR_AUTOMATION_NAME,"tuning__relative_event_flag")
				$switch__relative_event_tuning := $play_nearest_zone
				set_control_par(get_ui_id ($switch__relative_event_tuning),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__script_combatibility))
				set_control_par(get_ui_id($switch__relative_event_tuning),$CONTROL_PAR_POS_X, $panel__script_combatibility_btn_positioning)
				set_control_par(get_ui_id($switch__relative_event_tuning),$CONTROL_PAR_POS_Y, 60)
	   			set_control_par(get_ui_id($switch__relative_event_tuning), $CONTROL_PAR_WIDTH, $panel__script_combatibility_btn_width)
	    		set_control_par(get_ui_id($switch__relative_event_tuning), $CONTROL_PAR_HEIGHT, 18 )
				set_control_par(get_ui_id($switch__relative_event_tuning), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				select ($switch__relative_event_tuning)
					case 0
						set_control_par_str(get_ui_id($switch__relative_event_tuning), $CONTROL_PAR_TEXT, "[ no ]")
					case 1
						set_control_par_str(get_ui_id($switch__relative_event_tuning), $CONTROL_PAR_TEXT, "[ Yes ]")
				end select

			declare @ksp_mode_0changetune_1eventpartune_comment
				@ksp_mode_0changetune_1eventpartune_comment := "In KSP (Kontakt scripting language) a note can be tuned using change_tune() function or by setting the $EVENT_PAR_TUNE variable with set_event_par() function. In some situations it might be useful to distinguish them."
			declare $offset_posx_switch__ksp_mode_0changetune_1eventpartune := 30
			declare ui_label $label__ksp_mode_0changetune_1eventpartune (1,1)
				set_text ($label__ksp_mode_0changetune_1eventpartune, "tuning function:")
				set_control_par(get_ui_id ($label__ksp_mode_0changetune_1eventpartune),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__script_combatibility))
				set_control_par(get_ui_id($label__ksp_mode_0changetune_1eventpartune),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id($label__ksp_mode_0changetune_1eventpartune),$CONTROL_PAR_POS_Y, 20*4)
	   			set_control_par(get_ui_id($label__ksp_mode_0changetune_1eventpartune), $CONTROL_PAR_WIDTH, $panel__script_combatibility_btn_positioning - $panel__script_combatibility_btn_margin - $offset_posx_switch__ksp_mode_0changetune_1eventpartune)
	    		set_control_par(get_ui_id($label__ksp_mode_0changetune_1eventpartune), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($label__ksp_mode_0changetune_1eventpartune), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par_str(get_ui_id ($label__ksp_mode_0changetune_1eventpartune),$CONTROL_PAR_HELP, @ksp_mode_0changetune_1eventpartune_comment)
			declare ui_switch $switch__ksp_mode_0changetune_1eventpartune
				set_control_par_str(get_ui_id($switch__ksp_mode_0changetune_1eventpartune),$CONTROL_PAR_AUTOMATION_NAME,"ksp_tuning_function")
				$switch__ksp_mode_0changetune_1eventpartune := $ksp_0changetune_1eventpartune
				set_control_par(get_ui_id ($switch__ksp_mode_0changetune_1eventpartune),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__script_combatibility))
				set_control_par(get_ui_id($switch__ksp_mode_0changetune_1eventpartune),$CONTROL_PAR_POS_X, $panel__script_combatibility_btn_positioning - $offset_posx_switch__ksp_mode_0changetune_1eventpartune)
				set_control_par(get_ui_id($switch__ksp_mode_0changetune_1eventpartune),$CONTROL_PAR_POS_Y, 20*4)
	   			set_control_par(get_ui_id($switch__ksp_mode_0changetune_1eventpartune), $CONTROL_PAR_WIDTH, $panel__script_combatibility_btn_width + $offset_posx_switch__ksp_mode_0changetune_1eventpartune)
	    		set_control_par(get_ui_id($switch__ksp_mode_0changetune_1eventpartune), $CONTROL_PAR_HEIGHT, 18 )
				set_control_par(get_ui_id($switch__ksp_mode_0changetune_1eventpartune), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par_str(get_ui_id ($switch__ksp_mode_0changetune_1eventpartune),$CONTROL_PAR_HELP, @ksp_mode_0changetune_1eventpartune_comment)
				select ($switch__ksp_mode_0changetune_1eventpartune)
					case 0
						set_control_par_str(get_ui_id($switch__ksp_mode_0changetune_1eventpartune), $CONTROL_PAR_TEXT, "change_tune()")
					case 1
						set_control_par_str(get_ui_id($switch__ksp_mode_0changetune_1eventpartune), $CONTROL_PAR_TEXT, "set_event_par()")
				end select

		{ui_panel $panel_concert_pitch}
		
			set_control_par(get_ui_id ($panel_concert_pitch),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id ($panel_concert_pitch),$CONTROL_PAR_POS_Y,0)

			declare ui_label $label_concert_pitch (1,1)
				set_text ($label_concert_pitch,"c o n c e r t   p i t c h :")
				set_control_par(get_ui_id($label_concert_pitch),$CONTROL_PAR_WIDTH,194)
				set_control_par(get_ui_id ($label_concert_pitch),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_concert_pitch))
				set_control_par(get_ui_id ($label_concert_pitch),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_concert_pitch),$CONTROL_PAR_POS_Y,0)
				set_control_par(get_ui_id($label_concert_pitch),$CONTROL_PAR_TEXT_ALIGNMENT,1)

			declare ui_value_edit $ui_value_diapason_hz (1,960000000,10000) {[10000*Hz]}
				$ui_value_diapason_hz := real_to_int(10000.0 * ~concert_pitch_freq)
				set_text ($ui_value_diapason_hz,"[Hz] ")
				make_persistent ($ui_value_diapason_hz)
				read_persistent_var ($ui_value_diapason_hz)
				set_control_par(get_ui_id($ui_value_diapason_hz),$CONTROL_PAR_WIDTH,102)
				set_control_par(get_ui_id($ui_value_diapason_hz),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_concert_pitch))
				set_control_par(get_ui_id ($ui_value_diapason_hz),$CONTROL_PAR_POS_X,92)
				set_control_par(get_ui_id ($ui_value_diapason_hz),$CONTROL_PAR_POS_Y,25)
				set_control_par_str(get_ui_id ($ui_value_diapason_hz),$CONTROL_PAR_HELP, "Concert pitch value in cycles per second (Hz). Keep in mind that number values can't be automated. If you would like to change this parameter dynamically, use knob controls from [detune] tab instead.")

			declare ui_knob $knob__concert_pitch__midi_key(0,127,1) {root midi key ~ concert pitch}
				set_text($knob__concert_pitch__midi_key,"  A")
				set_control_par_str(get_ui_id($knob__concert_pitch__midi_key),$CONTROL_PAR_AUTOMATION_NAME,"tuning__reference_note")
				$knob__concert_pitch__midi_key := $concert_pitch_midi_key
				make_persistent($knob__concert_pitch__midi_key)
				read_persistent_var($knob__concert_pitch__midi_key)
				set_text($knob__concert_pitch__midi_key,"  " & !note_class[$knob__concert_pitch__midi_key mod 12])
				set_control_par(get_ui_id($knob__concert_pitch__midi_key),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_concert_pitch))
				set_control_par(get_ui_id ($knob__concert_pitch__midi_key),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($knob__concert_pitch__midi_key),$CONTROL_PAR_POS_Y,25)

			declare ui_value_edit $concert_pitch__microtonal_detune(-1000000,1000000,1) {literal micro tones; 1000000.0*log(x)/log(9.0/8.0)}
				set_text($concert_pitch__microtonal_detune,"microtones ")
				$concert_pitch__microtonal_detune := 0
				make_persistent($concert_pitch__microtonal_detune)
				read_persistent_var($concert_pitch__microtonal_detune)
				set_control_par(get_ui_id($concert_pitch__microtonal_detune),$CONTROL_PAR_WIDTH,102)
				set_control_par(get_ui_id($concert_pitch__microtonal_detune),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_concert_pitch))
				set_control_par(get_ui_id ($concert_pitch__microtonal_detune),$CONTROL_PAR_POS_X,92)
				set_control_par(get_ui_id ($concert_pitch__microtonal_detune),$CONTROL_PAR_POS_Y,46)
				set_control_par_str(get_ui_id ($concert_pitch__microtonal_detune),$CONTROL_PAR_HELP, "Literal microtons: detune by one millionth of a Pythagorean whole tone.  Keep in mind that number values can't be automated.")

		{ui_panel $panel_ebony_and_ivory}
			set_control_par(get_ui_id ($panel_ebony_and_ivory),$CONTROL_PAR_POS_X,200)
			set_control_par(get_ui_id ($panel_ebony_and_ivory),$CONTROL_PAR_POS_Y,80)
			declare $panel_ebony_and_ivory_width
				$panel_ebony_and_ivory_width := 180
			declare $panel_ebony_and_ivory_btn_width
				$panel_ebony_and_ivory_btn_width := 56
			declare $panel_ebony_and_ivory_btn_positioning
				$panel_ebony_and_ivory_btn_positioning := $panel_ebony_and_ivory_width - $panel_ebony_and_ivory_btn_width
			declare $panel_ebony_and_ivory_btn_margin
				$panel_ebony_and_ivory_btn_margin := 6

			declare ui_label $label__ebony_and_ivory (1,1)
				if ($monochrome_layout_mode # 0)
					set_text ($label__ebony_and_ivory, "m o n o c h r o m e   l a y o u t :")
				else
					set_text ($label__ebony_and_ivory, "m o n o c h r o m e   l a y o u t :")
				end if
				set_control_par(get_ui_id ($label__ebony_and_ivory),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_ebony_and_ivory))
				set_control_par(get_ui_id($label__ebony_and_ivory),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id($label__ebony_and_ivory),$CONTROL_PAR_POS_Y, 0)
	   			set_control_par(get_ui_id($label__ebony_and_ivory), $CONTROL_PAR_WIDTH, $panel_ebony_and_ivory_btn_positioning + $panel_ebony_and_ivory_btn_width)
	    		set_control_par(get_ui_id($label__ebony_and_ivory), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($label__ebony_and_ivory), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par_str(get_ui_id ($label__ebony_and_ivory),$CONTROL_PAR_HELP, "Overwrite the Halberstadt keyboard layout and script black or white keys separately.")

			declare ui_label $label__use_white_keys (1,1)
				set_text ($label__use_white_keys, "use white keys:")
				set_control_par(get_ui_id ($label__use_white_keys),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_ebony_and_ivory))
				set_control_par(get_ui_id($label__use_white_keys),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id($label__use_white_keys),$CONTROL_PAR_POS_Y, 20*1)
	   			set_control_par(get_ui_id($label__use_white_keys), $CONTROL_PAR_WIDTH, $panel_ebony_and_ivory_btn_positioning - $panel_ebony_and_ivory_btn_margin)
	    		set_control_par(get_ui_id($label__use_white_keys), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($label__use_white_keys), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $switch__use_white_keys
				set_control_par_str(get_ui_id($switch__use_white_keys),$CONTROL_PAR_AUTOMATION_NAME,"tuning__white_keys")
				$switch__use_white_keys := 1
				if ($monochrome_layout_mode = -1)
					$switch__use_white_keys := 0
				end if
				set_control_par(get_ui_id ($switch__use_white_keys),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_ebony_and_ivory))
				set_control_par(get_ui_id($switch__use_white_keys),$CONTROL_PAR_POS_X, $panel_ebony_and_ivory_btn_positioning)
				set_control_par(get_ui_id($switch__use_white_keys),$CONTROL_PAR_POS_Y, 20*1)
	   			set_control_par(get_ui_id($switch__use_white_keys), $CONTROL_PAR_WIDTH, $panel_ebony_and_ivory_btn_width)
	    		set_control_par(get_ui_id($switch__use_white_keys), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($switch__use_white_keys), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par_str(get_ui_id ($switch__use_white_keys),$CONTROL_PAR_HELP, "Apply the tuning to white keys.")
				select ($switch__use_white_keys)
					case 1
						set_control_par_str(get_ui_id($switch__use_white_keys), $CONTROL_PAR_TEXT, "[ Yes ]")
					case 0
						set_control_par_str(get_ui_id($switch__use_white_keys), $CONTROL_PAR_TEXT, "[ no ]")
				end select

			declare ui_label $label__use_black_keys (1,1)
				set_text ($label__use_black_keys, "use black keys:")
				set_control_par(get_ui_id ($label__use_black_keys),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_ebony_and_ivory))
				set_control_par(get_ui_id($label__use_black_keys),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id($label__use_black_keys),$CONTROL_PAR_POS_Y, 20*2)
	   			set_control_par(get_ui_id($label__use_black_keys), $CONTROL_PAR_WIDTH, $panel_ebony_and_ivory_btn_positioning - $panel_ebony_and_ivory_btn_margin)
	    		set_control_par(get_ui_id($label__use_black_keys), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($label__use_black_keys), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $switch__use_black_keys
				set_control_par_str(get_ui_id($switch__use_black_keys),$CONTROL_PAR_AUTOMATION_NAME,"tuning__black_keys")
				$switch__use_black_keys := 1
				if ($monochrome_layout_mode = 1 )
					$switch__use_black_keys := 0
				end if
				set_control_par(get_ui_id ($switch__use_black_keys),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_ebony_and_ivory))
				set_control_par(get_ui_id($switch__use_black_keys),$CONTROL_PAR_POS_X, $panel_ebony_and_ivory_btn_positioning)
				set_control_par(get_ui_id($switch__use_black_keys),$CONTROL_PAR_POS_Y, 20*2)
	   			set_control_par(get_ui_id($switch__use_black_keys), $CONTROL_PAR_WIDTH, $panel_ebony_and_ivory_btn_width)
	    		set_control_par(get_ui_id($switch__use_black_keys), $CONTROL_PAR_HEIGHT, 18 )
				set_control_par(get_ui_id($switch__use_black_keys), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par_str(get_ui_id ($switch__use_black_keys),$CONTROL_PAR_HELP, "Apply the tuning to black keys.")
				select ($switch__use_black_keys)
					case 1
						set_control_par_str(get_ui_id($switch__use_black_keys), $CONTROL_PAR_TEXT, "[ Yes ]")
					case 0
						set_control_par_str(get_ui_id($switch__use_black_keys), $CONTROL_PAR_TEXT, "[ no ]")
				end select

			declare ui_label $label__monochrome_behaviour (1,1)
				set_text ($label__monochrome_behaviour, "play neighbours:")
				set_control_par(get_ui_id ($label__monochrome_behaviour),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_ebony_and_ivory))
				set_control_par(get_ui_id($label__monochrome_behaviour),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id($label__monochrome_behaviour),$CONTROL_PAR_POS_Y, 20*3)
	   			set_control_par(get_ui_id($label__monochrome_behaviour), $CONTROL_PAR_WIDTH, $panel_ebony_and_ivory_btn_positioning - $panel_ebony_and_ivory_btn_margin)
	    		set_control_par(get_ui_id($label__monochrome_behaviour), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($label__monochrome_behaviour), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $switch__monochrome_behaviour
				set_control_par_str(get_ui_id($switch__monochrome_behaviour),$CONTROL_PAR_AUTOMATION_NAME,"tuning__monochrome_behaviour")
				{0 - omit scripting coloured(w/b) notes; 1 - substitute keys for neighbouring pitches}
				$switch__monochrome_behaviour := $monochrome_behaviour
				set_control_par(get_ui_id ($switch__monochrome_behaviour),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_ebony_and_ivory))
				set_control_par(get_ui_id($switch__monochrome_behaviour),$CONTROL_PAR_POS_X, $panel_ebony_and_ivory_btn_positioning)
				set_control_par(get_ui_id($switch__monochrome_behaviour),$CONTROL_PAR_POS_Y, 20*3)
	   			set_control_par(get_ui_id($switch__monochrome_behaviour), $CONTROL_PAR_WIDTH, $panel_ebony_and_ivory_btn_width)
	    		set_control_par(get_ui_id($switch__monochrome_behaviour), $CONTROL_PAR_HEIGHT, 18 )
				set_control_par(get_ui_id($switch__monochrome_behaviour), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par_str(get_ui_id ($switch__monochrome_behaviour),$CONTROL_PAR_HELP, "Choose what to do with the remaining keys: substitute them with neighbouring pitches or omit scripting them completely.")
				select ($switch__monochrome_behaviour)
					case 0
						set_control_par_str(get_ui_id($switch__monochrome_behaviour), $CONTROL_PAR_TEXT, "[ no ]")
					case 1
						set_control_par_str(get_ui_id($switch__monochrome_behaviour), $CONTROL_PAR_TEXT, "[ Yes ]")
				end select

		if (1=1)
		{ui_panel $panel_scalesmithing_settings}

			set_control_par(get_ui_id ($panel_scalesmithing_settings),$CONTROL_PAR_POS_X,388)
			set_control_par(get_ui_id ($panel_scalesmithing_settings),$CONTROL_PAR_POS_Y,0)
			declare $panel_scalesmithing_settings_width
				$panel_scalesmithing_settings_width := 186
			declare $panel_scalesmithing_settings_btn_width
				$panel_scalesmithing_settings_btn_width := 56
			declare $panel_scalesmithing_settings_top_margin
				$panel_scalesmithing_settings_top_margin := 0
			declare $panel_scalesmithing_settings_btn_positioning
				$panel_scalesmithing_settings_btn_positioning := $panel_scalesmithing_settings_width - $panel_scalesmithing_settings_btn_width
			declare $panel_scalesmithing_settings_btn_margin
				$panel_scalesmithing_settings_btn_margin := 6
			declare $panel_scalesmithing_settings_row_height
				$panel_scalesmithing_settings_row_height := 20

			{	declare ui_label $label__overkill_settings (1,1)
				set_text ($label__overkill_settings,"s c a l e s m i t h i n g")
				set_control_par(get_ui_id($label__overkill_settings),$CONTROL_PAR_WIDTH, $panel_scalesmithing_settings_width)
				set_control_par(get_ui_id ($label__overkill_settings),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__overkill_settings),$CONTROL_PAR_POS_Y,0)
				set_control_par(get_ui_id($label__overkill_settings),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_scalesmithing_settings))
				set_control_par(get_ui_id($label__overkill_settings),$CONTROL_PAR_TEXT_ALIGNMENT,1)
	    		set_control_par(get_ui_id($label__overkill_settings), $CONTROL_PAR_HEIGHT, 2)
	    		}

			declare ui_label $label__rpn_connect (1,1)
				set_text ($label__rpn_connect, "script linking:")
				set_control_par(get_ui_id ($label__rpn_connect),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_scalesmithing_settings))
				set_control_par(get_ui_id($label__rpn_connect),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id($label__rpn_connect),$CONTROL_PAR_POS_Y, $panel_scalesmithing_settings_top_margin+($panel_scalesmithing_settings_row_height * 0))
	   			set_control_par(get_ui_id($label__rpn_connect), $CONTROL_PAR_WIDTH, $panel_scalesmithing_settings_btn_positioning - $panel_scalesmithing_settings_btn_margin)
	    		set_control_par(get_ui_id($label__rpn_connect), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($label__rpn_connect), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $switch__rpn_connect
				set_control_par_str(get_ui_id($switch__rpn_connect),$CONTROL_PAR_AUTOMATION_NAME,"tuning__rpn_connect")
				$switch__rpn_connect := 1
				make_persistent($switch__rpn_connect)
				read_persistent_var($switch__rpn_connect)
				set_control_par(get_ui_id ($switch__rpn_connect),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_scalesmithing_settings))
				set_control_par(get_ui_id($switch__rpn_connect),$CONTROL_PAR_POS_X, $panel_scalesmithing_settings_btn_positioning)
				set_control_par(get_ui_id($switch__rpn_connect),$CONTROL_PAR_POS_Y, $panel_scalesmithing_settings_top_margin+($panel_scalesmithing_settings_row_height * 0))
	   			set_control_par(get_ui_id($switch__rpn_connect), $CONTROL_PAR_WIDTH, $panel_scalesmithing_settings_btn_width)
	    		set_control_par(get_ui_id($switch__rpn_connect), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($switch__rpn_connect), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par_str(get_ui_id ($switch__rpn_connect),$CONTROL_PAR_HELP, "Chain link instances of this script. Disclaimer: the MIDI RPN connection has to be set manually in your preferred DAW and the [Send MIDI to the outside world -> Script generated CCs] option in Kontakt settings has to be active. This option doesn't work in AU format of the plugin!")
				select ($switch__rpn_connect)
					case 1
						set_control_par_str(get_ui_id($switch__rpn_connect), $CONTROL_PAR_TEXT, "[ ON ]")
					case 0
						set_control_par_str(get_ui_id($switch__rpn_connect), $CONTROL_PAR_TEXT, "[ off ]")
				end select

				declare $rpn_connect__channel_num := 2137 {TODO: GUI}
				declare $rpn_connect__receive_parameter := 0
				declare $rpn_connect__receive_value := 0
				declare $rpn_connect__listen_to_decimal_places := 0
				declare $rpn_connect__value_counter := 0
				declare $rpn_connect__receive_int := 0
				declare ~rpn_connect__receive_float := 0.0
				declare ~rpn_connect__decimal_multiplier := 0.1
				declare $rpn_connect__digit := 0
				declare $rpn_connect__send_parameter := 0
				declare $rpn_connect__send_value := 0
				declare $rpn_connect__copy := 0
				declare $rpn_connect__num_of_digits := 0
				declare %rpn_connect__digits[128] := (0)
				declare $rpn_connect__send_int := 0
				declare $rpn_connect__send_digit := 0
				declare ~rpn_connect__send_float := 0.0
				declare $rpn_connect__send_negative_number := 0
				declare %rpn_connect__chunk[128] := (0)
				declare %ui_id_rpn_krosownica[1000] := (0)
				declare $rpn_relative_port_index := 0

			declare ui_label $label__serial_stacking_method (1,1)
				set_text ($label__serial_stacking_method, "stacking method:")
				set_control_par(get_ui_id ($label__serial_stacking_method),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_scalesmithing_settings))
				set_control_par(get_ui_id($label__serial_stacking_method),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id($label__serial_stacking_method),$CONTROL_PAR_POS_Y, $panel_scalesmithing_settings_top_margin+($panel_scalesmithing_settings_row_height * 1))
	   			set_control_par(get_ui_id($label__serial_stacking_method), $CONTROL_PAR_WIDTH, $panel_scalesmithing_settings_btn_positioning - $panel_scalesmithing_settings_btn_margin)
	    		set_control_par(get_ui_id($label__serial_stacking_method), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($label__serial_stacking_method), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $switch__stacking_method
				set_control_par_str(get_ui_id($switch__stacking_method),$CONTROL_PAR_AUTOMATION_NAME,"tuning__stacking_method")
				$switch__stacking_method := 0
				make_persistent($switch__stacking_method)
				read_persistent_var($switch__stacking_method)
				set_control_par(get_ui_id ($switch__stacking_method),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_scalesmithing_settings))
				set_control_par(get_ui_id($switch__stacking_method),$CONTROL_PAR_POS_X, $panel_scalesmithing_settings_btn_positioning)
				set_control_par(get_ui_id($switch__stacking_method),$CONTROL_PAR_POS_Y, $panel_scalesmithing_settings_top_margin+($panel_scalesmithing_settings_row_height * 1))
	   			set_control_par(get_ui_id($switch__stacking_method), $CONTROL_PAR_WIDTH, $panel_scalesmithing_settings_btn_width)
	    		set_control_par(get_ui_id($switch__stacking_method), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($switch__stacking_method), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par_str(get_ui_id ($switch__stacking_method),$CONTROL_PAR_HELP, "Stacking method: Choose whether all intervals are build from the tonic [parallel] or are stacked on top of each other [serial]. Disclaimer: this option is not applicable for all of the paradigms in the [scalesmithing] tab.")
				select ($switch__stacking_method)
					case 1
						set_control_par_str(get_ui_id($switch__stacking_method), $CONTROL_PAR_TEXT, "[ serial ]")
					case 0
						set_control_par_str(get_ui_id($switch__stacking_method), $CONTROL_PAR_TEXT, "[ parallel ]")
				end select

			declare ui_label $label__interval_reduction (1,1)
				set_text ($label__interval_reduction, "interval reduction:")
				set_control_par(get_ui_id ($label__interval_reduction),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_scalesmithing_settings))
				set_control_par(get_ui_id($label__interval_reduction),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id($label__interval_reduction),$CONTROL_PAR_POS_Y, $panel_scalesmithing_settings_top_margin+($panel_scalesmithing_settings_row_height * 2))
	   			set_control_par(get_ui_id($label__interval_reduction), $CONTROL_PAR_WIDTH, $panel_scalesmithing_settings_btn_positioning - $panel_scalesmithing_settings_btn_margin)
	    		set_control_par(get_ui_id($label__interval_reduction), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($label__interval_reduction), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $switch__interval_reduction
				set_control_par_str(get_ui_id($switch__interval_reduction),$CONTROL_PAR_AUTOMATION_NAME,"tuning__interval_reduction")
				$switch__interval_reduction := 1
				make_persistent($switch__interval_reduction)
				read_persistent_var($switch__interval_reduction)
				set_control_par(get_ui_id ($switch__interval_reduction),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_scalesmithing_settings))
				set_control_par(get_ui_id($switch__interval_reduction),$CONTROL_PAR_POS_X, $panel_scalesmithing_settings_btn_positioning)
				set_control_par(get_ui_id($switch__interval_reduction),$CONTROL_PAR_POS_Y, $panel_scalesmithing_settings_top_margin+($panel_scalesmithing_settings_row_height * 2))
	   			set_control_par(get_ui_id($switch__interval_reduction), $CONTROL_PAR_WIDTH, $panel_scalesmithing_settings_btn_width)
	    		set_control_par(get_ui_id($switch__interval_reduction), $CONTROL_PAR_HEIGHT, 18 )
				set_control_par(get_ui_id($switch__interval_reduction), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par_str(get_ui_id ($switch__interval_reduction),$CONTROL_PAR_HELP, "Turn on interval reduction (intervals larger than the interval of equivalence will be reduced to fir the period of the scale).")
				select ($switch__interval_reduction)
					case 1
						set_control_par_str(get_ui_id($switch__interval_reduction), $CONTROL_PAR_TEXT, "[ ON ]")
					case 0
						set_control_par_str(get_ui_id($switch__interval_reduction), $CONTROL_PAR_TEXT, "[off]")
				end select

			declare ui_label $label__reduce_by_octave (1,1)
				set_text ($label__reduce_by_octave, "reduction interval:")
				set_control_par(get_ui_id ($label__reduce_by_octave),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_scalesmithing_settings))
				set_control_par(get_ui_id($label__reduce_by_octave),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id($label__reduce_by_octave),$CONTROL_PAR_POS_Y, $panel_scalesmithing_settings_top_margin+($panel_scalesmithing_settings_row_height * 3))
	   			set_control_par(get_ui_id($label__reduce_by_octave), $CONTROL_PAR_WIDTH, $panel_scalesmithing_settings_btn_positioning - $panel_scalesmithing_settings_btn_margin)
	    		set_control_par(get_ui_id($label__reduce_by_octave), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($label__reduce_by_octave), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $switch__reduce_by_octave
				set_control_par_str(get_ui_id($switch__reduce_by_octave),$CONTROL_PAR_AUTOMATION_NAME,"tuning__reduce_intervals_by_octave")
				$switch__reduce_by_octave := 0
				make_persistent($switch__reduce_by_octave)
				read_persistent_var($switch__reduce_by_octave)
				set_control_par(get_ui_id ($switch__reduce_by_octave),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_scalesmithing_settings))
				set_control_par(get_ui_id($switch__reduce_by_octave),$CONTROL_PAR_POS_X, $panel_scalesmithing_settings_btn_positioning)
				set_control_par(get_ui_id($switch__reduce_by_octave),$CONTROL_PAR_POS_Y, $panel_scalesmithing_settings_top_margin+($panel_scalesmithing_settings_row_height * 3))
	   			set_control_par(get_ui_id($switch__reduce_by_octave), $CONTROL_PAR_WIDTH, $panel_scalesmithing_settings_btn_width)
	    		set_control_par(get_ui_id($switch__reduce_by_octave), $CONTROL_PAR_HEIGHT, 18 )
				set_control_par(get_ui_id($switch__reduce_by_octave), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par_str(get_ui_id ($switch__reduce_by_octave),$CONTROL_PAR_HELP, "Reduction interval: Choose whether larger intervals should always be reduced by the interval of equivalence regardless of it's size, or always be set in relation to a perfect octave.")
				select ($switch__reduce_by_octave)
					case 0
						set_control_par_str(get_ui_id($switch__reduce_by_octave), $CONTROL_PAR_TEXT, "[ equave ]")
					case 1
						set_control_par_str(get_ui_id($switch__reduce_by_octave), $CONTROL_PAR_TEXT, "[ octave ]")
				end select

			declare ui_label $label__reduction_mode (1,1)
				set_text ($label__reduction_mode, "reduction mode:")
				set_control_par(get_ui_id ($label__reduction_mode),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_scalesmithing_settings))
				set_control_par(get_ui_id($label__reduction_mode),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id($label__reduction_mode),$CONTROL_PAR_POS_Y, $panel_scalesmithing_settings_top_margin+($panel_scalesmithing_settings_row_height * 4))
	   			set_control_par(get_ui_id($label__reduction_mode), $CONTROL_PAR_WIDTH, $panel_scalesmithing_settings_btn_positioning - $panel_scalesmithing_settings_btn_margin)
	    		set_control_par(get_ui_id($label__reduction_mode), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($label__reduction_mode), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $switch__reduction_mode
				set_control_par_str(get_ui_id($switch__reduction_mode),$CONTROL_PAR_AUTOMATION_NAME,"tuning__reduction_mode")
				$switch__reduction_mode := 0
				make_persistent($switch__reduction_mode)
				read_persistent_var($switch__reduction_mode)
				set_control_par(get_ui_id ($switch__reduction_mode),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_scalesmithing_settings))
				set_control_par(get_ui_id($switch__reduction_mode),$CONTROL_PAR_POS_X, $panel_scalesmithing_settings_btn_positioning)
				set_control_par(get_ui_id($switch__reduction_mode),$CONTROL_PAR_POS_Y, $panel_scalesmithing_settings_top_margin+($panel_scalesmithing_settings_row_height * 4))
	   			set_control_par(get_ui_id($switch__reduction_mode), $CONTROL_PAR_WIDTH, $panel_scalesmithing_settings_btn_width)
	    		set_control_par(get_ui_id($switch__reduction_mode), $CONTROL_PAR_HEIGHT, 18 )
				set_control_par(get_ui_id($switch__reduction_mode), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par_str(get_ui_id ($switch__reduction_mode),$CONTROL_PAR_HELP, "Choose the interval reduction method. In [normal] mode the interval 1300c would be reduced through an octave to 100c. In [alias] mode the resulting interval would be 1100c  (the difference between the equave and the overshoot value).")
				select ($switch__reduction_mode)
					case 0
						set_control_par_str(get_ui_id($switch__reduction_mode), $CONTROL_PAR_TEXT, "[ normal ]")
					case 1
						set_control_par_str(get_ui_id($switch__reduction_mode), $CONTROL_PAR_TEXT, "[ alias ]")
				end select

			declare ui_label $label__quantize_to_12edo (1,1)
				set_text ($label__quantize_to_12edo, "quantize to 12edo:")
				set_control_par(get_ui_id ($label__quantize_to_12edo),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_scalesmithing_settings))
				set_control_par(get_ui_id($label__quantize_to_12edo),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id($label__quantize_to_12edo),$CONTROL_PAR_POS_Y, $panel_scalesmithing_settings_top_margin+($panel_scalesmithing_settings_row_height * 5))
	   			set_control_par(get_ui_id($label__quantize_to_12edo), $CONTROL_PAR_WIDTH, $panel_scalesmithing_settings_btn_positioning - $panel_scalesmithing_settings_btn_margin)
	    		set_control_par(get_ui_id($label__quantize_to_12edo), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($label__quantize_to_12edo), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $switch__quantize_to_12edo
				set_control_par_str(get_ui_id($switch__quantize_to_12edo),$CONTROL_PAR_AUTOMATION_NAME,"tuning__quantize_to_12edo")
				$switch__quantize_to_12edo := 0
				make_persistent($switch__quantize_to_12edo)
				read_persistent_var($switch__quantize_to_12edo)
				set_control_par(get_ui_id ($switch__quantize_to_12edo),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_scalesmithing_settings))
				set_control_par(get_ui_id($switch__quantize_to_12edo),$CONTROL_PAR_POS_X, $panel_scalesmithing_settings_btn_positioning)
				set_control_par(get_ui_id($switch__quantize_to_12edo),$CONTROL_PAR_POS_Y, $panel_scalesmithing_settings_top_margin+($panel_scalesmithing_settings_row_height * 5))
	   			set_control_par(get_ui_id($switch__quantize_to_12edo), $CONTROL_PAR_WIDTH, $panel_scalesmithing_settings_btn_width)
	    		set_control_par(get_ui_id($switch__quantize_to_12edo), $CONTROL_PAR_HEIGHT, 18 )
				set_control_par(get_ui_id($switch__quantize_to_12edo), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				select ($switch__quantize_to_12edo)
					case 0
						set_control_par_str(get_ui_id($switch__quantize_to_12edo), $CONTROL_PAR_TEXT, "[ no ]")
					case 1
						set_control_par_str(get_ui_id($switch__quantize_to_12edo), $CONTROL_PAR_TEXT, "[ Yes ]")
				end select
				set_control_par_str(get_ui_id ($switch__quantize_to_12edo),$CONTROL_PAR_HELP, "Quantize script generated pitches to the nearest pitches in 12-tone equal temperament.")

			declare ui_label $label__adaptive_pure_tuning (1,1)
				set_text ($label__adaptive_pure_tuning, "adaptive just intonation:")
				set_control_par(get_ui_id ($label__adaptive_pure_tuning),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_scalesmithing_settings))
				set_control_par(get_ui_id($label__adaptive_pure_tuning),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id($label__adaptive_pure_tuning),$CONTROL_PAR_POS_Y, $panel_scalesmithing_settings_top_margin+($panel_scalesmithing_settings_row_height * 6))
	   			set_control_par(get_ui_id($label__adaptive_pure_tuning), $CONTROL_PAR_WIDTH, $panel_scalesmithing_settings_btn_positioning - $panel_scalesmithing_settings_btn_margin)
	    		set_control_par(get_ui_id($label__adaptive_pure_tuning), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($label__adaptive_pure_tuning), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $switch__adaptive_pure_tuning
				set_control_par_str(get_ui_id($switch__adaptive_pure_tuning),$CONTROL_PAR_AUTOMATION_NAME,"dynamic_just_intonation")
				$switch__adaptive_pure_tuning := 0
				make_persistent($switch__adaptive_pure_tuning)
				read_persistent_var($switch__adaptive_pure_tuning)
				set_control_par(get_ui_id ($switch__adaptive_pure_tuning),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_scalesmithing_settings))
				set_control_par(get_ui_id($switch__adaptive_pure_tuning),$CONTROL_PAR_POS_X, $panel_scalesmithing_settings_btn_positioning)
				set_control_par(get_ui_id($switch__adaptive_pure_tuning),$CONTROL_PAR_POS_Y, $panel_scalesmithing_settings_top_margin+($panel_scalesmithing_settings_row_height * 6))
	   			set_control_par(get_ui_id($switch__adaptive_pure_tuning), $CONTROL_PAR_WIDTH, $panel_scalesmithing_settings_btn_width)
	    		set_control_par(get_ui_id($switch__adaptive_pure_tuning), $CONTROL_PAR_HEIGHT, 18 )
				set_control_par(get_ui_id($switch__adaptive_pure_tuning), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par_str(get_ui_id ($switch__adaptive_pure_tuning),$CONTROL_PAR_HELP, "Momentarily switch to Adaptive Just Intonation and intonate unlimited comma pumps. This is an experimental feature.")
				select ($switch__adaptive_pure_tuning)
					case 0
						set_control_par_str(get_ui_id($switch__adaptive_pure_tuning), $CONTROL_PAR_TEXT, "[ off ]")
					case 1
						set_control_par_str(get_ui_id($switch__adaptive_pure_tuning), $CONTROL_PAR_TEXT, "[ ON ]")
				end select
			   declare $dynamic_just_intonation__reset := 1
			   declare %held_notes_key_distance_vectors[128] := (0)
			   declare %held_notes_key_distance_modvectors[128] := (0)
			   declare $number_of_other_pressed_keys := 0
			   declare $pompka__logic_array_index := 0
			   declare $pompka__pointer := 0
			   declare $pompka__event_note := 0
			   declare ~previous_note_pitch_hz := 440.0
			   declare $previous_event_note_pitch := 69
			   declare const $pompka__logic_array_length := 18 {num of rows in logic array}
			   declare %pompka__logic_array[4*$pompka__logic_array_length] := ( 	0, 0, 1, 1,	        ...
																					7, 0, 3, 2,	     	...
																					5, 0, 4, 3,	     	...
																					9, 0, 5, 3,		    ...
																					4, 0,  5, 4,		...
																					3, 10, 7, 6,		...
																					10, 7, 7, 4,		...
																					3, 0, 6, 5,		    ...
																					8, 0, 8, 5,		    ... 
																					6, 1, 11, 8,		...
																					11, 6, 15, 8,		...
																					6, 4, 11, 8,		...
																					1, 2, 17, 16,		...
																					11, 0, 15, 8,		... 
																					10, 0, 16, 9,		... 
																					2, 0, 9, 8,  		... 
																					1, 0, 16, 15,		... 
																					6, 0, 7, 5		    )



			declare ui_label $label__quantizebeatstobpm (1,1)
				set_text ($label__quantizebeatstobpm, "bpm overtones:")
				set_control_par(get_ui_id ($label__quantizebeatstobpm),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_scalesmithing_settings))
				set_control_par(get_ui_id($label__quantizebeatstobpm),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id($label__quantizebeatstobpm),$CONTROL_PAR_POS_Y, $panel_scalesmithing_settings_top_margin+($panel_scalesmithing_settings_row_height * 7))
	   			set_control_par(get_ui_id($label__quantizebeatstobpm), $CONTROL_PAR_WIDTH, $panel_scalesmithing_settings_btn_positioning - $panel_scalesmithing_settings_btn_margin)
	    		set_control_par(get_ui_id($label__quantizebeatstobpm), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($label__quantizebeatstobpm), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $switch__quantizebeatstobpm
				set_control_par_str(get_ui_id($switch__quantizebeatstobpm),$CONTROL_PAR_AUTOMATION_NAME,"tuning__quantize_to_bpm_overtones")
				$switch__quantizebeatstobpm := 0
				make_persistent($switch__quantizebeatstobpm)
				read_persistent_var($switch__quantizebeatstobpm)
				set_control_par(get_ui_id ($switch__quantizebeatstobpm),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_scalesmithing_settings))
				set_control_par(get_ui_id($switch__quantizebeatstobpm),$CONTROL_PAR_POS_X, $panel_scalesmithing_settings_btn_positioning)
				set_control_par(get_ui_id($switch__quantizebeatstobpm),$CONTROL_PAR_POS_Y, 2+($panel_scalesmithing_settings_row_height * 7))
	   			set_control_par(get_ui_id($switch__quantizebeatstobpm), $CONTROL_PAR_WIDTH, $panel_scalesmithing_settings_btn_width)
	    		set_control_par(get_ui_id($switch__quantizebeatstobpm), $CONTROL_PAR_HEIGHT, 18 )
				set_control_par(get_ui_id($switch__quantizebeatstobpm), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par_str(get_ui_id ($switch__quantizebeatstobpm),$CONTROL_PAR_HELP, "Quantize pitches to the overtones of project BPM value. E.g. if the project is set to 120bpm, each note shall be tuned to the overtones of 2Hz.")
				select ($switch__quantizebeatstobpm)
					case 0
						set_control_par_str(get_ui_id($switch__quantizebeatstobpm), $CONTROL_PAR_TEXT, "[ off ]")
					case 1
						set_control_par_str(get_ui_id($switch__quantizebeatstobpm), $CONTROL_PAR_TEXT, "[ ON ]")
				end select
			end if

		if (1=1)
		{ui_panel $panel__last_note_info}
				set_control_par(get_ui_id ($panel__last_note_info),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($panel__last_note_info),$CONTROL_PAR_POS_Y,180)

				declare ui_label $label__last_note_info (1,1)
					set_text ($label__last_note_info,"l a s t   n o t e   i n f o :")
					set_control_par(get_ui_id($label__last_note_info),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__last_note_info))
					set_control_par(get_ui_id ($label__last_note_info),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($label__last_note_info),$CONTROL_PAR_POS_Y,0)
					set_control_par(get_ui_id($label__last_note_info),$CONTROL_PAR_WIDTH, 92 * 5 - 3)
					set_control_par(get_ui_id($label__last_note_info),$CONTROL_PAR_TEXT_ALIGNMENT,1)
    				set_control_par(get_ui_id($label__last_note_info), $CONTROL_PAR_HEIGHT, 18)
					set_control_par_str(get_ui_id ($label__last_note_info),$CONTROL_PAR_HELP, "Tuning information about the last played note. The dummy knobs are meant to be used for visualisation purposes.")

				declare ui_label $label__last_midi_note (1,1)
					set_text ($label__last_midi_note,"")
					set_control_par(get_ui_id($label__last_midi_note),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__last_note_info))
					set_control_par(get_ui_id ($label__last_midi_note),$CONTROL_PAR_POS_X, 92*5)
					set_control_par(get_ui_id ($label__last_midi_note),$CONTROL_PAR_POS_Y, 1+(20*0))
					set_control_par(get_ui_id($label__last_midi_note),$CONTROL_PAR_WIDTH,114)
					set_control_par(get_ui_id($label__last_midi_note),$CONTROL_PAR_TEXT_ALIGNMENT,1)
    				set_control_par(get_ui_id($label__last_midi_note), $CONTROL_PAR_HEIGHT, 18)

				declare ui_label $label__last_detune (1,1)
					set_text ($label__last_detune,"")
					set_control_par(get_ui_id($label__last_detune),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__last_note_info))
					set_control_par(get_ui_id ($label__last_detune),$CONTROL_PAR_POS_X, 92*5)
					set_control_par(get_ui_id ($label__last_detune),$CONTROL_PAR_POS_Y, 1+(21*1))
					set_control_par(get_ui_id($label__last_detune),$CONTROL_PAR_WIDTH,114)
					set_control_par(get_ui_id($label__last_detune),$CONTROL_PAR_TEXT_ALIGNMENT,1)
    				set_control_par(get_ui_id($label__last_detune), $CONTROL_PAR_HEIGHT, 18)

				declare ui_label $label__last_freq (1,1)
					set_text ($label__last_freq,"")
					set_control_par(get_ui_id($label__last_freq),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__last_note_info))
					set_control_par(get_ui_id ($label__last_freq),$CONTROL_PAR_POS_X, 92*5)
					set_control_par(get_ui_id ($label__last_freq),$CONTROL_PAR_POS_Y, 1+(21*2))
					set_control_par(get_ui_id($label__last_freq),$CONTROL_PAR_WIDTH,114)
					set_control_par(get_ui_id($label__last_freq),$CONTROL_PAR_TEXT_ALIGNMENT,1)
    				set_control_par(get_ui_id($label__last_freq), $CONTROL_PAR_HEIGHT, 18)
					set_control_par_str(get_ui_id ($label__last_freq),$CONTROL_PAR_HELP, "Fundamental frequency of the last played note assuming that samples are mapped to A=440Hz 12EDO. Milihertz values are also mapped to the $EVENT_PAR_0 variable and can be further connected e.g. to tune the time parameters of various effects.")

			{dummy knobs displaying last played note - you can connect those outside for visualisation purposes :)}
				declare $dummy_knobs_helper_var

				declare ui_knob $dummy_knob_semitone(0,128,1) {last played pitch quantized to standard 12edo MIDI layout}
					set_control_par_str(get_ui_id($dummy_knob_semitone),$CONTROL_PAR_AUTOMATION_NAME,"dummy_knob_semitone")
					set_control_par(get_ui_id($dummy_knob_semitone),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__last_note_info))
					set_control_par(get_ui_id ($dummy_knob_semitone),$CONTROL_PAR_POS_X,92*0)
					set_control_par(get_ui_id ($dummy_knob_semitone),$CONTROL_PAR_POS_Y,22)
					$dummy_knob_semitone := 69
					set_knob_defval ($dummy_knob_semitone, 1)
					make_persistent ($dummy_knob_semitone)
					read_persistent_var ($dummy_knob_semitone)
					set_text ($dummy_knob_semitone," pitch")
					set_knob_label ($dummy_knob_semitone," ")
				declare ui_knob $dummy_knob_velocity(0,128,1) {chromatic pitch - 12edo semitone that is the closest one to last played note}
					set_control_par_str(get_ui_id($dummy_knob_velocity),$CONTROL_PAR_AUTOMATION_NAME,"dummy_knob_velocity")
					set_control_par(get_ui_id($dummy_knob_velocity),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__last_note_info))
					set_control_par(get_ui_id ($dummy_knob_velocity),$CONTROL_PAR_POS_X,92*1)
					set_control_par(get_ui_id ($dummy_knob_velocity),$CONTROL_PAR_POS_Y,22)
					$dummy_knob_velocity := 0
					set_knob_defval ($dummy_knob_velocity, 1)
					set_text ($dummy_knob_velocity," velocity")
					make_persistent ($dummy_knob_velocity)
					read_persistent_var ($dummy_knob_velocity)
					set_knob_label ($dummy_knob_velocity," ")
				declare ui_knob $dummy_knob_chroma(0,11,1) {chromatic pitch - 12edo semitone that is the closest one to last played note}
					set_control_par_str(get_ui_id($dummy_knob_chroma),$CONTROL_PAR_AUTOMATION_NAME,"dummy_knob_chroma")
					set_control_par(get_ui_id($dummy_knob_chroma),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__last_note_info))
					set_control_par(get_ui_id ($dummy_knob_chroma),$CONTROL_PAR_POS_X,92*2)
					set_control_par(get_ui_id ($dummy_knob_chroma),$CONTROL_PAR_POS_Y,22)
					$dummy_knob_chroma := 0
					set_knob_defval ($dummy_knob_chroma, 1)
					set_text ($dummy_knob_chroma," chroma")
					make_persistent ($dummy_knob_chroma)
					read_persistent_var ($dummy_knob_chroma)
					set_knob_label ($dummy_knob_chroma," ")
				declare ui_knob $dummy_knob_detune_value_cents(-63,64,1) {last played note detune value from a tempered semitone in cents}
					set_control_par_str(get_ui_id($dummy_knob_detune_value_cents),$CONTROL_PAR_AUTOMATION_NAME,"dummy_knob_cents")
					set_control_par(get_ui_id($dummy_knob_detune_value_cents),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__last_note_info))
					set_control_par(get_ui_id ($dummy_knob_detune_value_cents),$CONTROL_PAR_POS_X,92*3)
					set_control_par(get_ui_id ($dummy_knob_detune_value_cents),$CONTROL_PAR_POS_Y,22)
					$dummy_knob_detune_value_cents := 0
					set_knob_defval ($dummy_knob_detune_value_cents, 0)
					make_persistent ($dummy_knob_detune_value_cents)
					read_persistent_var ($dummy_knob_detune_value_cents)
					set_text ($dummy_knob_detune_value_cents," cents")
					set_knob_label ($dummy_knob_detune_value_cents," ")
				declare ui_knob $dummy_knob_detune_value_cent_percentage(0,128,1) {last played note detune lsb's: 1/10000 of a tempered semitone}
					set_control_par_str(get_ui_id($dummy_knob_detune_value_cent_percentage),$CONTROL_PAR_AUTOMATION_NAME,"dummy_knob_cent_percentage")
					set_control_par(get_ui_id($dummy_knob_detune_value_cent_percentage),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__last_note_info))
					set_control_par(get_ui_id ($dummy_knob_detune_value_cent_percentage),$CONTROL_PAR_POS_X,92*4)
					set_control_par(get_ui_id ($dummy_knob_detune_value_cent_percentage),$CONTROL_PAR_POS_Y,22)
					$dummy_knob_detune_value_cent_percentage := 0
					set_knob_defval ($dummy_knob_detune_value_cent_percentage, 0)
					make_persistent ($dummy_knob_detune_value_cent_percentage)
					read_persistent_var ($dummy_knob_detune_value_cent_percentage)
					set_text ($dummy_knob_detune_value_cent_percentage," % c")
					set_knob_label ($dummy_knob_detune_value_cent_percentage," ")
			end if

	{SCALESMITHING TAB:}
		declare $scalesmithing_paradigm_panel_pos_x {left indent}
				$scalesmithing_paradigm_panel_pos_x := 25
		declare $scalesmithing_paradigm_panel_pos_y
				$scalesmithing_paradigm_panel_pos_y := 36
				set_control_par(get_ui_id ($gui_panel__scalesmithing_tab),$CONTROL_PAR_POS_X,$scalesmithing_paradigm_panel_pos_x)
				set_control_par(get_ui_id ($gui_panel__scalesmithing_tab),$CONTROL_PAR_POS_Y,$scalesmithing_paradigm_panel_pos_y)

			declare ui_panel $panel__interval_of_equivalence
				set_control_par(get_ui_id($panel__interval_of_equivalence),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__scalesmithing_tab))
				set_control_par(get_ui_id ($panel__interval_of_equivalence),$CONTROL_PAR_POS_X,103+112)
				set_control_par(get_ui_id ($panel__interval_of_equivalence),$CONTROL_PAR_POS_Y,22+8)

			declare ui_label $label_interval_of_equivalence (1,1)
				set_text ($label_interval_of_equivalence,"interval of equivalence (JI):")
				set_control_par(get_ui_id($label_interval_of_equivalence),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__interval_of_equivalence))
				set_control_par(get_ui_id($label_interval_of_equivalence),$CONTROL_PAR_WIDTH, (88+2)*4 - 2)
				set_control_par(get_ui_id ($label_interval_of_equivalence),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_interval_of_equivalence),$CONTROL_PAR_POS_Y,0)

			declare ui_knob $knob__interval_of_equivalence_numerator(1,128,1)
				set_control_par_str(get_ui_id($knob__interval_of_equivalence_numerator),$CONTROL_PAR_AUTOMATION_NAME,"equave_numerator")
				$knob__interval_of_equivalence_numerator := 2
				set_knob_defval ($knob__interval_of_equivalence_numerator, 2)
				make_persistent ($knob__interval_of_equivalence_numerator)
				read_persistent_var($knob__interval_of_equivalence_numerator)
				set_text ($knob__interval_of_equivalence_numerator,"   *")
				set_control_par(get_ui_id($knob__interval_of_equivalence_numerator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__interval_of_equivalence))
				set_control_par(get_ui_id ($knob__interval_of_equivalence_numerator),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($knob__interval_of_equivalence_numerator),$CONTROL_PAR_POS_Y,22)
			declare ui_knob $knob__interval_of_equivalence_denominator(1,128,1)
				set_control_par_str(get_ui_id($knob__interval_of_equivalence_denominator),$CONTROL_PAR_AUTOMATION_NAME,"equave_denominator")
				$knob__interval_of_equivalence_denominator := 1
				set_knob_defval ($knob__interval_of_equivalence_denominator, 1)
				make_persistent ($knob__interval_of_equivalence_denominator)
				read_persistent_var ($knob__interval_of_equivalence_denominator)
				set_text ($knob__interval_of_equivalence_denominator,"    /")
				set_control_par(get_ui_id($knob__interval_of_equivalence_denominator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__interval_of_equivalence))
				set_control_par(get_ui_id ($knob__interval_of_equivalence_denominator),$CONTROL_PAR_POS_X,(88+2)*1)
				set_control_par(get_ui_id ($knob__interval_of_equivalence_denominator),$CONTROL_PAR_POS_Y,22)
			declare ui_knob $knob__interval_of_equivalence_power_numerator(1,128,1)
				set_control_par_str(get_ui_id($knob__interval_of_equivalence_power_numerator),$CONTROL_PAR_AUTOMATION_NAME,"equave_power_numerator")
				$knob__interval_of_equivalence_power_numerator := 1
				set_knob_defval ($knob__interval_of_equivalence_power_numerator, 1)
				make_persistent ($knob__interval_of_equivalence_power_numerator)
				read_persistent_var($knob__interval_of_equivalence_power_numerator)
				set_text ($knob__interval_of_equivalence_power_numerator,"   exp")
				set_control_par(get_ui_id($knob__interval_of_equivalence_power_numerator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__interval_of_equivalence))
				set_control_par(get_ui_id ($knob__interval_of_equivalence_power_numerator),$CONTROL_PAR_POS_X,(88+2)*2)
				set_control_par(get_ui_id ($knob__interval_of_equivalence_power_numerator),$CONTROL_PAR_POS_Y,22)
			declare ui_knob $knob__interval_of_equivalence_power_denominator(1,128,1)
				set_control_par_str(get_ui_id($knob__interval_of_equivalence_power_denominator),$CONTROL_PAR_AUTOMATION_NAME,"equave_power_denominator")
				$knob__interval_of_equivalence_power_denominator := 1
				set_knob_defval ($knob__interval_of_equivalence_power_denominator, 1)
				make_persistent ($knob__interval_of_equivalence_power_denominator)
				read_persistent_var ($knob__interval_of_equivalence_power_denominator)
				set_text ($knob__interval_of_equivalence_power_denominator,"   root")
				set_control_par(get_ui_id($knob__interval_of_equivalence_power_denominator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__interval_of_equivalence))
				set_control_par(get_ui_id ($knob__interval_of_equivalence_power_denominator),$CONTROL_PAR_POS_X,(88+2)*3)
				set_control_par(get_ui_id ($knob__interval_of_equivalence_power_denominator),$CONTROL_PAR_POS_Y,22)

			~interval_of_equivalence := 1200.0*log( exp((int_to_real($knob__interval_of_equivalence_power_numerator)/int_to_real($knob__interval_of_equivalence_power_denominator)) * log(int_to_real($knob__interval_of_equivalence_numerator)/int_to_real($knob__interval_of_equivalence_denominator))) )/log(2.0)
			set_text ($label_interval_of_equivalence,"i n t e r v a l   o f   e q u i v a l e n c e    =   ( " & $knob__interval_of_equivalence_numerator & " / " & $knob__interval_of_equivalence_denominator & " ) ^ ( " & $knob__interval_of_equivalence_power_numerator & " / " & $knob__interval_of_equivalence_power_denominator & " ) " & " =  " & floor(~interval_of_equivalence*100.0)/100.0 & "c")

		{PARADIGM MENU}
		declare ui_menu $paradigms_menu
			set_control_par(get_ui_id($paradigms_menu),$CONTROL_PAR_WIDTH,471)
			set_control_par(get_ui_id($paradigms_menu),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__scalesmithing_tab))
			set_control_par(get_ui_id ($paradigms_menu),$CONTROL_PAR_POS_X,103)
			set_control_par(get_ui_id ($paradigms_menu),$CONTROL_PAR_POS_Y,0)
			add_menu_item ($paradigms_menu, "Just Intonation",808)
		{   add_menu_item ($paradigms_menu, "Just Intonation [high precision]",800) }
			add_menu_item ($paradigms_menu, "Exponentiation",1101)
		{	add_menu_item ($paradigms_menu, "Exponentiation [high precision]",1100)}
			add_menu_item ($paradigms_menu, "Combination Product Set",1002)
			add_menu_item ($paradigms_menu, "Equal-step tuning",1111)
			add_menu_item ($paradigms_menu, "Epimoric",1000)
			add_menu_item ($paradigms_menu, "Euler-Fokker genera",1001)
			add_menu_item ($paradigms_menu, "Cent input",801) {TODO}
			add_menu_item ($paradigms_menu, "Hertz input",1935) {TODO}
			add_menu_item ($paradigms_menu, "Temperament Units (John Brombaugh's TU notation)",720)
			add_menu_item ($paradigms_menu, "Period + generator",3) {TODO}
			add_menu_item ($paradigms_menu, "Zalewski's harmonic structures",98)
			add_menu_item ($paradigms_menu, "Zalewski's q(n,z) structure",99)
		{	add_menu_item ($paradigms_menu, "",7)} {TODO "load tuning from .nka file"}
			make_persistent ($paradigms_menu)
			read_persistent_var($paradigms_menu)

		{cent input module - 801}

			declare ?default_cent_tuning[8] := (0.0, 203.91, 386.314, 551.318, 648.682, 813.686, 996.09, 1200.0) {tuning_11limit_heptatonic}

			declare ui_panel $panel__tune_by_cents
				set_control_par(get_ui_id($panel__tune_by_cents),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__scalesmithing_tab))
				set_control_par(get_ui_id ($panel__tune_by_cents),$CONTROL_PAR_POS_X,12)
				set_control_par(get_ui_id ($panel__tune_by_cents),$CONTROL_PAR_POS_Y,30)
				declare $panel__tune_by_cents_visibility
					$panel__tune_by_cents_visibility := 0
					make_persistent($panel__tune_by_cents_visibility)
					read_persistent_var($panel__tune_by_cents_visibility)
				declare const $panel__tune_by_cents__num_of_ui_values := 7
				declare %tune_by_cents__uivalue_id[$panel__tune_by_cents__num_of_ui_values]
				declare ui_panel $panel__tune_by_cents_num_of_cats
				declare ui_panel $panel__tune_by_cents_table
				declare ui_panel $panel_tune_by_cents__uivalues
				declare const $panel__tune_by_cents__width := 550
				declare const $panel__tune_by_cents__nav_btn_width := 20
				declare const $panel__tune_by_cents__column_width := 70
				declare const $panel__tune_by_cents__ui_value_width := 62
				declare const $panel__tune_by_cents__values_left_margin := ($panel__tune_by_cents__width - ($panel__tune_by_cents__num_of_ui_values * $panel__tune_by_cents__column_width) + ($panel__tune_by_cents__column_width - $panel__tune_by_cents__ui_value_width) ) / 2

				set_control_par(get_ui_id($panel__tune_by_cents_num_of_cats),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_cents))	
				set_control_par(get_ui_id ($panel__tune_by_cents_num_of_cats),$CONTROL_PAR_POS_X,91)
				set_control_par(get_ui_id ($panel__tune_by_cents_num_of_cats),$CONTROL_PAR_POS_Y,0)

			declare ui_label $label__tune_by_cents_num_of_cats (1,1)
				set_text ($label__tune_by_cents_num_of_cats,"n u m   o f  c a t s")
				set_control_par(get_ui_id($label__tune_by_cents_num_of_cats),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_cents_num_of_cats))
				set_control_par(get_ui_id($label__tune_by_cents_num_of_cats),$CONTROL_PAR_WIDTH,88)
				set_control_par(get_ui_id ($label__tune_by_cents_num_of_cats),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__tune_by_cents_num_of_cats),$CONTROL_PAR_POS_Y,0)
			declare ui_knob $knob__number_of_pitch_classes__tune_by_cents(1,128,1)
				set_control_par_str(get_ui_id($knob__number_of_pitch_classes__tune_by_cents),$CONTROL_PAR_AUTOMATION_NAME,"number_of_pitch_classes")
				$knob__number_of_pitch_classes__tune_by_cents := 5
				make_persistent($knob__number_of_pitch_classes__tune_by_cents)
				read_persistent_var($knob__number_of_pitch_classes__tune_by_cents)
				set_text ($knob__number_of_pitch_classes__tune_by_cents," steps")
				set_control_par(get_ui_id($knob__number_of_pitch_classes__tune_by_cents),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_cents_num_of_cats))
				set_control_par(get_ui_id ($knob__number_of_pitch_classes__tune_by_cents),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($knob__number_of_pitch_classes__tune_by_cents),$CONTROL_PAR_POS_Y,22)

		
				set_control_par(get_ui_id($panel__tune_by_cents_table),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_cents))
				set_control_par(get_ui_id ($panel__tune_by_cents_table),$CONTROL_PAR_POS_X,11)
				set_control_par(get_ui_id ($panel__tune_by_cents_table),$CONTROL_PAR_POS_Y,71)


		declare ui_label $label__tune_by_cents__cent_table (1,1)
				set_text ($label__tune_by_cents__cent_table," c e n t s :")
				set_control_par(get_ui_id($label__tune_by_cents__cent_table),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_cents_table))
				set_control_par(get_ui_id($label__tune_by_cents__cent_table),$CONTROL_PAR_WIDTH,$panel__tune_by_cents__width)
				set_control_par(get_ui_id ($label__tune_by_cents__cent_table),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__tune_by_cents__cent_table),$CONTROL_PAR_POS_Y,0)

			declare $panel__tune_by_cents__navigation_counter
				$panel__tune_by_cents__navigation_counter := 0 {which twelve scale steps are currently displayed in the table of ratios}
				make_persistent($panel__tune_by_cents__navigation_counter)
				read_persistent_var($panel__tune_by_cents__navigation_counter)

			declare ui_button $panel__tune_by_cents__navigate_left
				$panel__tune_by_cents__navigate_left := 0
				set_text ($panel__tune_by_cents__navigate_left,"<")
				set_control_par(get_ui_id($panel__tune_by_cents__navigate_left),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_cents_table))
				set_control_par(get_ui_id($panel__tune_by_cents__navigate_left),$CONTROL_PAR_WIDTH,$panel__tune_by_cents__nav_btn_width)
				set_control_par(get_ui_id ($panel__tune_by_cents__navigate_left),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($panel__tune_by_cents__navigate_left),$CONTROL_PAR_POS_Y,20)
				if ($panel__tune_by_cents__navigation_counter = 0)
					set_control_par(get_ui_id($panel__tune_by_cents__navigate_left),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				else
					set_control_par(get_ui_id($panel__tune_by_cents__navigate_left),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				end if

			declare ui_button $panel__tune_by_cents__navigate_right
				$panel__tune_by_cents__navigate_right := 0
				set_text ($panel__tune_by_cents__navigate_right,">")
				set_control_par(get_ui_id($panel__tune_by_cents__navigate_right),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_cents_table))
				set_control_par(get_ui_id($panel__tune_by_cents__navigate_right),$CONTROL_PAR_WIDTH,$panel__tune_by_cents__nav_btn_width)
				set_control_par(get_ui_id ($panel__tune_by_cents__navigate_right),$CONTROL_PAR_POS_X,$panel__tune_by_cents__width-$panel__tune_by_cents__nav_btn_width)
				set_control_par(get_ui_id ($panel__tune_by_cents__navigate_right),$CONTROL_PAR_POS_Y,20)
				if ($knob__number_of_pitch_classes__tune_by_cents+($panel__tune_by_cents__navigation_counter*$panel__tune_by_cents__num_of_ui_values) <= $panel__tune_by_cents__num_of_ui_values)
					set_control_par(get_ui_id($panel__tune_by_cents__navigate_right),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				else
					set_control_par(get_ui_id($panel__tune_by_cents__navigate_right),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				end if

				set_control_par(get_ui_id($panel_tune_by_cents__uivalues),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_cents_table))
				set_control_par(get_ui_id ($panel_tune_by_cents__uivalues),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($panel_tune_by_cents__uivalues),$CONTROL_PAR_POS_Y,18)

			declare %panel_tune_by_cents__milicent_array[256] := (0)
				make_persistent(%panel_tune_by_cents__milicent_array)
				$counter1 := 0
					while ($counter1 < num_elements(?default_cent_tuning))
						%panel_tune_by_cents__milicent_array[$counter1] := real_to_int(1000.0*(?default_cent_tuning[$counter1]))
						inc($counter1)
					end while			
					while ($counter1 < num_elements(%panel_tune_by_cents__milicent_array))
						%panel_tune_by_cents__milicent_array[$counter1] := $counter1 * 100 * 1000
						inc($counter1)
					end while

					declare ui_value_edit $gui_cent_value_1(-12000000,12000000,1000)
						%tune_by_cents__uivalue_id[0] := get_ui_id ($gui_cent_value_1)
					declare ui_value_edit $gui_cent_value_2(-12000000,12000000,1000)
						%tune_by_cents__uivalue_id[1] := get_ui_id ($gui_cent_value_2)
					declare ui_value_edit $gui_cent_value_3(-12000000,12000000,1000)
						%tune_by_cents__uivalue_id[2] := get_ui_id ($gui_cent_value_3)
					declare ui_value_edit $gui_cent_value_4(-12000000,12000000,1000)
						%tune_by_cents__uivalue_id[3] := get_ui_id ($gui_cent_value_4)
					declare ui_value_edit $gui_cent_value_5(-12000000,12000000,1000)
						%tune_by_cents__uivalue_id[4] := get_ui_id ($gui_cent_value_5)
					declare ui_value_edit $gui_cent_value_6(-12000000,12000000,1000)
						%tune_by_cents__uivalue_id[5] := get_ui_id ($gui_cent_value_6)
					declare ui_value_edit $gui_cent_value_7(-12000000,12000000,1000)
						%tune_by_cents__uivalue_id[6] := get_ui_id ($gui_cent_value_7)

					read_persistent_var(%panel_tune_by_cents__milicent_array)
					$counter1 := 0
					while ($counter1 < $panel__tune_by_cents__num_of_ui_values)
						set_control_par(%tune_by_cents__uivalue_id[$counter1],$CONTROL_PAR_VALUE, %panel_tune_by_cents__milicent_array[$panel__tune_by_cents__navigation_counter*$panel__tune_by_cents__num_of_ui_values + $counter1])
						set_control_par_str (%tune_by_cents__uivalue_id[$counter1],$CONTROL_PAR_TEXT,"")
						set_control_par(%tune_by_cents__uivalue_id[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_tune_by_cents__uivalues))
						set_control_par(%tune_by_cents__uivalue_id[$counter1],$CONTROL_PAR_WIDTH, $panel__tune_by_cents__ui_value_width)
						set_control_par(%tune_by_cents__uivalue_id[$counter1],$CONTROL_PAR_POS_X, $panel__tune_by_cents__values_left_margin + $panel__tune_by_cents__column_width*($counter1 mod $panel__tune_by_cents__num_of_ui_values))
						set_control_par(%tune_by_cents__uivalue_id[$counter1],$CONTROL_PAR_POS_Y,2)
						set_control_par(%tune_by_cents__uivalue_id[$counter1], $CONTROL_PAR_DEFAULT_VALUE, 0)
						inc($counter1)
					end while

					$counter1 := 0
					while ($counter1 < ($knob__number_of_pitch_classes__tune_by_cents-($panel__tune_by_cents__num_of_ui_values * $panel__tune_by_cents__navigation_counter)) and $counter1 < $panel__tune_by_cents__num_of_ui_values)
						set_control_par(%tune_by_cents__uivalue_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						inc($counter1)
					end while
					while ($counter1 < $panel__tune_by_cents__num_of_ui_values)
						set_control_par(%tune_by_cents__uivalue_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
						inc($counter1)
					end while
		if (1=1)
		{just intonation module - tune by ji ratios precise - menu 800}
			declare %default_ji_tuning[12*2] := ...
					(	1, 1,   ...
						16, 15,	...
						9, 8,	...
						6, 5,	...
						5, 4,	...
						4, 3,	...
						43, 32, ...
						3, 2,	...
						8, 5,	...
						5, 3,	...
						16, 9,	...
						15, 8   )

		declare ui_panel $panel__tune_by_ji_ratios_precise
			set_control_par(get_ui_id($panel__tune_by_ji_ratios_precise),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__scalesmithing_tab))
			set_control_par(get_ui_id ($panel__tune_by_ji_ratios_precise),$CONTROL_PAR_POS_X,12)
			set_control_par(get_ui_id ($panel__tune_by_ji_ratios_precise),$CONTROL_PAR_POS_Y,30)
			declare const $panel__tune_by_ji_ratios_precise__num_of_uivalues := 12
			declare $panel__tune_by_ji_ratios_precise__width
				$panel__tune_by_ji_ratios_precise__width := 550
			declare $panel__tune_by_ji_ratios_precise__nav_btn_width
				$panel__tune_by_ji_ratios_precise__nav_btn_width := 20
			declare $panel__tune_by_ji_ratios_precise__ratios_table_column_width := 40
			declare $panel__tune_by_ji_ratios_precise__ratios_value_width := 40
			declare $panel__tune_by_ji_ratios_precise__numerator_denominator_spacing := 20
			declare $panel__tune_by_ji_ratios_precise_visibility
				$panel__tune_by_ji_ratios_precise_visibility := 0
				make_persistent($panel__tune_by_ji_ratios_precise_visibility)
				read_persistent_var($panel__tune_by_ji_ratios_precise_visibility)

		declare ui_panel $panel__tune_by_ji_ratios_precise__num_of_cats
				set_control_par(get_ui_id($panel__tune_by_ji_ratios_precise__num_of_cats),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_ji_ratios_precise))	
				set_control_par(get_ui_id ($panel__tune_by_ji_ratios_precise__num_of_cats),$CONTROL_PAR_POS_X,91)
				set_control_par(get_ui_id ($panel__tune_by_ji_ratios_precise__num_of_cats),$CONTROL_PAR_POS_Y,0)

			declare ui_label $label__tune_by_ji_ratios_precise__num_of_cats (1,1)
				set_text ($label__tune_by_ji_ratios_precise__num_of_cats,"n u m   o f  c a t s")
				set_control_par(get_ui_id($label__tune_by_ji_ratios_precise__num_of_cats),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_ji_ratios_precise__num_of_cats))
				set_control_par(get_ui_id($label__tune_by_ji_ratios_precise__num_of_cats),$CONTROL_PAR_WIDTH,88)
				set_control_par(get_ui_id ($label__tune_by_ji_ratios_precise__num_of_cats),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__tune_by_ji_ratios_precise__num_of_cats),$CONTROL_PAR_POS_Y,0)
			declare ui_knob $knob__number_of_pitch_classes__tune_by_ji_ratios_precise(1,24,1)
				set_control_par_str(get_ui_id($knob__number_of_pitch_classes__tune_by_ji_ratios_precise),$CONTROL_PAR_AUTOMATION_NAME,"number_of_pitch_classes")
				$knob__number_of_pitch_classes__tune_by_ji_ratios_precise := 5
				make_persistent($knob__number_of_pitch_classes__tune_by_ji_ratios_precise)
				read_persistent_var($knob__number_of_pitch_classes__tune_by_ji_ratios_precise)
				set_text ($knob__number_of_pitch_classes__tune_by_ji_ratios_precise," steps")
				set_control_par(get_ui_id($knob__number_of_pitch_classes__tune_by_ji_ratios_precise),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_ji_ratios_precise__num_of_cats))
				set_control_par(get_ui_id ($knob__number_of_pitch_classes__tune_by_ji_ratios_precise),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($knob__number_of_pitch_classes__tune_by_ji_ratios_precise),$CONTROL_PAR_POS_Y,22)


		declare ui_panel $panel__tune_by_ji_ratios_precise_table
			set_control_par(get_ui_id($panel__tune_by_ji_ratios_precise_table),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_ji_ratios_precise))
			set_control_par(get_ui_id ($panel__tune_by_ji_ratios_precise_table),$CONTROL_PAR_POS_X,11)
			set_control_par(get_ui_id ($panel__tune_by_ji_ratios_precise_table),$CONTROL_PAR_POS_Y,71)


		declare ui_label $label_ji_ratios_table (1,1)
			set_text ($label_ji_ratios_table," set tuning by ratios (numerators and denominators):")
			set_control_par(get_ui_id($label_ji_ratios_table),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_ji_ratios_precise_table))
			set_control_par(get_ui_id($label_ji_ratios_table),$CONTROL_PAR_WIDTH,$panel__tune_by_ji_ratios_precise__width)
			set_control_par(get_ui_id ($label_ji_ratios_table),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id ($label_ji_ratios_table),$CONTROL_PAR_POS_Y,0)

		declare $panel__tune_by_ji_ratios_precise__navigation_counter
			$panel__tune_by_ji_ratios_precise__navigation_counter := 0 {which twelve scale steps are currently displayed in the table of ratios}
			make_persistent($panel__tune_by_ji_ratios_precise__navigation_counter)
			read_persistent_var($panel__tune_by_ji_ratios_precise__navigation_counter)

		declare ui_button $panel__tune_by_ji_ratios_precise__navigate_left
			$panel__tune_by_ji_ratios_precise__navigate_left := 0
			set_text ($panel__tune_by_ji_ratios_precise__navigate_left,"<")
			set_control_par(get_ui_id($panel__tune_by_ji_ratios_precise__navigate_left),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_ji_ratios_precise_table))
			set_control_par(get_ui_id($panel__tune_by_ji_ratios_precise__navigate_left),$CONTROL_PAR_WIDTH,$panel__tune_by_ji_ratios_precise__nav_btn_width)
			set_control_par(get_ui_id ($panel__tune_by_ji_ratios_precise__navigate_left),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id ($panel__tune_by_ji_ratios_precise__navigate_left),$CONTROL_PAR_POS_Y,28)
			if ($panel__tune_by_ji_ratios_precise__navigation_counter = 0)
				set_control_par(get_ui_id($panel__tune_by_ji_ratios_precise__navigate_left),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			else
				set_control_par(get_ui_id($panel__tune_by_ji_ratios_precise__navigate_left),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			end if

		declare ui_button $panel__tune_by_ji_ratios_precise__navigate_right
			$panel__tune_by_ji_ratios_precise__navigate_right := 0
			set_text ($panel__tune_by_ji_ratios_precise__navigate_right,">")
			set_control_par(get_ui_id($panel__tune_by_ji_ratios_precise__navigate_right),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_ji_ratios_precise_table))
			set_control_par(get_ui_id($panel__tune_by_ji_ratios_precise__navigate_right),$CONTROL_PAR_WIDTH,$panel__tune_by_ji_ratios_precise__nav_btn_width)
			set_control_par(get_ui_id ($panel__tune_by_ji_ratios_precise__navigate_right),$CONTROL_PAR_POS_X,$panel__tune_by_ji_ratios_precise__width-$panel__tune_by_ji_ratios_precise__nav_btn_width)
			set_control_par(get_ui_id ($panel__tune_by_ji_ratios_precise__navigate_right),$CONTROL_PAR_POS_Y,27)
			if ($number_of_pitch_classes+($panel__tune_by_ji_ratios_precise__navigation_counter*$panel__tune_by_ji_ratios_precise__num_of_uivalues) <= $panel__tune_by_ji_ratios_precise__num_of_uivalues)
				set_control_par(get_ui_id($panel__tune_by_ji_ratios_precise__navigate_right),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			else
				set_control_par(get_ui_id($panel__tune_by_ji_ratios_precise__navigate_right),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			end if

		declare ui_panel $panel_ji_ratios
			set_control_par(get_ui_id($panel_ji_ratios),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_ji_ratios_precise_table))
			set_control_par(get_ui_id ($panel_ji_ratios),$CONTROL_PAR_POS_X,40)
			set_control_par(get_ui_id ($panel_ji_ratios),$CONTROL_PAR_POS_Y,18)

		declare %ji_ratio_numerators[256] := (8)
			$counter1 := 0
				while ($counter1 < num_elements(%default_ji_tuning) / 2)
					%ji_ratio_numerators[$counter1] := %default_ji_tuning[2*$counter1]
					inc($counter1)
				end while			
				while ($counter1 < num_elements(%ji_ratio_numerators))
					%ji_ratio_numerators[$counter1] := $counter1
					inc($counter1)
				end while
			make_persistent(%ji_ratio_numerators)
			read_persistent_var(%ji_ratio_numerators)

		declare %ji_ratio_denominators[256] := (8)
			$counter1 := 0
				while ($counter1 < num_elements(%default_ji_tuning) / 2)
					%ji_ratio_denominators[$counter1] := %default_ji_tuning[2*$counter1+1]
					inc($counter1)
				end while			
				while ($counter1 < num_elements(%ji_ratio_numerators))
					%ji_ratio_denominators[$counter1] := $counter1
					inc($counter1)
				end while
			make_persistent(%ji_ratio_denominators)
			read_persistent_var(%ji_ratio_denominators)

		declare %tune_by_ji_ratios__ui_numerator_id[$panel__tune_by_ji_ratios_precise__num_of_uivalues+0]
		declare %tune_by_ji_ratios__ui_denominator_id[$panel__tune_by_ji_ratios_precise__num_of_uivalues+0]

				{note: $gui_ji_ratioN_numerator... are only display object for the GUI, not the tuning data itself (?tuning_table)}

				$counter1 := 0
				declare ui_value_edit $gui_ji_ratio1_numerator(1,65536,1)
					%tune_by_ji_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_ji_ratio1_numerator)
				declare ui_value_edit $gui_ji_ratio1_denominator(1,65536,1)
					%tune_by_ji_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_ji_ratio1_denominator)
				inc($counter1)
				declare ui_value_edit $gui_ji_ratio2_numerator(1,65536,1)
					%tune_by_ji_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_ji_ratio2_numerator)
				declare ui_value_edit $gui_ji_ratio2_denominator(1,65536,1)
					%tune_by_ji_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_ji_ratio2_denominator)
				inc($counter1)
				declare ui_value_edit $gui_ji_ratio3_numerator(1,65536,1)
					%tune_by_ji_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_ji_ratio3_numerator)
				declare ui_value_edit $gui_ji_ratio3_denominator(1,65536,1)
					%tune_by_ji_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_ji_ratio3_denominator)
				inc($counter1)
				declare ui_value_edit $gui_ji_ratio4_numerator(1,65536,1)
					%tune_by_ji_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_ji_ratio4_numerator)
				declare ui_value_edit $gui_ji_ratio4_denominator(1,65536,1)
					%tune_by_ji_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_ji_ratio4_denominator)
				inc($counter1)
				declare ui_value_edit $gui_ji_ratio5_numerator(1,65536,1)
					%tune_by_ji_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_ji_ratio5_numerator)
				declare ui_value_edit $gui_ji_ratio5_denominator(1,65536,1)
					%tune_by_ji_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_ji_ratio5_denominator)
				inc($counter1)
				declare ui_value_edit $gui_ji_ratio6_numerator(1,65536,1)
					%tune_by_ji_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_ji_ratio6_numerator)
				declare ui_value_edit $gui_ji_ratio6_denominator(1,65536,1)
					%tune_by_ji_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_ji_ratio6_denominator)
				inc($counter1)
				declare ui_value_edit $gui_ji_ratio7_numerator(1,65536,1)
					%tune_by_ji_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_ji_ratio7_numerator)
				declare ui_value_edit $gui_ji_ratio7_denominator(1,65536,1)
					%tune_by_ji_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_ji_ratio7_denominator)
				inc($counter1)
				declare ui_value_edit $gui_ji_ratio8_numerator(1,65536,1)
					%tune_by_ji_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_ji_ratio8_numerator)
				declare ui_value_edit $gui_ji_ratio8_denominator(1,65536,1)
					%tune_by_ji_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_ji_ratio8_denominator)
				inc($counter1)
				declare ui_value_edit $gui_ji_ratio9_numerator(1,65536,1)
					%tune_by_ji_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_ji_ratio9_numerator)
				declare ui_value_edit $gui_ji_ratio9_denominator(1,65536,1)
					%tune_by_ji_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_ji_ratio9_denominator)
				inc($counter1)
				declare ui_value_edit $gui_ji_ratio10_numerator(1,65536,1)
					%tune_by_ji_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_ji_ratio10_numerator)
				declare ui_value_edit $gui_ji_ratio10_denominator(1,65536,1)
					%tune_by_ji_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_ji_ratio10_denominator)
				inc($counter1)
				declare ui_value_edit $gui_ji_ratio11_numerator(1,65536,1)
					%tune_by_ji_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_ji_ratio11_numerator)
				declare ui_value_edit $gui_ji_ratio11_denominator(1,65536,1)
					%tune_by_ji_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_ji_ratio11_denominator)
				inc($counter1)
				declare ui_value_edit $gui_ji_ratio12_numerator(1,65536,1)
					%tune_by_ji_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_ji_ratio12_numerator)
				declare ui_value_edit $gui_ji_ratio12_denominator(1,65536,1)
					%tune_by_ji_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_ji_ratio12_denominator)

				$counter1 := 0
				while ($counter1 < $panel__tune_by_ji_ratios_precise__num_of_uivalues)
					set_control_par(%tune_by_ji_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_VALUE, %ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__navigation_counter*$panel__tune_by_ji_ratios_precise__num_of_uivalues + $counter1])
					set_control_par_str (%tune_by_ji_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_TEXT,"")
					set_control_par(%tune_by_ji_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_ji_ratios))
					set_control_par(%tune_by_ji_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_WIDTH,$panel__tune_by_ji_ratios_precise__ratios_value_width)
					set_control_par(%tune_by_ji_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_POS_X,$panel__tune_by_ji_ratios_precise__ratios_table_column_width*($counter1 mod $panel__tune_by_ji_ratios_precise__num_of_uivalues))
					set_control_par(%tune_by_ji_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_POS_Y,2)

					set_control_par(%tune_by_ji_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_VALUE, %ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__navigation_counter*$panel__tune_by_ji_ratios_precise__num_of_uivalues + $counter1])
					set_control_par_str (%tune_by_ji_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_TEXT,"")
					set_control_par(%tune_by_ji_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_ji_ratios))
					set_control_par(%tune_by_ji_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_WIDTH,$panel__tune_by_ji_ratios_precise__ratios_value_width)
					set_control_par(%tune_by_ji_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_POS_X,$panel__tune_by_ji_ratios_precise__ratios_table_column_width*($counter1 mod $panel__tune_by_ji_ratios_precise__num_of_uivalues))
					set_control_par(%tune_by_ji_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_POS_Y,$panel__tune_by_ji_ratios_precise__numerator_denominator_spacing)
					inc($counter1)
				end while

				$counter1 := 0
				while (($panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter) + $counter1 < $number_of_pitch_classes and $counter1 < $panel__tune_by_ji_ratios_precise__num_of_uivalues)
					set_control_par(%tune_by_ji_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par(%tune_by_ji_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					inc($counter1)
				end while
				while ($counter1 <  $panel__tune_by_ji_ratios_precise__num_of_uivalues)
					set_control_par(%tune_by_ji_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					set_control_par(%tune_by_ji_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					inc($counter1)
				end while
		end if


		if (1=1)
		{automatable just intonation module - jiknobs - 808 in menu}
			declare %default_jiknobs_tuning[6*2] := ...
					(	1, 1,	...
						6, 5,	...
						4, 3,	...
						3, 2,	...
						5, 3,	...
						8, 5 	)

			declare ?jiknobs_tuning_cents[24+1] := (0.0)
			declare ~jiknobs__helper_float := 0.0

			declare ui_panel $panel__jiknobs
				set_control_par(get_ui_id($panel__jiknobs),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__scalesmithing_tab))
				set_control_par(get_ui_id ($panel__jiknobs),$CONTROL_PAR_POS_X,12)
				set_control_par(get_ui_id ($panel__jiknobs),$CONTROL_PAR_POS_Y,30)
				declare $panel__jiknobs_width
					$panel__jiknobs_width := 548
				declare $panel__jiknobs__nav_btn_width
					$panel__jiknobs__nav_btn_width := 20
				declare $panel__jiknobs__ratios_table_column_width := 40
				declare $panel__jiknobs__ratios_value_width := 40
				declare $panel__jiknobs__numerator_denominator_spacing := 20
				declare $panel__jiknobs_visibility
					$panel__jiknobs_visibility := 1
					make_persistent($panel__jiknobs_visibility)
					read_persistent_var($panel__jiknobs_visibility)

			declare ui_panel $panel__jiknobs_num_of_cats
				set_control_par(get_ui_id($panel__jiknobs_num_of_cats),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs))	
				set_control_par(get_ui_id ($panel__jiknobs_num_of_cats),$CONTROL_PAR_POS_X,91)
				set_control_par(get_ui_id ($panel__jiknobs_num_of_cats),$CONTROL_PAR_POS_Y,0)

			declare ui_label $label__jiknobs_num_of_cats (1,1)
				set_text ($label__jiknobs_num_of_cats,"n u m   o f  c a t s")
				set_control_par(get_ui_id($label__jiknobs_num_of_cats),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs_num_of_cats))
				set_control_par(get_ui_id($label__jiknobs_num_of_cats),$CONTROL_PAR_WIDTH,88)
				set_control_par(get_ui_id ($label__jiknobs_num_of_cats),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__jiknobs_num_of_cats),$CONTROL_PAR_POS_Y,0)
			declare ui_knob $knob__number_of_pitch_classes__jiknobs(1,24,1)
				set_control_par_str(get_ui_id($knob__number_of_pitch_classes__jiknobs),$CONTROL_PAR_AUTOMATION_NAME,"number_of_pitch_classes")
				$knob__number_of_pitch_classes__jiknobs := 5
				make_persistent($knob__number_of_pitch_classes__jiknobs)
				read_persistent_var($knob__number_of_pitch_classes__jiknobs)
				set_text ($knob__number_of_pitch_classes__jiknobs," steps")
				set_control_par(get_ui_id($knob__number_of_pitch_classes__jiknobs),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs_num_of_cats))
				set_control_par(get_ui_id ($knob__number_of_pitch_classes__jiknobs),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($knob__number_of_pitch_classes__jiknobs),$CONTROL_PAR_POS_Y,22)

			declare ui_label $label_jiknobs_table (1,1)
				set_text ($label_jiknobs_table," set tuning by ratios (numerators and denominators):")
				set_control_par(get_ui_id($label_jiknobs_table),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs))
				set_control_par(get_ui_id($label_jiknobs_table),$CONTROL_PAR_WIDTH,$panel__jiknobs_width)
				set_control_par(get_ui_id ($label_jiknobs_table),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_jiknobs_table),$CONTROL_PAR_POS_Y,80)

			declare $jiknobs_panel__navigation_counter
				$jiknobs_panel__navigation_counter := 0 {which six scale steps are currently displayed in the table of ratios}
				make_persistent($jiknobs_panel__navigation_counter)
				read_persistent_var($jiknobs_panel__navigation_counter)

			declare $jiknobs_nav_btns_posx := 346
			declare $jiknobs_nav_btns_posy := 80
			declare $jiknobs_nav_btns_width := 48

			declare ui_button $panel__jiknobs_nav0
				if ($jiknobs_panel__navigation_counter = 0)
					set_text ($panel__jiknobs_nav0,"[ 1 - 6 ]")
					$panel__jiknobs_nav0 := 1
				else
					set_text ($panel__jiknobs_nav0,"[1-6]")
					$panel__jiknobs_nav0 := 0
				end if
				set_control_par(get_ui_id($panel__jiknobs_nav0),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs))
				set_control_par(get_ui_id($panel__jiknobs_nav0),$CONTROL_PAR_WIDTH, $jiknobs_nav_btns_width )
				set_control_par(get_ui_id ($panel__jiknobs_nav0),$CONTROL_PAR_POS_X, $jiknobs_nav_btns_posx + 50 * 0 )
				set_control_par(get_ui_id ($panel__jiknobs_nav0),$CONTROL_PAR_POS_Y, $jiknobs_nav_btns_posy )
				set_control_par(get_ui_id($panel__jiknobs_nav0), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_button $panel__jiknobs_nav1
				if ($jiknobs_panel__navigation_counter = 1)
					set_text ($panel__jiknobs_nav1,"[ 7 - 12 ]")
					$panel__jiknobs_nav1 := 1
				else
					set_text ($panel__jiknobs_nav1,"[7-12]")
					$panel__jiknobs_nav1 := 0
				end if
				set_control_par(get_ui_id($panel__jiknobs_nav1),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs))
				set_control_par(get_ui_id($panel__jiknobs_nav1),$CONTROL_PAR_WIDTH, $jiknobs_nav_btns_width )
				set_control_par(get_ui_id ($panel__jiknobs_nav1),$CONTROL_PAR_POS_X, $jiknobs_nav_btns_posx + 50 * 1 )
				set_control_par(get_ui_id ($panel__jiknobs_nav1),$CONTROL_PAR_POS_Y, $jiknobs_nav_btns_posy )
				set_control_par(get_ui_id($panel__jiknobs_nav1), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_button $panel__jiknobs_nav2
				if ($jiknobs_panel__navigation_counter = 2)
					set_text ($panel__jiknobs_nav2,"[ 13 - 18 ]")
					$panel__jiknobs_nav2 := 1
				else
					set_text ($panel__jiknobs_nav2,"[13-18]")
					$panel__jiknobs_nav2 := 0
				end if
				set_control_par(get_ui_id($panel__jiknobs_nav2),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs))
				set_control_par(get_ui_id($panel__jiknobs_nav2),$CONTROL_PAR_WIDTH, $jiknobs_nav_btns_width )
				set_control_par(get_ui_id ($panel__jiknobs_nav2),$CONTROL_PAR_POS_X, $jiknobs_nav_btns_posx + 50 * 2 )
				set_control_par(get_ui_id ($panel__jiknobs_nav2),$CONTROL_PAR_POS_Y, $jiknobs_nav_btns_posy )
				set_control_par(get_ui_id($panel__jiknobs_nav2), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_button $panel__jiknobs_nav3
				if ($jiknobs_panel__navigation_counter = 3)
					set_text ($panel__jiknobs_nav3,"[ 19 - 24 ]")
					$panel__jiknobs_nav3 := 1
				else
					set_text ($panel__jiknobs_nav3,"[19-24]")
					$panel__jiknobs_nav3 := 0
				end if
				set_control_par(get_ui_id($panel__jiknobs_nav3),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs))
				set_control_par(get_ui_id($panel__jiknobs_nav3),$CONTROL_PAR_WIDTH, $jiknobs_nav_btns_width )
				set_control_par(get_ui_id ($panel__jiknobs_nav3),$CONTROL_PAR_POS_X, $jiknobs_nav_btns_posx + 50 * 3 )
				set_control_par(get_ui_id ($panel__jiknobs_nav3),$CONTROL_PAR_POS_Y, $jiknobs_nav_btns_posy )
				set_control_par(get_ui_id($panel__jiknobs_nav3), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_panel $panel__jiknobs_ratio_knobs
				set_control_par(get_ui_id($panel__jiknobs_ratio_knobs),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs))
				set_control_par(get_ui_id ($panel__jiknobs_ratio_knobs),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($panel__jiknobs_ratio_knobs),$CONTROL_PAR_POS_Y,80)
			declare ui_panel $panel__jiknobs_ratios_i_to_vi
				set_control_par(get_ui_id($panel__jiknobs_ratios_i_to_vi),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs_ratio_knobs))
			declare ui_panel $panel__jiknobs_ratios_vii_to_xii
				set_control_par(get_ui_id($panel__jiknobs_ratios_vii_to_xii),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs_ratio_knobs))
			declare ui_panel $panel__jiknobs_ratios_xiii_to_xviii
				set_control_par(get_ui_id($panel__jiknobs_ratios_xiii_to_xviii),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs_ratio_knobs))
			declare ui_panel $panel__jiknobs_ratios_xix_to_xxiv
				set_control_par(get_ui_id($panel__jiknobs_ratios_xix_to_xxiv),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs_ratio_knobs))

			declare %knobids__panel_jiknobs__numerators[24]
			declare %knobids__panel_jiknobs__denominators[24]
			declare %jiknobs__numerators[24]
			declare %jiknobs__denominators[24]

			declare ui_knob $knob_jiknobs__numerator1(1,128,1)
				%knobids__panel_jiknobs__numerators[0] := get_ui_id($knob_jiknobs__numerator1)
			declare ui_knob $knob_jiknobs__denominator1(1,128,1)
				%knobids__panel_jiknobs__denominators[0] := get_ui_id($knob_jiknobs__denominator1)
			declare ui_knob $knob_jiknobs__numerator2(1,128,1)
				%knobids__panel_jiknobs__numerators[1] := get_ui_id($knob_jiknobs__numerator2)
			declare ui_knob $knob_jiknobs__denominator2(1,128,1)
				%knobids__panel_jiknobs__denominators[1] := get_ui_id($knob_jiknobs__denominator2)
			declare ui_knob $knob_jiknobs__numerator3(1,128,1)
				%knobids__panel_jiknobs__numerators[2] := get_ui_id($knob_jiknobs__numerator3)
			declare ui_knob $knob_jiknobs__denominator3(1,128,1)
				%knobids__panel_jiknobs__denominators[2] := get_ui_id($knob_jiknobs__denominator3)
			declare ui_knob $knob_jiknobs__numerator4(1,128,1)
				%knobids__panel_jiknobs__numerators[3] := get_ui_id($knob_jiknobs__numerator4)
			declare ui_knob $knob_jiknobs__denominator4(1,128,1)
				%knobids__panel_jiknobs__denominators[3] := get_ui_id($knob_jiknobs__denominator4)
			declare ui_knob $knob_jiknobs__numerator5(1,128,1)
				%knobids__panel_jiknobs__numerators[4] := get_ui_id($knob_jiknobs__numerator5)
			declare ui_knob $knob_jiknobs__denominator5(1,128,1)
				%knobids__panel_jiknobs__denominators[4] := get_ui_id($knob_jiknobs__denominator5)
			declare ui_knob $knob_jiknobs__numerator6(1,128,1)
				%knobids__panel_jiknobs__numerators[5] := get_ui_id($knob_jiknobs__numerator6)
			declare ui_knob $knob_jiknobs__denominator6(1,128,1)
				%knobids__panel_jiknobs__denominators[5] := get_ui_id($knob_jiknobs__denominator6)

			declare ui_knob $knob_jiknobs__numerator7(1,128,1)
				%knobids__panel_jiknobs__numerators[6] := get_ui_id($knob_jiknobs__numerator7)
			declare ui_knob $knob_jiknobs__denominator7(1,128,1)
				%knobids__panel_jiknobs__denominators[6] := get_ui_id($knob_jiknobs__denominator7)
			declare ui_knob $knob_jiknobs__numerator8(1,128,1)
				%knobids__panel_jiknobs__numerators[7] := get_ui_id($knob_jiknobs__numerator8)
			declare ui_knob $knob_jiknobs__denominator8(1,128,1)
				%knobids__panel_jiknobs__denominators[7] := get_ui_id($knob_jiknobs__denominator8)
			declare ui_knob $knob_jiknobs__numerator9(1,128,1)
				%knobids__panel_jiknobs__numerators[8] := get_ui_id($knob_jiknobs__numerator9)
			declare ui_knob $knob_jiknobs__denominator9(1,128,1)
				%knobids__panel_jiknobs__denominators[8] := get_ui_id($knob_jiknobs__denominator9)
			declare ui_knob $knob_jiknobs__numerator10(1,128,1)
				%knobids__panel_jiknobs__numerators[9] := get_ui_id($knob_jiknobs__numerator10)
			declare ui_knob $knob_jiknobs__denominator10(1,128,1)
				%knobids__panel_jiknobs__denominators[9] := get_ui_id($knob_jiknobs__denominator10)
			declare ui_knob $knob_jiknobs__numerator11(1,128,1)
				%knobids__panel_jiknobs__numerators[10] := get_ui_id($knob_jiknobs__numerator11)
			declare ui_knob $knob_jiknobs__denominator11(1,128,1)
				%knobids__panel_jiknobs__denominators[10] := get_ui_id($knob_jiknobs__denominator11)
			declare ui_knob $knob_jiknobs__numerator12(1,128,1)
				%knobids__panel_jiknobs__numerators[11] := get_ui_id($knob_jiknobs__numerator12)
			declare ui_knob $knob_jiknobs__denominator12(1,128,1)
				%knobids__panel_jiknobs__denominators[11] := get_ui_id($knob_jiknobs__denominator12)

			declare ui_knob $knob_jiknobs__numerator13(1,128,1)
				%knobids__panel_jiknobs__numerators[12] := get_ui_id($knob_jiknobs__numerator13)
			declare ui_knob $knob_jiknobs__denominator13(1,128,1)
				%knobids__panel_jiknobs__denominators[12] := get_ui_id($knob_jiknobs__denominator13)
			declare ui_knob $knob_jiknobs__numerator14(1,128,1)
				%knobids__panel_jiknobs__numerators[13] := get_ui_id($knob_jiknobs__numerator14)
			declare ui_knob $knob_jiknobs__denominator14(1,128,1)
				%knobids__panel_jiknobs__denominators[13] := get_ui_id($knob_jiknobs__denominator14)
			declare ui_knob $knob_jiknobs__numerator15(1,128,1)
				%knobids__panel_jiknobs__numerators[14] := get_ui_id($knob_jiknobs__numerator15)
			declare ui_knob $knob_jiknobs__denominator15(1,128,1)
				%knobids__panel_jiknobs__denominators[14] := get_ui_id($knob_jiknobs__denominator15)
			declare ui_knob $knob_jiknobs__numerator16(1,128,1)
				%knobids__panel_jiknobs__numerators[15] := get_ui_id($knob_jiknobs__numerator16)
			declare ui_knob $knob_jiknobs__denominator16(1,128,1)
				%knobids__panel_jiknobs__denominators[15] := get_ui_id($knob_jiknobs__denominator16)
			declare ui_knob $knob_jiknobs__numerator17(1,128,1)
				%knobids__panel_jiknobs__numerators[16] := get_ui_id($knob_jiknobs__numerator17)
			declare ui_knob $knob_jiknobs__denominator17(1,128,1)
				%knobids__panel_jiknobs__denominators[16] := get_ui_id($knob_jiknobs__denominator17)
			declare ui_knob $knob_jiknobs__numerator18(1,128,1)
				%knobids__panel_jiknobs__numerators[17] := get_ui_id($knob_jiknobs__numerator18)
			declare ui_knob $knob_jiknobs__denominator18(1,128,1)
				%knobids__panel_jiknobs__denominators[17] := get_ui_id($knob_jiknobs__denominator18)

			declare ui_knob $knob_jiknobs__numerator19(1,128,1)
				%knobids__panel_jiknobs__numerators[18] := get_ui_id($knob_jiknobs__numerator19)
			declare ui_knob $knob_jiknobs__denominator19(1,128,1)
				%knobids__panel_jiknobs__denominators[18] := get_ui_id($knob_jiknobs__denominator19)
			declare ui_knob $knob_jiknobs__numerator20(1,128,1)
				%knobids__panel_jiknobs__numerators[19] := get_ui_id($knob_jiknobs__numerator20)
			declare ui_knob $knob_jiknobs__denominator20(1,128,1)
				%knobids__panel_jiknobs__denominators[19] := get_ui_id($knob_jiknobs__denominator20)
			declare ui_knob $knob_jiknobs__numerator21(1,128,1)
				%knobids__panel_jiknobs__numerators[20] := get_ui_id($knob_jiknobs__numerator21)
			declare ui_knob $knob_jiknobs__denominator21(1,128,1)
				%knobids__panel_jiknobs__denominators[20] := get_ui_id($knob_jiknobs__denominator21)
			declare ui_knob $knob_jiknobs__numerator22(1,128,1)
				%knobids__panel_jiknobs__numerators[21] := get_ui_id($knob_jiknobs__numerator22)
			declare ui_knob $knob_jiknobs__denominator22(1,128,1)
				%knobids__panel_jiknobs__denominators[21] := get_ui_id($knob_jiknobs__denominator22)
			declare ui_knob $knob_jiknobs__numerator23(1,128,1)
				%knobids__panel_jiknobs__numerators[22] := get_ui_id($knob_jiknobs__numerator23)
			declare ui_knob $knob_jiknobs__denominator23(1,128,1)
				%knobids__panel_jiknobs__denominators[22] := get_ui_id($knob_jiknobs__denominator23)
			declare ui_knob $knob_jiknobs__numerator24(1,128,1)
				%knobids__panel_jiknobs__numerators[23] := get_ui_id($knob_jiknobs__numerator24)
			declare ui_knob $knob_jiknobs__denominator24(1,128,1)
				%knobids__panel_jiknobs__denominators[23] := get_ui_id($knob_jiknobs__denominator24)

			$counter1 := 0
			while ($counter1 < num_elements(%default_jiknobs_tuning) / 2)
				set_control_par(%knobids__panel_jiknobs__numerators[$counter1], $CONTROL_PAR_VALUE, %default_jiknobs_tuning[2*$counter1])
				set_control_par(%knobids__panel_jiknobs__denominators[$counter1], $CONTROL_PAR_VALUE, %default_jiknobs_tuning[2*$counter1+1])
				inc ($counter1)
			end while
			while ($counter1 < num_elements(%knobids__panel_jiknobs__numerators))
					set_control_par(%knobids__panel_jiknobs__numerators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
					set_control_par(%knobids__panel_jiknobs__denominators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
				inc ($counter1)
			end while

			$counter1 := 0
			while ($counter1 < num_elements(%knobids__panel_jiknobs__numerators))
				select ($counter1)
					case 0 to 5
						set_control_par(%knobids__panel_jiknobs__numerators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs_ratios_i_to_vi))
						set_control_par(%knobids__panel_jiknobs__denominators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs_ratios_i_to_vi))
					case 6 to 11
						set_control_par(%knobids__panel_jiknobs__numerators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs_ratios_vii_to_xii))
						set_control_par(%knobids__panel_jiknobs__denominators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs_ratios_vii_to_xii))
					case 12 to 17
						set_control_par(%knobids__panel_jiknobs__numerators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs_ratios_xiii_to_xviii))
						set_control_par(%knobids__panel_jiknobs__denominators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs_ratios_xiii_to_xviii))
					case 18 to 23
						set_control_par(%knobids__panel_jiknobs__numerators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs_ratios_xix_to_xxiv))
						set_control_par(%knobids__panel_jiknobs__denominators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__jiknobs_ratios_xix_to_xxiv))
				end select
				set_control_par_str(%knobids__panel_jiknobs__numerators[$counter1],$CONTROL_PAR_AUTOMATION_NAME,"step_" & $counter1+1 & "_numerator")
				set_control_par(%knobids__panel_jiknobs__numerators[$counter1], $CONTROL_PAR_DEFAULT_VALUE, 1)
				set_control_par_str (%knobids__panel_jiknobs__numerators[$counter1],$CONTROL_PAR_TEXT,"")
				set_control_par(%knobids__panel_jiknobs__numerators[$counter1], $CONTROL_PAR_POS_X, 92 * ($counter1 mod 6))
				set_control_par(%knobids__panel_jiknobs__numerators[$counter1], $CONTROL_PAR_POS_Y, 22)

				set_control_par_str(%knobids__panel_jiknobs__denominators[$counter1],$CONTROL_PAR_AUTOMATION_NAME,"step_" & $counter1+1 & "_denominator")
				set_control_par(%knobids__panel_jiknobs__denominators[$counter1], $CONTROL_PAR_DEFAULT_VALUE, 1)
				set_control_par_str (%knobids__panel_jiknobs__denominators[$counter1],$CONTROL_PAR_TEXT,"")
				set_control_par(%knobids__panel_jiknobs__denominators[$counter1], $CONTROL_PAR_POS_X, 92 * ($counter1 mod 6))
				set_control_par(%knobids__panel_jiknobs__denominators[$counter1], $CONTROL_PAR_POS_Y, 22+44)
				inc ($counter1)
			end while

				make_persistent ($knob_jiknobs__numerator1)
				read_persistent_var ($knob_jiknobs__numerator1)
				make_persistent ($knob_jiknobs__denominator1)
				read_persistent_var ($knob_jiknobs__denominator1)
				make_persistent ($knob_jiknobs__numerator2)
				read_persistent_var ($knob_jiknobs__numerator2)
				make_persistent ($knob_jiknobs__denominator2)
				read_persistent_var ($knob_jiknobs__denominator2)
				make_persistent ($knob_jiknobs__numerator3)
				read_persistent_var ($knob_jiknobs__numerator3)
				make_persistent ($knob_jiknobs__denominator3)
				read_persistent_var ($knob_jiknobs__denominator3)
				make_persistent ($knob_jiknobs__numerator4)
				read_persistent_var ($knob_jiknobs__numerator4)
				make_persistent ($knob_jiknobs__denominator4)
				read_persistent_var ($knob_jiknobs__denominator4)
				make_persistent ($knob_jiknobs__numerator5)
				read_persistent_var ($knob_jiknobs__numerator5)
				make_persistent ($knob_jiknobs__denominator5)
				read_persistent_var ($knob_jiknobs__denominator5)
				make_persistent ($knob_jiknobs__numerator6)
				read_persistent_var ($knob_jiknobs__numerator6)
				make_persistent ($knob_jiknobs__denominator6)
				read_persistent_var ($knob_jiknobs__denominator6)
				make_persistent ($knob_jiknobs__numerator7)
				read_persistent_var ($knob_jiknobs__numerator7)
				make_persistent ($knob_jiknobs__denominator7)
				read_persistent_var ($knob_jiknobs__denominator7)
				make_persistent ($knob_jiknobs__numerator8)
				read_persistent_var ($knob_jiknobs__numerator8)
				make_persistent ($knob_jiknobs__denominator8)
				read_persistent_var ($knob_jiknobs__denominator8)
				make_persistent ($knob_jiknobs__numerator9)
				read_persistent_var ($knob_jiknobs__numerator9)
				make_persistent ($knob_jiknobs__denominator9)
				read_persistent_var ($knob_jiknobs__denominator9)
				make_persistent ($knob_jiknobs__numerator10)
				read_persistent_var ($knob_jiknobs__numerator10)
				make_persistent ($knob_jiknobs__denominator10)
				read_persistent_var ($knob_jiknobs__denominator10)
				make_persistent ($knob_jiknobs__numerator11)
				read_persistent_var ($knob_jiknobs__numerator11)
				make_persistent ($knob_jiknobs__denominator11)
				read_persistent_var ($knob_jiknobs__denominator11)
				make_persistent ($knob_jiknobs__numerator12)
				read_persistent_var ($knob_jiknobs__numerator12)
				make_persistent ($knob_jiknobs__denominator12)
				read_persistent_var ($knob_jiknobs__denominator12)
				make_persistent ($knob_jiknobs__numerator13)
				read_persistent_var ($knob_jiknobs__numerator13)
				make_persistent ($knob_jiknobs__denominator13)
				read_persistent_var ($knob_jiknobs__denominator13)
				make_persistent ($knob_jiknobs__numerator14)
				read_persistent_var ($knob_jiknobs__numerator14)
				make_persistent ($knob_jiknobs__denominator14)
				read_persistent_var ($knob_jiknobs__denominator14)
				make_persistent ($knob_jiknobs__numerator15)
				read_persistent_var ($knob_jiknobs__numerator15)
				make_persistent ($knob_jiknobs__denominator15)
				read_persistent_var ($knob_jiknobs__denominator15)
				make_persistent ($knob_jiknobs__numerator16)
				read_persistent_var ($knob_jiknobs__numerator16)
				make_persistent ($knob_jiknobs__denominator16)
				read_persistent_var ($knob_jiknobs__denominator16)
				make_persistent ($knob_jiknobs__numerator17)
				read_persistent_var ($knob_jiknobs__numerator17)
				make_persistent ($knob_jiknobs__denominator17)
				read_persistent_var ($knob_jiknobs__denominator17)
				make_persistent ($knob_jiknobs__numerator18)
				read_persistent_var ($knob_jiknobs__numerator18)
				make_persistent ($knob_jiknobs__denominator18)
				read_persistent_var ($knob_jiknobs__denominator18)
				make_persistent ($knob_jiknobs__numerator19)
				read_persistent_var ($knob_jiknobs__numerator19)
				make_persistent ($knob_jiknobs__denominator19)
				read_persistent_var ($knob_jiknobs__denominator19)
				make_persistent ($knob_jiknobs__numerator20)
				read_persistent_var ($knob_jiknobs__numerator20)
				make_persistent ($knob_jiknobs__denominator20)
				read_persistent_var ($knob_jiknobs__denominator20)
				make_persistent ($knob_jiknobs__numerator21)
				read_persistent_var ($knob_jiknobs__numerator21)
				make_persistent ($knob_jiknobs__denominator21)
				read_persistent_var ($knob_jiknobs__denominator21)
				make_persistent ($knob_jiknobs__numerator22)
				read_persistent_var ($knob_jiknobs__numerator22)				
				make_persistent ($knob_jiknobs__denominator22)
				read_persistent_var ($knob_jiknobs__denominator22)
				make_persistent ($knob_jiknobs__numerator23)
				read_persistent_var ($knob_jiknobs__numerator23)
				make_persistent ($knob_jiknobs__denominator23)
				read_persistent_var ($knob_jiknobs__denominator23)
				make_persistent ($knob_jiknobs__numerator24)
				read_persistent_var ($knob_jiknobs__numerator24)
				make_persistent ($knob_jiknobs__denominator24)
				read_persistent_var ($knob_jiknobs__denominator24)

				$counter1 := 0
				while ($counter1 < $knob__number_of_pitch_classes__jiknobs)
					set_control_par_str (%knobids__panel_jiknobs__denominators[$counter1],$CONTROL_PAR_TEXT,"   /")
					set_control_par(%knobids__panel_jiknobs__numerators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par(%knobids__panel_jiknobs__denominators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par_str (%knobids__panel_jiknobs__numerators[$counter1],$CONTROL_PAR_TEXT,"   " &  !cyfry_rzymskie[$counter1+1])
					inc($counter1)
				end while
		end if

	{exponentiation module [automatable] - expknobs - 1101 in menu}
			declare %default_expknobs_tuning[6*2] := ...
					(	0, 12,	...
						2, 12,	...
						5, 12,	...
						7, 12,	...
						10, 12,	...
						7, 12 	)

			declare ?expknobs_tuning_cents[24+1] := (0.0)

			declare ui_panel $panel__expknobs
				set_control_par(get_ui_id($panel__expknobs),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__scalesmithing_tab))
				set_control_par(get_ui_id ($panel__expknobs),$CONTROL_PAR_POS_X,12)
				set_control_par(get_ui_id ($panel__expknobs),$CONTROL_PAR_POS_Y,30)
				declare $panel__expknobs_width
					$panel__expknobs_width := 548
				declare $panel__expknobs__nav_btn_width
					$panel__expknobs__nav_btn_width := 20
				declare $panel__expknobs__ratios_table_column_width := 40
				declare $panel__expknobs__ratios_value_width := 40
				declare $panel__expknobs__numerator_denominator_spacing := 20
				declare $panel__expknobs_visibility
					$panel__expknobs_visibility := 0
					make_persistent($panel__expknobs_visibility)
					read_persistent_var($panel__expknobs_visibility)

			declare ui_panel $panel__expknobs_num_of_cats
				set_control_par(get_ui_id($panel__expknobs_num_of_cats),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs))	
				set_control_par(get_ui_id ($panel__expknobs_num_of_cats),$CONTROL_PAR_POS_X,91)
				set_control_par(get_ui_id ($panel__expknobs_num_of_cats),$CONTROL_PAR_POS_Y,0)

			declare ui_label $label__expknobs_num_of_cats (1,1)
				set_text ($label__expknobs_num_of_cats,"n u m   o f  c a t s")
				set_control_par(get_ui_id($label__expknobs_num_of_cats),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs_num_of_cats))
				set_control_par(get_ui_id($label__expknobs_num_of_cats),$CONTROL_PAR_WIDTH,88)
				set_control_par(get_ui_id ($label__expknobs_num_of_cats),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__expknobs_num_of_cats),$CONTROL_PAR_POS_Y,0)
			declare ui_knob $knob__number_of_pitch_classes__expknobs(1,24,1)
				set_control_par_str(get_ui_id($knob__number_of_pitch_classes__expknobs),$CONTROL_PAR_AUTOMATION_NAME,"number_of_pitch_classes")
				$knob__number_of_pitch_classes__expknobs := 5
				make_persistent($knob__number_of_pitch_classes__expknobs)
				read_persistent_var($knob__number_of_pitch_classes__expknobs)
				set_text ($knob__number_of_pitch_classes__expknobs," steps")
				set_control_par(get_ui_id($knob__number_of_pitch_classes__expknobs),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs_num_of_cats))
				set_control_par(get_ui_id ($knob__number_of_pitch_classes__expknobs),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($knob__number_of_pitch_classes__expknobs),$CONTROL_PAR_POS_Y,22)

			declare ui_label $label_expknobs_table (1,1)
				set_text ($label_expknobs_table," p o w e r s  o f  t h e  e q u a v e :")
				set_control_par(get_ui_id($label_expknobs_table),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs))
				set_control_par(get_ui_id($label_expknobs_table),$CONTROL_PAR_WIDTH,$panel__expknobs_width)
				set_control_par(get_ui_id ($label_expknobs_table),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_expknobs_table),$CONTROL_PAR_POS_Y,80)

			declare $expknobs_panel__navigation_counter
				$expknobs_panel__navigation_counter := 0 {which six scale steps are currently displayed in the table of ratios}
				make_persistent($expknobs_panel__navigation_counter)
				read_persistent_var($expknobs_panel__navigation_counter)

			declare $expknobs_nav_btns_posx := 346
			declare $expknobs_nav_btns_posy := 80
			declare $expknobs_nav_btns_width := 48

			declare ui_button $panel__expknobs_nav0
				if ($expknobs_panel__navigation_counter = 0)
					set_text ($panel__expknobs_nav0,"[ 1 - 6 ]")
					$panel__expknobs_nav0 := 1
				else
					set_text ($panel__expknobs_nav0,"[1-6]")
					$panel__expknobs_nav0 := 0
				end if
				set_control_par(get_ui_id($panel__expknobs_nav0),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs))
				set_control_par(get_ui_id($panel__expknobs_nav0),$CONTROL_PAR_WIDTH, $expknobs_nav_btns_width )
				set_control_par(get_ui_id ($panel__expknobs_nav0),$CONTROL_PAR_POS_X, $expknobs_nav_btns_posx + 50 * 0 )
				set_control_par(get_ui_id ($panel__expknobs_nav0),$CONTROL_PAR_POS_Y, $expknobs_nav_btns_posy )
				set_control_par(get_ui_id($panel__expknobs_nav0), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_button $panel__expknobs_nav1
				if ($expknobs_panel__navigation_counter = 1)
					set_text ($panel__expknobs_nav1,"[ 7 - 12 ]")
					$panel__expknobs_nav1 := 1
				else
					set_text ($panel__expknobs_nav1,"[7-12]")
					$panel__expknobs_nav1 := 0
				end if
				set_control_par(get_ui_id($panel__expknobs_nav1),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs))
				set_control_par(get_ui_id($panel__expknobs_nav1),$CONTROL_PAR_WIDTH, $expknobs_nav_btns_width )
				set_control_par(get_ui_id ($panel__expknobs_nav1),$CONTROL_PAR_POS_X, $expknobs_nav_btns_posx + 50 * 1 )
				set_control_par(get_ui_id ($panel__expknobs_nav1),$CONTROL_PAR_POS_Y, $expknobs_nav_btns_posy )
				set_control_par(get_ui_id($panel__expknobs_nav1), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_button $panel__expknobs_nav2
				if ($expknobs_panel__navigation_counter = 2)
					set_text ($panel__expknobs_nav2,"[ 13 - 18 ]")
					$panel__expknobs_nav2 := 1
				else
					set_text ($panel__expknobs_nav2,"[13-18]")
					$panel__expknobs_nav2 := 0
				end if
				set_control_par(get_ui_id($panel__expknobs_nav2),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs))
				set_control_par(get_ui_id($panel__expknobs_nav2),$CONTROL_PAR_WIDTH, $expknobs_nav_btns_width )
				set_control_par(get_ui_id ($panel__expknobs_nav2),$CONTROL_PAR_POS_X, $expknobs_nav_btns_posx + 50 * 2 )
				set_control_par(get_ui_id ($panel__expknobs_nav2),$CONTROL_PAR_POS_Y, $expknobs_nav_btns_posy )
				set_control_par(get_ui_id($panel__expknobs_nav2), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_button $panel__expknobs_nav3
				if ($expknobs_panel__navigation_counter = 3)
					set_text ($panel__expknobs_nav3,"[ 19 - 24 ]")
					$panel__expknobs_nav3 := 1
				else
					set_text ($panel__expknobs_nav3,"[19-24]")
					$panel__expknobs_nav3 := 0
				end if
				set_control_par(get_ui_id($panel__expknobs_nav3),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs))
				set_control_par(get_ui_id($panel__expknobs_nav3),$CONTROL_PAR_WIDTH, $expknobs_nav_btns_width )
				set_control_par(get_ui_id ($panel__expknobs_nav3),$CONTROL_PAR_POS_X, $expknobs_nav_btns_posx + 50 * 3 )
				set_control_par(get_ui_id ($panel__expknobs_nav3),$CONTROL_PAR_POS_Y, $expknobs_nav_btns_posy )
				set_control_par(get_ui_id($panel__expknobs_nav3), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_panel $panel__expknobs_ratio_knobs
				set_control_par(get_ui_id($panel__expknobs_ratio_knobs),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs))
				set_control_par(get_ui_id ($panel__expknobs_ratio_knobs),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($panel__expknobs_ratio_knobs),$CONTROL_PAR_POS_Y,80)
			declare ui_panel $panel__expknobs_ratios_i_to_vi
				set_control_par(get_ui_id($panel__expknobs_ratios_i_to_vi),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs_ratio_knobs))
			declare ui_panel $panel__expknobs_ratios_vii_to_xii
				set_control_par(get_ui_id($panel__expknobs_ratios_vii_to_xii),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs_ratio_knobs))
			declare ui_panel $panel__expknobs_ratios_xiii_to_xviii
				set_control_par(get_ui_id($panel__expknobs_ratios_xiii_to_xviii),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs_ratio_knobs))
			declare ui_panel $panel__expknobs_ratios_xix_to_xxiv
				set_control_par(get_ui_id($panel__expknobs_ratios_xix_to_xxiv),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs_ratio_knobs))

			declare %knobids__panel_expknobs__numerators[24]
			declare %knobids__panel_expknobs__denominators[24]
			declare %expknobs__numerators[24]
			declare %expknobs__denominators[24] := (12)

			declare ui_knob $knob_expknobs__numerator1(-63,64,1)
				%knobids__panel_expknobs__numerators[0] := get_ui_id($knob_expknobs__numerator1)
			declare ui_knob $knob_expknobs__denominator1(1,128,1)
				%knobids__panel_expknobs__denominators[0] := get_ui_id($knob_expknobs__denominator1)
			declare ui_knob $knob_expknobs__numerator2(-63,64,1)
				%knobids__panel_expknobs__numerators[1] := get_ui_id($knob_expknobs__numerator2)
			declare ui_knob $knob_expknobs__denominator2(1,128,1)
				%knobids__panel_expknobs__denominators[1] := get_ui_id($knob_expknobs__denominator2)
			declare ui_knob $knob_expknobs__numerator3(-63,64,1)
				%knobids__panel_expknobs__numerators[2] := get_ui_id($knob_expknobs__numerator3)
			declare ui_knob $knob_expknobs__denominator3(1,128,1)
				%knobids__panel_expknobs__denominators[2] := get_ui_id($knob_expknobs__denominator3)
			declare ui_knob $knob_expknobs__numerator4(-63,64,1)
				%knobids__panel_expknobs__numerators[3] := get_ui_id($knob_expknobs__numerator4)
			declare ui_knob $knob_expknobs__denominator4(1,128,1)
				%knobids__panel_expknobs__denominators[3] := get_ui_id($knob_expknobs__denominator4)
			declare ui_knob $knob_expknobs__numerator5(-63,64,1)
				%knobids__panel_expknobs__numerators[4] := get_ui_id($knob_expknobs__numerator5)
			declare ui_knob $knob_expknobs__denominator5(1,128,1)
				%knobids__panel_expknobs__denominators[4] := get_ui_id($knob_expknobs__denominator5)
			declare ui_knob $knob_expknobs__numerator6(-63,64,1)
				%knobids__panel_expknobs__numerators[5] := get_ui_id($knob_expknobs__numerator6)
			declare ui_knob $knob_expknobs__denominator6(1,128,1)
				%knobids__panel_expknobs__denominators[5] := get_ui_id($knob_expknobs__denominator6)

			declare ui_knob $knob_expknobs__numerator7(-63,64,1)
				%knobids__panel_expknobs__numerators[6] := get_ui_id($knob_expknobs__numerator7)
			declare ui_knob $knob_expknobs__denominator7(1,128,1)
				%knobids__panel_expknobs__denominators[6] := get_ui_id($knob_expknobs__denominator7)
			declare ui_knob $knob_expknobs__numerator8(-63,64,1)
				%knobids__panel_expknobs__numerators[7] := get_ui_id($knob_expknobs__numerator8)
			declare ui_knob $knob_expknobs__denominator8(1,128,1)
				%knobids__panel_expknobs__denominators[7] := get_ui_id($knob_expknobs__denominator8)
			declare ui_knob $knob_expknobs__numerator9(-63,64,1)
				%knobids__panel_expknobs__numerators[8] := get_ui_id($knob_expknobs__numerator9)
			declare ui_knob $knob_expknobs__denominator9(1,128,1)
				%knobids__panel_expknobs__denominators[8] := get_ui_id($knob_expknobs__denominator9)
			declare ui_knob $knob_expknobs__numerator10(-63,64,1)
				%knobids__panel_expknobs__numerators[9] := get_ui_id($knob_expknobs__numerator10)
			declare ui_knob $knob_expknobs__denominator10(1,128,1)
				%knobids__panel_expknobs__denominators[9] := get_ui_id($knob_expknobs__denominator10)
			declare ui_knob $knob_expknobs__numerator11(-63,64,1)
				%knobids__panel_expknobs__numerators[10] := get_ui_id($knob_expknobs__numerator11)
			declare ui_knob $knob_expknobs__denominator11(1,128,1)
				%knobids__panel_expknobs__denominators[10] := get_ui_id($knob_expknobs__denominator11)
			declare ui_knob $knob_expknobs__numerator12(-63,64,1)
				%knobids__panel_expknobs__numerators[11] := get_ui_id($knob_expknobs__numerator12)
			declare ui_knob $knob_expknobs__denominator12(1,128,1)
				%knobids__panel_expknobs__denominators[11] := get_ui_id($knob_expknobs__denominator12)

			declare ui_knob $knob_expknobs__numerator13(-63,64,1)
				%knobids__panel_expknobs__numerators[12] := get_ui_id($knob_expknobs__numerator13)
			declare ui_knob $knob_expknobs__denominator13(1,128,1)
				%knobids__panel_expknobs__denominators[12] := get_ui_id($knob_expknobs__denominator13)
			declare ui_knob $knob_expknobs__numerator14(-63,64,1)
				%knobids__panel_expknobs__numerators[13] := get_ui_id($knob_expknobs__numerator14)
			declare ui_knob $knob_expknobs__denominator14(1,128,1)
				%knobids__panel_expknobs__denominators[13] := get_ui_id($knob_expknobs__denominator14)
			declare ui_knob $knob_expknobs__numerator15(-63,64,1)
				%knobids__panel_expknobs__numerators[14] := get_ui_id($knob_expknobs__numerator15)
			declare ui_knob $knob_expknobs__denominator15(1,128,1)
				%knobids__panel_expknobs__denominators[14] := get_ui_id($knob_expknobs__denominator15)
			declare ui_knob $knob_expknobs__numerator16(-63,64,1)
				%knobids__panel_expknobs__numerators[15] := get_ui_id($knob_expknobs__numerator16)
			declare ui_knob $knob_expknobs__denominator16(1,128,1)
				%knobids__panel_expknobs__denominators[15] := get_ui_id($knob_expknobs__denominator16)
			declare ui_knob $knob_expknobs__numerator17(-63,64,1)
				%knobids__panel_expknobs__numerators[16] := get_ui_id($knob_expknobs__numerator17)
			declare ui_knob $knob_expknobs__denominator17(1,128,1)
				%knobids__panel_expknobs__denominators[16] := get_ui_id($knob_expknobs__denominator17)
			declare ui_knob $knob_expknobs__numerator18(-63,64,1)
				%knobids__panel_expknobs__numerators[17] := get_ui_id($knob_expknobs__numerator18)
			declare ui_knob $knob_expknobs__denominator18(1,128,1)
				%knobids__panel_expknobs__denominators[17] := get_ui_id($knob_expknobs__denominator18)

			declare ui_knob $knob_expknobs__numerator19(-63,64,1)
				%knobids__panel_expknobs__numerators[18] := get_ui_id($knob_expknobs__numerator19)
			declare ui_knob $knob_expknobs__denominator19(1,128,1)
				%knobids__panel_expknobs__denominators[18] := get_ui_id($knob_expknobs__denominator19)
			declare ui_knob $knob_expknobs__numerator20(-63,64,1)
				%knobids__panel_expknobs__numerators[19] := get_ui_id($knob_expknobs__numerator20)
			declare ui_knob $knob_expknobs__denominator20(1,128,1)
				%knobids__panel_expknobs__denominators[19] := get_ui_id($knob_expknobs__denominator20)
			declare ui_knob $knob_expknobs__numerator21(-63,64,1)
				%knobids__panel_expknobs__numerators[20] := get_ui_id($knob_expknobs__numerator21)
			declare ui_knob $knob_expknobs__denominator21(1,128,1)
				%knobids__panel_expknobs__denominators[20] := get_ui_id($knob_expknobs__denominator21)
			declare ui_knob $knob_expknobs__numerator22(-63,64,1)
				%knobids__panel_expknobs__numerators[21] := get_ui_id($knob_expknobs__numerator22)
			declare ui_knob $knob_expknobs__denominator22(1,128,1)
				%knobids__panel_expknobs__denominators[21] := get_ui_id($knob_expknobs__denominator22)
			declare ui_knob $knob_expknobs__numerator23(-63,64,1)
				%knobids__panel_expknobs__numerators[22] := get_ui_id($knob_expknobs__numerator23)
			declare ui_knob $knob_expknobs__denominator23(1,128,1)
				%knobids__panel_expknobs__denominators[22] := get_ui_id($knob_expknobs__denominator23)
			declare ui_knob $knob_expknobs__numerator24(-63,64,1)
				%knobids__panel_expknobs__numerators[23] := get_ui_id($knob_expknobs__numerator24)
			declare ui_knob $knob_expknobs__denominator24(1,128,1)
				%knobids__panel_expknobs__denominators[23] := get_ui_id($knob_expknobs__denominator24)

			$counter1 := 0
			while ($counter1 < num_elements(%default_expknobs_tuning) / 2)
				set_control_par(%knobids__panel_expknobs__numerators[$counter1], $CONTROL_PAR_VALUE, %default_expknobs_tuning[2*$counter1])
				set_control_par(%knobids__panel_expknobs__denominators[$counter1], $CONTROL_PAR_VALUE, %default_expknobs_tuning[2*$counter1+1])
				inc ($counter1)
			end while
			while ($counter1 < num_elements(%knobids__panel_expknobs__numerators))
					set_control_par(%knobids__panel_expknobs__numerators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
					set_control_par(%knobids__panel_expknobs__denominators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
				inc ($counter1)
			end while

			$counter1 := 0
			while ($counter1 < num_elements(%knobids__panel_expknobs__numerators))
				select ($counter1)
					case 0 to 5
						set_control_par(%knobids__panel_expknobs__numerators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs_ratios_i_to_vi))
						set_control_par(%knobids__panel_expknobs__denominators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs_ratios_i_to_vi))
					case 6 to 11
						set_control_par(%knobids__panel_expknobs__numerators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs_ratios_vii_to_xii))
						set_control_par(%knobids__panel_expknobs__denominators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs_ratios_vii_to_xii))
					case 12 to 17
						set_control_par(%knobids__panel_expknobs__numerators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs_ratios_xiii_to_xviii))
						set_control_par(%knobids__panel_expknobs__denominators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs_ratios_xiii_to_xviii))
					case 18 to 23
						set_control_par(%knobids__panel_expknobs__numerators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs_ratios_xix_to_xxiv))
						set_control_par(%knobids__panel_expknobs__denominators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__expknobs_ratios_xix_to_xxiv))
				end select
				set_control_par_str(%knobids__panel_expknobs__numerators[$counter1],$CONTROL_PAR_AUTOMATION_NAME,"step_" & $counter1+1 & "_numerator")
				set_control_par(%knobids__panel_expknobs__numerators[$counter1], $CONTROL_PAR_DEFAULT_VALUE, 0)
				set_control_par_str (%knobids__panel_expknobs__numerators[$counter1],$CONTROL_PAR_TEXT,"")
				set_control_par(%knobids__panel_expknobs__numerators[$counter1], $CONTROL_PAR_POS_X, 92 * ($counter1 mod 6))
				set_control_par(%knobids__panel_expknobs__numerators[$counter1], $CONTROL_PAR_POS_Y, 22)

				set_control_par_str(%knobids__panel_expknobs__denominators[$counter1],$CONTROL_PAR_AUTOMATION_NAME,"step_" & $counter1+1 & "_denominator")
				set_control_par(%knobids__panel_expknobs__denominators[$counter1], $CONTROL_PAR_DEFAULT_VALUE, 12)
				set_control_par_str (%knobids__panel_expknobs__denominators[$counter1],$CONTROL_PAR_TEXT,"")
				set_control_par(%knobids__panel_expknobs__denominators[$counter1], $CONTROL_PAR_POS_X, 92 * ($counter1 mod 6))
				set_control_par(%knobids__panel_expknobs__denominators[$counter1], $CONTROL_PAR_POS_Y, 22+44)
				inc ($counter1)
			end while

				make_persistent ($knob_expknobs__numerator1)
				read_persistent_var ($knob_expknobs__numerator1)
				make_persistent ($knob_expknobs__denominator1)
				read_persistent_var ($knob_expknobs__denominator1)
				make_persistent ($knob_expknobs__numerator2)
				read_persistent_var ($knob_expknobs__numerator2)
				make_persistent ($knob_expknobs__denominator2)
				read_persistent_var ($knob_expknobs__denominator2)
				make_persistent ($knob_expknobs__numerator3)
				read_persistent_var ($knob_expknobs__numerator3)
				make_persistent ($knob_expknobs__denominator3)
				read_persistent_var ($knob_expknobs__denominator3)
				make_persistent ($knob_expknobs__numerator4)
				read_persistent_var ($knob_expknobs__numerator4)
				make_persistent ($knob_expknobs__denominator4)
				read_persistent_var ($knob_expknobs__denominator4)
				make_persistent ($knob_expknobs__numerator5)
				read_persistent_var ($knob_expknobs__numerator5)
				make_persistent ($knob_expknobs__denominator5)
				read_persistent_var ($knob_expknobs__denominator5)
				make_persistent ($knob_expknobs__numerator6)
				read_persistent_var ($knob_expknobs__numerator6)
				make_persistent ($knob_expknobs__denominator6)
				read_persistent_var ($knob_expknobs__denominator6)
				make_persistent ($knob_expknobs__numerator7)
				read_persistent_var ($knob_expknobs__numerator7)
				make_persistent ($knob_expknobs__denominator7)
				read_persistent_var ($knob_expknobs__denominator7)
				make_persistent ($knob_expknobs__numerator8)
				read_persistent_var ($knob_expknobs__numerator8)
				make_persistent ($knob_expknobs__denominator8)
				read_persistent_var ($knob_expknobs__denominator8)
				make_persistent ($knob_expknobs__numerator9)
				read_persistent_var ($knob_expknobs__numerator9)
				make_persistent ($knob_expknobs__denominator9)
				read_persistent_var ($knob_expknobs__denominator9)
				make_persistent ($knob_expknobs__numerator10)
				read_persistent_var ($knob_expknobs__numerator10)
				make_persistent ($knob_expknobs__denominator10)
				read_persistent_var ($knob_expknobs__denominator10)
				make_persistent ($knob_expknobs__numerator11)
				read_persistent_var ($knob_expknobs__numerator11)
				make_persistent ($knob_expknobs__denominator11)
				read_persistent_var ($knob_expknobs__denominator11)
				make_persistent ($knob_expknobs__numerator12)
				read_persistent_var ($knob_expknobs__numerator12)
				make_persistent ($knob_expknobs__denominator12)
				read_persistent_var ($knob_expknobs__denominator12)
				make_persistent ($knob_expknobs__numerator13)
				read_persistent_var ($knob_expknobs__numerator13)
				make_persistent ($knob_expknobs__denominator13)
				read_persistent_var ($knob_expknobs__denominator13)
				make_persistent ($knob_expknobs__numerator14)
				read_persistent_var ($knob_expknobs__numerator14)
				make_persistent ($knob_expknobs__denominator14)
				read_persistent_var ($knob_expknobs__denominator14)
				make_persistent ($knob_expknobs__numerator15)
				read_persistent_var ($knob_expknobs__numerator15)
				make_persistent ($knob_expknobs__denominator15)
				read_persistent_var ($knob_expknobs__denominator15)
				make_persistent ($knob_expknobs__numerator16)
				read_persistent_var ($knob_expknobs__numerator16)
				make_persistent ($knob_expknobs__denominator16)
				read_persistent_var ($knob_expknobs__denominator16)
				make_persistent ($knob_expknobs__numerator17)
				read_persistent_var ($knob_expknobs__numerator17)
				make_persistent ($knob_expknobs__denominator17)
				read_persistent_var ($knob_expknobs__denominator17)
				make_persistent ($knob_expknobs__numerator18)
				read_persistent_var ($knob_expknobs__numerator18)
				make_persistent ($knob_expknobs__denominator18)
				read_persistent_var ($knob_expknobs__denominator18)
				make_persistent ($knob_expknobs__numerator19)
				read_persistent_var ($knob_expknobs__numerator19)
				make_persistent ($knob_expknobs__denominator19)
				read_persistent_var ($knob_expknobs__denominator19)
				make_persistent ($knob_expknobs__numerator20)
				read_persistent_var ($knob_expknobs__numerator20)
				make_persistent ($knob_expknobs__denominator20)
				read_persistent_var ($knob_expknobs__denominator20)
				make_persistent ($knob_expknobs__numerator21)
				read_persistent_var ($knob_expknobs__numerator21)
				make_persistent ($knob_expknobs__denominator21)
				read_persistent_var ($knob_expknobs__denominator21)
				make_persistent ($knob_expknobs__numerator22)
				read_persistent_var ($knob_expknobs__numerator22)				
				make_persistent ($knob_expknobs__denominator22)
				read_persistent_var ($knob_expknobs__denominator22)
				make_persistent ($knob_expknobs__numerator23)
				read_persistent_var ($knob_expknobs__numerator23)
				make_persistent ($knob_expknobs__denominator23)
				read_persistent_var ($knob_expknobs__denominator23)
				make_persistent ($knob_expknobs__numerator24)
				read_persistent_var ($knob_expknobs__numerator24)
				make_persistent ($knob_expknobs__denominator24)
				read_persistent_var ($knob_expknobs__denominator24)

				$counter1 := 0
				while ($counter1 < $knob__number_of_pitch_classes__expknobs)
					set_control_par_str (%knobids__panel_expknobs__denominators[$counter1],$CONTROL_PAR_TEXT,"   /")
					set_control_par(%knobids__panel_expknobs__numerators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par(%knobids__panel_expknobs__denominators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par_str (%knobids__panel_expknobs__numerators[$counter1],$CONTROL_PAR_TEXT,"   " &  !cyfry_rzymskie[$counter1+1])
					inc($counter1)
				end while

	if (1=1)
	{Euler-Fokker genera module}

		declare ui_panel $panel_eulerfokkergenera
			set_control_par(get_ui_id($panel_eulerfokkergenera),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__scalesmithing_tab))
			set_control_par(get_ui_id ($panel_eulerfokkergenera),$CONTROL_PAR_POS_X,103)
			set_control_par(get_ui_id ($panel_eulerfokkergenera),$CONTROL_PAR_POS_Y,100)

			declare ui_panel $panel__efg_reduce_duplicates
				set_control_par(get_ui_id($panel__efg_reduce_duplicates),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_eulerfokkergenera))
				set_control_par(get_ui_id($panel__efg_reduce_duplicates),$CONTROL_PAR_POS_X, 448 - 128 - 4 - 46)
				set_control_par(get_ui_id($panel__efg_reduce_duplicates),$CONTROL_PAR_POS_Y, 0)

			declare ui_label $label__efg_remove_step_duplicates (1,1)
				set_text ($label__efg_remove_step_duplicates, "remove step duplicates:")
				set_control_par(get_ui_id ($label__efg_remove_step_duplicates),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__efg_reduce_duplicates))
				set_control_par(get_ui_id($label__efg_remove_step_duplicates),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id($label__efg_remove_step_duplicates),$CONTROL_PAR_POS_Y, 0)
	   			set_control_par(get_ui_id($label__efg_remove_step_duplicates), $CONTROL_PAR_WIDTH, 128)
	    		set_control_par(get_ui_id($label__efg_remove_step_duplicates), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($label__efg_remove_step_duplicates), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par_str(get_ui_id ($label__efg_remove_step_duplicates),$CONTROL_PAR_HELP, "Removes the steps with identical (duplicate) pitches.")

			declare ui_switch $efg_remove_step_duplicates
				set_control_par_str(get_ui_id($efg_remove_step_duplicates),$CONTROL_PAR_AUTOMATION_NAME,"remove_step_duplicates")
				$efg_remove_step_duplicates := 0
				make_persistent($efg_remove_step_duplicates)
				read_persistent_var($efg_remove_step_duplicates)
				set_control_par(get_ui_id ($efg_remove_step_duplicates),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__efg_reduce_duplicates))
				set_control_par(get_ui_id($efg_remove_step_duplicates),$CONTROL_PAR_POS_X, 128 + 4)
				set_control_par(get_ui_id($efg_remove_step_duplicates),$CONTROL_PAR_POS_Y, 0)
	   			set_control_par(get_ui_id($efg_remove_step_duplicates), $CONTROL_PAR_WIDTH, 46)
	    		set_control_par(get_ui_id($efg_remove_step_duplicates), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($efg_remove_step_duplicates), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par_str(get_ui_id ($efg_remove_step_duplicates),$CONTROL_PAR_HELP, "Removes the steps with identical (duplicate) pitches.")
				select ($efg_remove_step_duplicates)
					case 1
						set_control_par_str(get_ui_id($efg_remove_step_duplicates), $CONTROL_PAR_TEXT, "[ ON ]")
					case 0
						set_control_par_str(get_ui_id($efg_remove_step_duplicates), $CONTROL_PAR_TEXT, "[ off ]")
				end select

		declare ui_panel $panel_eulerfokkergenera_generators
			set_control_par(get_ui_id($panel_eulerfokkergenera_generators),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_eulerfokkergenera))
			set_control_par(get_ui_id ($panel_eulerfokkergenera_generators),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id ($panel_eulerfokkergenera_generators),$CONTROL_PAR_POS_Y,22)
			declare $panel__euler_fokker_genera_visibility := 0
			make_persistent($panel__euler_fokker_genera_visibility)
			read_persistent_var($panel__euler_fokker_genera_visibility)

			declare ui_label $label_efg (1,1)
				set_text ($label_efg,"Euler-Fokker genus generators:")
				set_control_par(get_ui_id($label_efg),$CONTROL_PAR_WIDTH,448)
				set_control_par(get_ui_id ($label_efg),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_eulerfokkergenera_generators))
				set_control_par(get_ui_id ($label_efg),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_efg),$CONTROL_PAR_POS_Y,0)

			declare $efg_degree {number of generators of Euler-Fokker genus}
				$efg_degree := 3
				make_persistent($efg_degree)
				read_persistent_var($efg_degree)

			declare const $efg_maximum_number_of_generators := 5
			declare ?efg_generators[$efg_maximum_number_of_generators] := (0.0)
				make_persistent(?efg_generators)
				read_persistent_var(?efg_generators)
			declare ?efg_calc_array[64] := (0.0)
			declare ~efg_interval_of_equivalence_ratio := 2.0
			declare $efg_number_of_pitch_classes
			declare ~efg_liczba_w_pamieci := 0.0
			declare $efg_table_column_width := 90
			declare $efg_value_width := 60
			declare $efg_iter := 0

			$counter1:= 0

			declare ui_knob $efg_generator_1(1,128,1)
				$efg_generator_1 := 1
				set_knob_defval($efg_generator_1, 1)
				make_persistent($efg_generator_1)
				read_persistent_var($efg_generator_1)
				set_control_par(get_ui_id($efg_generator_1),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_eulerfokkergenera_generators))
				set_control_par(get_ui_id($efg_generator_1),$CONTROL_PAR_WIDTH,$efg_value_width)
				set_control_par(get_ui_id ($efg_generator_1),$CONTROL_PAR_POS_X,$efg_table_column_width*$counter1)
				set_control_par(get_ui_id ($efg_generator_1),$CONTROL_PAR_POS_Y,20)
				set_text ($efg_generator_1,"")
				inc($counter1)
				if ($efg_generator_1 = 0)
					?efg_generators[0] := 0.0
				else
					?efg_generators[0] := int_to_real($efg_generator_1)
				end if

			declare ui_knob $efg_generator_2(0,127,1)
				$efg_generator_2 := 1
				set_knob_defval($efg_generator_2, 1)
				make_persistent($efg_generator_2)
				read_persistent_var($efg_generator_2)
				set_control_par(get_ui_id($efg_generator_2),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_eulerfokkergenera_generators))
				set_control_par(get_ui_id($efg_generator_2),$CONTROL_PAR_WIDTH,$efg_value_width)
				set_control_par(get_ui_id ($efg_generator_2),$CONTROL_PAR_POS_X,$efg_table_column_width*$counter1)
				set_control_par(get_ui_id ($efg_generator_2),$CONTROL_PAR_POS_Y,20)
				set_text ($efg_generator_2,"")
				inc($counter1)
				if ($efg_generator_2 = 0)
					?efg_generators[1] := 0.0
				else
					?efg_generators[1] := int_to_real($efg_generator_2)
				end if

			declare ui_knob $efg_generator_3(0,127,1)
				$efg_generator_3 := 3
				set_knob_defval($efg_generator_3, 3)
				make_persistent($efg_generator_3)
				read_persistent_var($efg_generator_3)
				set_control_par(get_ui_id($efg_generator_3),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_eulerfokkergenera_generators))
				set_control_par(get_ui_id($efg_generator_3),$CONTROL_PAR_WIDTH,$efg_value_width)
				set_control_par(get_ui_id ($efg_generator_3),$CONTROL_PAR_POS_X,$efg_table_column_width*$counter1)
				set_control_par(get_ui_id ($efg_generator_3),$CONTROL_PAR_POS_Y,20)
				set_text ($efg_generator_3,"")
				inc($counter1)
				if ($efg_generator_3 = 0)
					?efg_generators[2] := 0.0
				else
					?efg_generators[2] := int_to_real($efg_generator_3)
				end if

			declare ui_knob $efg_generator_4(0,127,1)
				$efg_generator_4 := 0
				set_knob_defval($efg_generator_4, 0)
				make_persistent($efg_generator_4)
				read_persistent_var($efg_generator_4)
				set_control_par(get_ui_id($efg_generator_4),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_eulerfokkergenera_generators))
				set_control_par(get_ui_id($efg_generator_4),$CONTROL_PAR_WIDTH,$efg_value_width)
				set_control_par(get_ui_id ($efg_generator_4),$CONTROL_PAR_POS_X,$efg_table_column_width*$counter1)
				set_control_par(get_ui_id ($efg_generator_4),$CONTROL_PAR_POS_Y,20)
				set_text ($efg_generator_4,"")
				inc($counter1)
				if ($efg_generator_4 = 0)
					?efg_generators[3] := 0.0
				else
					?efg_generators[3] := int_to_real($efg_generator_4)
				end if

			declare ui_knob $efg_generator_5(0,127,1)
				$efg_generator_5 := 0
				set_knob_defval($efg_generator_5, 0)
				make_persistent($efg_generator_5)
				read_persistent_var($efg_generator_5)
				set_control_par(get_ui_id($efg_generator_5),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_eulerfokkergenera_generators))
				set_control_par(get_ui_id($efg_generator_5),$CONTROL_PAR_WIDTH,$efg_value_width)
				set_control_par(get_ui_id ($efg_generator_5),$CONTROL_PAR_POS_X,$efg_table_column_width*$counter1)
				set_control_par(get_ui_id ($efg_generator_5),$CONTROL_PAR_POS_Y,20)
				set_text ($efg_generator_5,"")
				inc($counter1)
				if ($efg_generator_5 = 0)
					?efg_generators[4] := 0.0
				else
					?efg_generators[4] := int_to_real($efg_generator_5)
				end if

			sort(?efg_generators,1)
		end if

	if (1=1)
	{Combination Product Sets - CPS - module, 1002 in menu}

		declare $cps_n__generator_set_size := 4
		declare $cps_k__num_of_elem_in_combination := 2
		declare $cps_combi_count := 6
			make_persistent($cps_combi_count)
			read_persistent_var($cps_combi_count)
		declare ?cps_product_table[256] := (0.0)
		declare ?cps_tuning_table_cents[256] := (0.0)
		declare ~cps_num_of_steps
		declare $cps_counter
		declare $cps_counter_2
		declare $cps_condition
		declare $cps_el_pointer
		declare $cps_iteration_limit
		declare ~cps_combination
		declare $cps_knob_spacing := 94

		declare ui_panel $panel_cps
			set_control_par(get_ui_id($panel_cps),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__scalesmithing_tab))
			set_control_par(get_ui_id ($panel_cps),$CONTROL_PAR_POS_X,103) {103}
			set_control_par(get_ui_id ($panel_cps),$CONTROL_PAR_POS_Y,30)
			declare $panel_cps_visibility := 0
			make_persistent($panel_cps_visibility)
			read_persistent_var($panel_cps_visibility)
			declare const $cps_maximum_number_of_generators := 6
			declare ?cps_generators[$cps_maximum_number_of_generators] := (0.0)

			declare ui_panel $panel_cps_setting
				set_control_par(get_ui_id ($panel_cps_setting),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_cps))
				set_control_par(get_ui_id ($panel_cps_setting),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id ($panel_cps_setting),$CONTROL_PAR_POS_Y, 0)

			declare ui_panel $panel_cps_generators
				set_control_par(get_ui_id ($panel_cps_generators),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_cps))
				set_control_par(get_ui_id ($panel_cps_generators),$CONTROL_PAR_POS_X,103)
				set_control_par(get_ui_id ($panel_cps_generators),$CONTROL_PAR_POS_Y, 66)

				declare ui_label $label_cps_setting (1,1)
					set_text ($label_cps_setting,"CPS settings:")
					set_control_par(get_ui_id($label_cps_setting),$CONTROL_PAR_WIDTH, 88 )
					set_control_par(get_ui_id ($label_cps_setting),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_cps_setting))
					set_control_par(get_ui_id ($label_cps_setting),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($label_cps_setting),$CONTROL_PAR_POS_Y,0)


					declare ui_knob $knob_cps_n__generator_set_size(1,6,1)
						$knob_cps_n__generator_set_size := $cps_n__generator_set_size
						make_persistent($knob_cps_n__generator_set_size)
						read_persistent_var($knob_cps_n__generator_set_size)
						$cps_n__generator_set_size := $knob_cps_n__generator_set_size
						set_control_par(get_ui_id($knob_cps_n__generator_set_size),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_cps_setting))
						set_control_par_str(get_ui_id($knob_cps_n__generator_set_size),$CONTROL_PAR_AUTOMATION_NAME,"CPS_set_size")
						set_control_par(get_ui_id ($knob_cps_n__generator_set_size),$CONTROL_PAR_POS_X, ($cps_knob_spacing*0))
						set_control_par(get_ui_id ($knob_cps_n__generator_set_size),$CONTROL_PAR_POS_Y,22+(44*0))
						set_text ($knob_cps_n__generator_set_size,"   n")

					declare ui_knob $knob_cps_k__num_of_elem_in_combination(1,5,1)
						$knob_cps_k__num_of_elem_in_combination := $cps_k__num_of_elem_in_combination
						make_persistent($knob_cps_k__num_of_elem_in_combination)
						read_persistent_var($knob_cps_k__num_of_elem_in_combination)
						$cps_k__num_of_elem_in_combination := $knob_cps_k__num_of_elem_in_combination
						$cps_k__num_of_elem_in_combination := $knob_cps_k__num_of_elem_in_combination
						set_control_par(get_ui_id($knob_cps_k__num_of_elem_in_combination),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_cps_setting))
						set_control_par_str(get_ui_id($knob_cps_k__num_of_elem_in_combination),$CONTROL_PAR_AUTOMATION_NAME,"CPS_k_combinations")
						set_control_par(get_ui_id ($knob_cps_k__num_of_elem_in_combination),$CONTROL_PAR_POS_X, ($cps_knob_spacing*0))
						set_control_par(get_ui_id ($knob_cps_k__num_of_elem_in_combination),$CONTROL_PAR_POS_Y,22+(44*1))
						set_text ($knob_cps_k__num_of_elem_in_combination,"   k")

					declare ui_knob $cps_identity(0,127,1) {modulo index of the product that is a common divisor in the CPS algorithm}
						set_control_par(get_ui_id($cps_identity), $CONTROL_PAR_VALUE, get_control_par(get_ui_id($cps_identity), $CONTROL_PAR_MIN_VALUE)) 
						make_persistent($cps_identity)
						read_persistent_var($cps_identity)
						set_knob_label ($cps_identity, "    " & !cyfry_rzymskie[((($cps_identity mod $cps_combi_count)+1))] )
						set_text ($cps_identity," identity")
						set_control_par(get_ui_id($cps_identity),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_cps_setting))
						set_control_par_str(get_ui_id($cps_identity),$CONTROL_PAR_AUTOMATION_NAME,"CPS_identity")
						set_control_par(get_ui_id ($cps_identity),$CONTROL_PAR_POS_X, ($cps_knob_spacing*0))
						set_control_par(get_ui_id ($cps_identity),$CONTROL_PAR_POS_Y,22+(44*2))

					declare ui_label $label_cps_generators (1,1)
						set_text ($label_cps_generators,"Combination Product Set generators:")
						set_control_par(get_ui_id($label_cps_generators),$CONTROL_PAR_WIDTH,278){448}
						set_control_par(get_ui_id ($label_cps_generators),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_cps_generators))
						set_control_par(get_ui_id ($label_cps_generators),$CONTROL_PAR_POS_X,0)
						set_control_par(get_ui_id ($label_cps_generators),$CONTROL_PAR_POS_Y,0)

					declare ui_knob $knob_cps_generator_1(1,128,1)
						set_text($knob_cps_generator_1,"")
						$knob_cps_generator_1 := 1
						make_persistent($knob_cps_generator_1)
						read_persistent_var($knob_cps_generator_1)
						set_control_par(get_ui_id($knob_cps_generator_1),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_cps_generators))
						set_control_par_str(get_ui_id($knob_cps_generator_1),$CONTROL_PAR_AUTOMATION_NAME,"CPS_generator_1")
						set_control_par(get_ui_id ($knob_cps_generator_1),$CONTROL_PAR_POS_X,$cps_knob_spacing*0)
						set_control_par(get_ui_id ($knob_cps_generator_1),$CONTROL_PAR_POS_Y,20)
						set_text ($knob_cps_generator_1," gen. I")
						?cps_generators[0] := int_to_real($knob_cps_generator_1)

					declare ui_knob $knob_cps_generator_2(1,128,1)
						set_text($knob_cps_generator_2,"")
						$knob_cps_generator_2 := 1
						make_persistent($knob_cps_generator_2)
						read_persistent_var($knob_cps_generator_2)
						set_control_par(get_ui_id($knob_cps_generator_2),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_cps_generators))
						set_control_par_str(get_ui_id($knob_cps_generator_2),$CONTROL_PAR_AUTOMATION_NAME,"CPS_generator_2")
						set_control_par(get_ui_id ($knob_cps_generator_2),$CONTROL_PAR_POS_X,$cps_knob_spacing*1)
						set_control_par(get_ui_id ($knob_cps_generator_2),$CONTROL_PAR_POS_Y,20)
						set_text ($knob_cps_generator_2," gen. II")
						?cps_generators[1] := int_to_real($knob_cps_generator_2)
		
					declare ui_knob $knob_cps_generator_3(1,128,1)
						set_text($knob_cps_generator_3,"")
						$knob_cps_generator_3 := 1
						make_persistent($knob_cps_generator_3)
						read_persistent_var($knob_cps_generator_3)
						set_control_par(get_ui_id($knob_cps_generator_3),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_cps_generators))
						set_control_par_str(get_ui_id($knob_cps_generator_3),$CONTROL_PAR_AUTOMATION_NAME,"CPS_generator_3")
						set_control_par(get_ui_id ($knob_cps_generator_3),$CONTROL_PAR_POS_X,$cps_knob_spacing*2)
						set_control_par(get_ui_id ($knob_cps_generator_3),$CONTROL_PAR_POS_Y,20)
						set_text ($knob_cps_generator_3," gen. III")
						?cps_generators[2] := int_to_real($knob_cps_generator_3)
						
					declare ui_knob $knob_cps_generator_4(1,128,1)
						set_text($knob_cps_generator_4,"")
						$knob_cps_generator_4 := 1
						make_persistent($knob_cps_generator_4)
						read_persistent_var($knob_cps_generator_4)
						set_control_par(get_ui_id($knob_cps_generator_4),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_cps_generators))
						set_control_par_str(get_ui_id($knob_cps_generator_4),$CONTROL_PAR_AUTOMATION_NAME,"CPS_generator_4")
						set_control_par(get_ui_id ($knob_cps_generator_4),$CONTROL_PAR_POS_X,$cps_knob_spacing*0)
						set_control_par(get_ui_id ($knob_cps_generator_4),$CONTROL_PAR_POS_Y,60)
						set_text ($knob_cps_generator_4," gen. IV")
						?cps_generators[3] := int_to_real($knob_cps_generator_4)
						
					declare ui_knob $knob_cps_generator_5(1,128,1)
						set_text($knob_cps_generator_5,"")
						$knob_cps_generator_5 := 1
						make_persistent($knob_cps_generator_5)
						read_persistent_var($knob_cps_generator_5)
						set_control_par(get_ui_id($knob_cps_generator_5),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_cps_generators))
						set_control_par_str(get_ui_id($knob_cps_generator_5),$CONTROL_PAR_AUTOMATION_NAME,"CPS_generator_5")
						set_control_par(get_ui_id ($knob_cps_generator_5),$CONTROL_PAR_POS_X,$cps_knob_spacing*1)
						set_control_par(get_ui_id ($knob_cps_generator_5),$CONTROL_PAR_POS_Y,60)
						set_text ($knob_cps_generator_5," gen. V")
						?cps_generators[4] := int_to_real($knob_cps_generator_5)
						
					declare ui_knob $knob_cps_generator_6(1,128,1)
						set_text($knob_cps_generator_6,"")
						$knob_cps_generator_6 := 1
						make_persistent($knob_cps_generator_6)
						read_persistent_var($knob_cps_generator_6)
						set_control_par(get_ui_id($knob_cps_generator_6),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_cps_generators))
						set_control_par_str(get_ui_id($knob_cps_generator_6),$CONTROL_PAR_AUTOMATION_NAME,"CPS_generator_6")
						set_control_par(get_ui_id ($knob_cps_generator_6),$CONTROL_PAR_POS_X,$cps_knob_spacing*2)
						set_control_par(get_ui_id ($knob_cps_generator_6),$CONTROL_PAR_POS_Y,60)
						set_text ($knob_cps_generator_6," gen. VI")
						?cps_generators[5] := int_to_real($knob_cps_generator_6)

					$counter1 := $cps_maximum_number_of_generators
					while ($counter1 > $knob_cps_n__generator_set_size)
						select($counter1)
							case 1
								set_control_par(get_ui_id($knob_cps_generator_1),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
							case 2
								set_control_par(get_ui_id($knob_cps_generator_2),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
							case 3
								set_control_par(get_ui_id($knob_cps_generator_3),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
							case 4
								set_control_par(get_ui_id($knob_cps_generator_4),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
							case 5
								set_control_par(get_ui_id($knob_cps_generator_5),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
							case 6
								set_control_par(get_ui_id($knob_cps_generator_6),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
						end select
						dec($counter1)
					end while

				select ($cps_combi_count)
					case 1
						set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  m o n a n y")
					case 2
						set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  d y a n y")
					case 3
						set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  t r i a n y")
					case 4
						set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  t e t r a n y")
					case 5
						set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  p e n t a n y")
					case 6
						set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  h e x a n y")
					case 7
						set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  s e p t a n y")
					case 8
						set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  o c t a n y")
					case 15
						set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  p e n t a - d e k a n y")
					case 20
						set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  e i k o s a n y")
					case 35
						set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  t r i a k o n t a p e n t a n y")
					case 70
						set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  h e n d o m e k o n t a n y")
				end select
	end if

	if (1=1)
	{tune by exponent ratios module - menu 1100}
				declare %default_exponent_tuning[12*2] := ...
						(	0, 12,	...
							1, 12,	...
							2, 12,	...
							3, 12,	...
							4, 12,	...
							5, 12,	...
							6, 12,  ...
							7, 12,	...
							8, 12,	...
							9, 12,	...
							10, 12,	...
							11, 12  )

				declare ui_panel $panel__tune_by_exponent_ratios
					set_control_par(get_ui_id($panel__tune_by_exponent_ratios),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__scalesmithing_tab))
					set_control_par(get_ui_id ($panel__tune_by_exponent_ratios),$CONTROL_PAR_POS_X,12)
					set_control_par(get_ui_id ($panel__tune_by_exponent_ratios),$CONTROL_PAR_POS_Y,30)
					declare const $panel__tune_by_exponent_ratios__num_of_uivalues := 12
					declare $panel__tune_by_exponent_ratios_width
						$panel__tune_by_exponent_ratios_width := 550
					declare $panel__tune_by_exponent_ratios__nav_btn_width
						$panel__tune_by_exponent_ratios__nav_btn_width := 20
					declare $panel__tune_by_exponent_ratios__ratios_table_column_width := 40
					declare $panel__tune_by_exponent_ratios__ratios_value_width := 40
					declare $panel__tune_by_exponent_ratios__numerator_denominator_spacing := 20
					declare $panel__tune_by_exponent_ratios_visibility
						$panel__tune_by_exponent_ratios_visibility := 0
						make_persistent($panel__tune_by_exponent_ratios_visibility)
						read_persistent_var($panel__tune_by_exponent_ratios_visibility)

					declare ui_panel $panel__tune_by_exp_ratios__num_of_cats
						set_control_par(get_ui_id($panel__tune_by_exp_ratios__num_of_cats),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_exponent_ratios))	
						set_control_par(get_ui_id ($panel__tune_by_exp_ratios__num_of_cats),$CONTROL_PAR_POS_X,91)
						set_control_par(get_ui_id ($panel__tune_by_exp_ratios__num_of_cats),$CONTROL_PAR_POS_Y,0)

						declare ui_label $label__tune_by_exp_ratios__num_of_cats (1,1)
							set_text ($label__tune_by_exp_ratios__num_of_cats,"n u m   o f  c a t s")
							set_control_par(get_ui_id($label__tune_by_exp_ratios__num_of_cats),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_exp_ratios__num_of_cats))
							set_control_par(get_ui_id($label__tune_by_exp_ratios__num_of_cats),$CONTROL_PAR_WIDTH,88)
							set_control_par(get_ui_id ($label__tune_by_exp_ratios__num_of_cats),$CONTROL_PAR_POS_X,0)
							set_control_par(get_ui_id ($label__tune_by_exp_ratios__num_of_cats),$CONTROL_PAR_POS_Y,0)
						declare ui_knob $knob__number_of_pitch_classes__tune_by_exp_ratios(1,128,1)
							set_control_par_str(get_ui_id($knob__number_of_pitch_classes__tune_by_exp_ratios),$CONTROL_PAR_AUTOMATION_NAME,"number_of_pitch_classes")
							$knob__number_of_pitch_classes__tune_by_exp_ratios := 5
							make_persistent($knob__number_of_pitch_classes__tune_by_exp_ratios)
							read_persistent_var($knob__number_of_pitch_classes__tune_by_exp_ratios)
							set_text ($knob__number_of_pitch_classes__tune_by_exp_ratios," steps")
							set_control_par(get_ui_id($knob__number_of_pitch_classes__tune_by_exp_ratios),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_exp_ratios__num_of_cats))
							set_control_par(get_ui_id ($knob__number_of_pitch_classes__tune_by_exp_ratios),$CONTROL_PAR_POS_X,0)
							set_control_par(get_ui_id ($knob__number_of_pitch_classes__tune_by_exp_ratios),$CONTROL_PAR_POS_Y,22)

				declare ui_panel $panel__tune_by_exponent_ratios_table
					set_control_par(get_ui_id($panel__tune_by_exponent_ratios_table),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_exponent_ratios))
					set_control_par(get_ui_id ($panel__tune_by_exponent_ratios_table),$CONTROL_PAR_POS_X, 11)
					set_control_par(get_ui_id ($panel__tune_by_exponent_ratios_table),$CONTROL_PAR_POS_Y, 71)

				declare ui_label $label_exponent_ratios_table (1,1)
					set_text ($label_exponent_ratios_table," powers of the equave (numerators and denominators):")
					set_control_par(get_ui_id($label_exponent_ratios_table),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_exponent_ratios_table))
					set_control_par(get_ui_id($label_exponent_ratios_table),$CONTROL_PAR_WIDTH,$panel__tune_by_exponent_ratios_width)
					set_control_par(get_ui_id ($label_exponent_ratios_table),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($label_exponent_ratios_table),$CONTROL_PAR_POS_Y,0)

				declare $panel__tune_by_exponent_ratios__navigation_counter
					$panel__tune_by_exponent_ratios__navigation_counter := 0 {which twelve scale steps are currently displayed in the table of ratios}
					make_persistent($panel__tune_by_exponent_ratios__navigation_counter)
					read_persistent_var($panel__tune_by_exponent_ratios__navigation_counter)

				declare ui_button $panel__tune_by_exponent_ratios__navigate_left
					$panel__tune_by_exponent_ratios__navigate_left := 0
					set_text ($panel__tune_by_exponent_ratios__navigate_left,"<")
					set_control_par(get_ui_id($panel__tune_by_exponent_ratios__navigate_left),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_exponent_ratios_table))
					set_control_par(get_ui_id($panel__tune_by_exponent_ratios__navigate_left),$CONTROL_PAR_WIDTH,$panel__tune_by_exponent_ratios__nav_btn_width)
					set_control_par(get_ui_id ($panel__tune_by_exponent_ratios__navigate_left),$CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($panel__tune_by_exponent_ratios__navigate_left),$CONTROL_PAR_POS_Y,28)
					if ($panel__tune_by_exponent_ratios__navigation_counter = 0)
						set_control_par(get_ui_id($panel__tune_by_exponent_ratios__navigate_left),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					else
						set_control_par(get_ui_id($panel__tune_by_exponent_ratios__navigate_left),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					end if

				declare ui_button $panel__tune_by_exponent_ratios__navigate_right
					$panel__tune_by_exponent_ratios__navigate_right := 0
					set_text ($panel__tune_by_exponent_ratios__navigate_right,">")
					set_control_par(get_ui_id($panel__tune_by_exponent_ratios__navigate_right),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_exponent_ratios_table))
					set_control_par(get_ui_id($panel__tune_by_exponent_ratios__navigate_right),$CONTROL_PAR_WIDTH,$panel__tune_by_exponent_ratios__nav_btn_width)
					set_control_par(get_ui_id ($panel__tune_by_exponent_ratios__navigate_right),$CONTROL_PAR_POS_X,$panel__tune_by_exponent_ratios_width-$panel__tune_by_exponent_ratios__nav_btn_width)
					set_control_par(get_ui_id ($panel__tune_by_exponent_ratios__navigate_right),$CONTROL_PAR_POS_Y,27)
					if ($knob__number_of_pitch_classes__tune_by_exp_ratios+($panel__tune_by_exponent_ratios__navigation_counter * $panel__tune_by_exponent_ratios__num_of_uivalues) <= $panel__tune_by_exponent_ratios__num_of_uivalues)
						set_control_par(get_ui_id($panel__tune_by_exponent_ratios__navigate_right),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					else
						set_control_par(get_ui_id($panel__tune_by_exponent_ratios__navigate_right),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					end if

				declare ui_panel $panel_exponent_ratios
					set_control_par(get_ui_id($panel_exponent_ratios),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__tune_by_exponent_ratios_table))
					set_control_par(get_ui_id ($panel_exponent_ratios),$CONTROL_PAR_POS_X,40)
					set_control_par(get_ui_id ($panel_exponent_ratios),$CONTROL_PAR_POS_Y,18)

				declare %exponent_ratio_numerators[256] := (8)
					$counter1 := 0
						while ($counter1 < num_elements(%default_exponent_tuning) / 2)
							%exponent_ratio_numerators[$counter1] := %default_exponent_tuning[2*$counter1]
							inc($counter1)
						end while			
						while ($counter1 < num_elements(%exponent_ratio_numerators))
							%exponent_ratio_numerators[$counter1] := $counter1
							inc($counter1)
						end while
					make_persistent(%exponent_ratio_numerators)
					read_persistent_var(%exponent_ratio_numerators)

				declare %exponent_ratio_denominators[256] := (8)
					$counter1 := 0
						while ($counter1 < num_elements(%default_exponent_tuning) / 2)
							%exponent_ratio_denominators[$counter1] := %default_exponent_tuning[2*$counter1+1]
							inc($counter1)
						end while			
						while ($counter1 < num_elements(%exponent_ratio_numerators))
							%exponent_ratio_denominators[$counter1] := $counter1
							inc($counter1)
						end while
					make_persistent(%exponent_ratio_denominators)
					read_persistent_var(%exponent_ratio_denominators)

				declare %tune_by_exponent_ratios__ui_numerator_id[$panel__tune_by_exponent_ratios__num_of_uivalues+0]
				declare %tune_by_exponent_ratios__ui_denominator_id[$panel__tune_by_exponent_ratios__num_of_uivalues+0]

						{note: $gui_exponent_ratioN_numerator... are only display object for the GUI, not the tuning data itself (?tuning_table)}

						$counter1 := 0
						declare ui_value_edit $gui_exponent_ratio1_numerator(-65536,65536,1)
							%tune_by_exponent_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_exponent_ratio1_numerator)
						declare ui_value_edit $gui_exponent_ratio1_denominator(1,65536,1)
							%tune_by_exponent_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_exponent_ratio1_denominator)
						inc($counter1)
						declare ui_value_edit $gui_exponent_ratio2_numerator(-65536,65536,1)
							%tune_by_exponent_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_exponent_ratio2_numerator)
						declare ui_value_edit $gui_exponent_ratio2_denominator(1,65536,1)
							%tune_by_exponent_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_exponent_ratio2_denominator)
						inc($counter1)
						declare ui_value_edit $gui_exponent_ratio3_numerator(-65536,65536,1)
							%tune_by_exponent_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_exponent_ratio3_numerator)
						declare ui_value_edit $gui_exponent_ratio3_denominator(1,65536,1)
							%tune_by_exponent_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_exponent_ratio3_denominator)
						inc($counter1)
						declare ui_value_edit $gui_exponent_ratio4_numerator(-65536,65536,1)
							%tune_by_exponent_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_exponent_ratio4_numerator)
						declare ui_value_edit $gui_exponent_ratio4_denominator(1,65536,1)
							%tune_by_exponent_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_exponent_ratio4_denominator)
						inc($counter1)
						declare ui_value_edit $gui_exponent_ratio5_numerator(-65536,65536,1)
							%tune_by_exponent_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_exponent_ratio5_numerator)
						declare ui_value_edit $gui_exponent_ratio5_denominator(1,65536,1)
							%tune_by_exponent_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_exponent_ratio5_denominator)
						inc($counter1)
						declare ui_value_edit $gui_exponent_ratio6_numerator(-65536,65536,1)
							%tune_by_exponent_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_exponent_ratio6_numerator)
						declare ui_value_edit $gui_exponent_ratio6_denominator(1,65536,1)
							%tune_by_exponent_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_exponent_ratio6_denominator)
						inc($counter1)
						declare ui_value_edit $gui_exponent_ratio7_numerator(-65536,65536,1)
							%tune_by_exponent_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_exponent_ratio7_numerator)
						declare ui_value_edit $gui_exponent_ratio7_denominator(1,65536,1)
							%tune_by_exponent_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_exponent_ratio7_denominator)
						inc($counter1)
						declare ui_value_edit $gui_exponent_ratio8_numerator(-65536,65536,1)
							%tune_by_exponent_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_exponent_ratio8_numerator)
						declare ui_value_edit $gui_exponent_ratio8_denominator(1,65536,1)
							%tune_by_exponent_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_exponent_ratio8_denominator)
						inc($counter1)
						declare ui_value_edit $gui_exponent_ratio9_numerator(-65536,65536,1)
							%tune_by_exponent_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_exponent_ratio9_numerator)
						declare ui_value_edit $gui_exponent_ratio9_denominator(1,65536,1)
							%tune_by_exponent_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_exponent_ratio9_denominator)
						inc($counter1)
						declare ui_value_edit $gui_exponent_ratio10_numerator(-65536,65536,1)
							%tune_by_exponent_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_exponent_ratio10_numerator)
						declare ui_value_edit $gui_exponent_ratio10_denominator(1,65536,1)
							%tune_by_exponent_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_exponent_ratio10_denominator)
						inc($counter1)
						declare ui_value_edit $gui_exponent_ratio11_numerator(-65536,65536,1)
							%tune_by_exponent_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_exponent_ratio11_numerator)
						declare ui_value_edit $gui_exponent_ratio11_denominator(1,65536,1)
							%tune_by_exponent_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_exponent_ratio11_denominator)
						inc($counter1)
						declare ui_value_edit $gui_exponent_ratio12_numerator(-65536,65536,1)
							%tune_by_exponent_ratios__ui_numerator_id[$counter1] := get_ui_id ($gui_exponent_ratio12_numerator)
						declare ui_value_edit $gui_exponent_ratio12_denominator(1,65536,1)
							%tune_by_exponent_ratios__ui_denominator_id[$counter1] := get_ui_id ($gui_exponent_ratio12_denominator)

						$counter1 := 0
						while ($counter1 < $panel__tune_by_exponent_ratios__num_of_uivalues)
							set_control_par(%tune_by_exponent_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_VALUE, %exponent_ratio_numerators[$panel__tune_by_exponent_ratios__navigation_counter * $panel__tune_by_exponent_ratios__num_of_uivalues + $counter1])
							set_control_par_str (%tune_by_exponent_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_TEXT,"")
							set_control_par(%tune_by_exponent_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_exponent_ratios))
							set_control_par(%tune_by_exponent_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_WIDTH,$panel__tune_by_exponent_ratios__ratios_value_width)
							set_control_par(%tune_by_exponent_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_POS_X,$panel__tune_by_exponent_ratios__ratios_table_column_width*($counter1 mod 12))
							set_control_par(%tune_by_exponent_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_POS_Y,2)
							set_control_par(%tune_by_exponent_ratios__ui_numerator_id[$counter1], $CONTROL_PAR_DEFAULT_VALUE, 0)

							set_control_par(%tune_by_exponent_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_VALUE, %exponent_ratio_denominators[$panel__tune_by_exponent_ratios__navigation_counter*12 + $counter1])
							set_control_par_str (%tune_by_exponent_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_TEXT,"")
							set_control_par(%tune_by_exponent_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_exponent_ratios))
							set_control_par(%tune_by_exponent_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_WIDTH,$panel__tune_by_exponent_ratios__ratios_value_width)
							set_control_par(%tune_by_exponent_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_POS_X,$panel__tune_by_exponent_ratios__ratios_table_column_width*($counter1 mod 12))
							set_control_par(%tune_by_exponent_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_POS_Y,$panel__tune_by_exponent_ratios__numerator_denominator_spacing)
							set_control_par(%tune_by_exponent_ratios__ui_denominator_id[$counter1], $CONTROL_PAR_DEFAULT_VALUE, 12)
							inc($counter1)
						end while

						$counter1 := 0
						while (($panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter) + $counter1 < $knob__number_of_pitch_classes__tune_by_exp_ratios and $counter1 < $panel__tune_by_exponent_ratios__num_of_uivalues)
							set_control_par(%tune_by_exponent_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
							set_control_par(%tune_by_exponent_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
							inc($counter1)
						end while

						while ($counter1 <  $panel__tune_by_exponent_ratios__num_of_uivalues) {added "$knob__number_of_pitch_classes__tune_by_exp_ratios mod "}
							set_control_par(%tune_by_exponent_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
							set_control_par(%tune_by_exponent_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
							inc($counter1)
						end while
		end if

		{Equal-Step tuning - ED - 1111 in paradigm menu}

				set_control_par(get_ui_id ($panel__equalsteptuning),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($panel__equalsteptuning),$CONTROL_PAR_POS_Y,30)
				declare $panel__equalsteptuning_visibility
					$panel__equalsteptuning_visibility := 0
					make_persistent($panel__equalsteptuning_visibility)
					read_persistent_var($panel__equalsteptuning_visibility)

			declare ui_panel $panel__equalsteptuning_settings
				set_control_par(get_ui_id($panel__equalsteptuning_settings),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__equalsteptuning))
				set_control_par(get_ui_id ($panel__equalsteptuning_settings),$CONTROL_PAR_POS_X,103+112)
				set_control_par(get_ui_id ($panel__equalsteptuning_settings),$CONTROL_PAR_POS_Y,68)

			declare ui_label $label_equalsteptuning_settings (1,1)
				set_text ($label_equalsteptuning_settings," e q u a l   s t e p   s i z e :")
				set_control_par(get_ui_id($label_equalsteptuning_settings),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__equalsteptuning_settings))
				set_control_par(get_ui_id($label_equalsteptuning_settings),$CONTROL_PAR_WIDTH, (88+2)*4 - 2)
				set_control_par(get_ui_id ($label_equalsteptuning_settings),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_equalsteptuning_settings),$CONTROL_PAR_POS_Y,0)

			declare ui_knob $knob__edtuning_fracofequave_numerator(1,128,1)
				set_control_par_str(get_ui_id($knob__edtuning_fracofequave_numerator),$CONTROL_PAR_AUTOMATION_NAME,"ed_tuning_frac_of_equave_numerator")
				$knob__edtuning_fracofequave_numerator := 1
				set_knob_defval ($knob__edtuning_fracofequave_numerator, 1)
				make_persistent ($knob__edtuning_fracofequave_numerator)
				read_persistent_var($knob__edtuning_fracofequave_numerator)
				set_text ($knob__edtuning_fracofequave_numerator,"   *")
				set_control_par(get_ui_id($knob__edtuning_fracofequave_numerator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__equalsteptuning_settings))
				set_control_par(get_ui_id ($knob__edtuning_fracofequave_numerator),$CONTROL_PAR_POS_X,(88+2)*0)
				set_control_par(get_ui_id ($knob__edtuning_fracofequave_numerator),$CONTROL_PAR_POS_Y,22)
			declare ui_knob $knob__edtuning_fracofequave_denominator(1,128,1)
				set_control_par_str(get_ui_id($knob__edtuning_fracofequave_denominator),$CONTROL_PAR_AUTOMATION_NAME,"ed_tuning_frac_of_equave_denominator")
				$knob__edtuning_fracofequave_denominator := 12
				set_knob_defval ($knob__edtuning_fracofequave_denominator, 1)
				make_persistent ($knob__edtuning_fracofequave_denominator)
				read_persistent_var ($knob__edtuning_fracofequave_denominator)
				set_text ($knob__edtuning_fracofequave_denominator,"    /")
				set_control_par(get_ui_id($knob__edtuning_fracofequave_denominator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__equalsteptuning_settings))
				set_control_par(get_ui_id ($knob__edtuning_fracofequave_denominator),$CONTROL_PAR_POS_X,(88+2)*1)
				set_control_par(get_ui_id ($knob__edtuning_fracofequave_denominator),$CONTROL_PAR_POS_Y,22)
			declare ui_knob $knob__edtuning_detune_step_by_cents(0,127,1)
				set_control_par_str(get_ui_id($knob__edtuning_detune_step_by_cents),$CONTROL_PAR_AUTOMATION_NAME,"ed_tuning_detune_step_by_cents")
				$knob__edtuning_detune_step_by_cents := 0
				set_knob_defval ($knob__edtuning_detune_step_by_cents, 0)
				make_persistent ($knob__edtuning_detune_step_by_cents)
				read_persistent_var($knob__edtuning_detune_step_by_cents)
				set_text ($knob__edtuning_detune_step_by_cents,"   +c")
				set_control_par(get_ui_id($knob__edtuning_detune_step_by_cents),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__equalsteptuning_settings))
				set_control_par(get_ui_id ($knob__edtuning_detune_step_by_cents),$CONTROL_PAR_POS_X,(88+2)*2)
				set_control_par(get_ui_id ($knob__edtuning_detune_step_by_cents),$CONTROL_PAR_POS_Y,22)
			declare ui_knob $knob__edtuning_detune_step_by_centpercent(0,127,1)
				set_control_par_str(get_ui_id($knob__edtuning_detune_step_by_centpercent),$CONTROL_PAR_AUTOMATION_NAME,"ed_tuning_detune_step_by_100th_of_a_cent")
				$knob__edtuning_detune_step_by_centpercent := 0
				set_knob_defval ($knob__edtuning_detune_step_by_centpercent, 0)
				make_persistent ($knob__edtuning_detune_step_by_centpercent)
				read_persistent_var ($knob__edtuning_detune_step_by_centpercent)
				set_text ($knob__edtuning_detune_step_by_centpercent,"  +%c")
				set_control_par(get_ui_id($knob__edtuning_detune_step_by_centpercent),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__equalsteptuning_settings))
				set_control_par(get_ui_id ($knob__edtuning_detune_step_by_centpercent),$CONTROL_PAR_POS_X, (88+2)*3)
				set_control_par(get_ui_id ($knob__edtuning_detune_step_by_centpercent),$CONTROL_PAR_POS_Y,22)



		{Zalewski's structures:}
		{q(n,z) - struktura prawie-rownomierna rzedu n o danym odksztalceniu z}
		declare ui_panel $gui_zalewski_qnz_module
			set_control_par(get_ui_id ($gui_zalewski_qnz_module),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__scalesmithing_tab))
			set_control_par(get_ui_id ($gui_zalewski_qnz_module),$CONTROL_PAR_POS_X,204)
			set_control_par(get_ui_id ($gui_zalewski_qnz_module),$CONTROL_PAR_POS_Y, 102)
			declare $gui_zalewski_qnz_module_width
				$gui_zalewski_qnz_module_width := 296

			declare $gui_zalewski_qnz_module_visibility
				$gui_zalewski_qnz_module_visibility := 0
				make_persistent($gui_zalewski_qnz_module_visibility)
				read_persistent_var($gui_zalewski_qnz_module_visibility)


			declare ~zalewski_qnz__interval_of_equivalence
				~zalewski_qnz__interval_of_equivalence := ~interval_of_equivalence
			declare ~qnz_small_step_cents
			declare ~qnz_large_step_cents


			declare ui_label $label_zalewski_qnz (1,1)
				set_text ($label_zalewski_qnz," struktura prawie-rownomierna rzedu n o danym odksztalceniu z")
				set_control_par(get_ui_id($label_zalewski_qnz),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_zalewski_qnz_module))
				set_control_par(get_ui_id($label_zalewski_qnz),$CONTROL_PAR_WIDTH,$gui_zalewski_qnz_module_width)
				set_control_par(get_ui_id ($label_zalewski_qnz),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_zalewski_qnz),$CONTROL_PAR_POS_Y,0)

			declare ui_label $label_zalewski_qnz_ctrls (1,1)
				set_text ($label_zalewski_qnz_ctrls," q  ( n , z ) ")
				set_control_par(get_ui_id($label_zalewski_qnz_ctrls),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_zalewski_qnz_module))
				set_control_par(get_ui_id($label_zalewski_qnz_ctrls),$CONTROL_PAR_WIDTH,$gui_zalewski_qnz_module_width)
				set_control_par(get_ui_id ($label_zalewski_qnz_ctrls),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_zalewski_qnz_ctrls),$CONTROL_PAR_POS_Y,22)


			declare ui_knob $knob__zalewski_qnz_deformation_numerator(1,128,1)
				set_control_par_str(get_ui_id($knob__zalewski_qnz_deformation_numerator),$CONTROL_PAR_AUTOMATION_NAME,"zalewski_deformation_numerator")
				$knob__zalewski_qnz_deformation_numerator := 1
				set_knob_defval ($knob__zalewski_qnz_deformation_numerator, 2)
				make_persistent ($knob__zalewski_qnz_deformation_numerator)
				read_persistent_var($knob__zalewski_qnz_deformation_numerator)
				set_text ($knob__zalewski_qnz_deformation_numerator,"    z *")
				set_control_par(get_ui_id($knob__zalewski_qnz_deformation_numerator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_zalewski_qnz_module))
				set_control_par(get_ui_id ($knob__zalewski_qnz_deformation_numerator),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($knob__zalewski_qnz_deformation_numerator),$CONTROL_PAR_POS_Y,44)

			declare ui_knob $knob__zalewski_qnz_deformation_denominator(1,128,1)
				set_control_par_str(get_ui_id($knob__zalewski_qnz_deformation_denominator),$CONTROL_PAR_AUTOMATION_NAME,"zalewski_deformation_denominator")
				$knob__zalewski_qnz_deformation_denominator := 10
				set_knob_defval ($knob__zalewski_qnz_deformation_denominator, 1)
				make_persistent ($knob__zalewski_qnz_deformation_denominator)
				read_persistent_var($knob__zalewski_qnz_deformation_denominator)
				set_text ($knob__zalewski_qnz_deformation_denominator,"    z /")
				set_control_par(get_ui_id($knob__zalewski_qnz_deformation_denominator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_zalewski_qnz_module))
				set_control_par(get_ui_id ($knob__zalewski_qnz_deformation_denominator),$CONTROL_PAR_POS_X,92)
				set_control_par(get_ui_id ($knob__zalewski_qnz_deformation_denominator),$CONTROL_PAR_POS_Y,44)

			declare ui_knob $knob__zalewski_qnz_order(1,128,1)
				set_control_par_str(get_ui_id($knob__zalewski_qnz_order),$CONTROL_PAR_AUTOMATION_NAME,"zalewski_deformation_denominator")
				$knob__zalewski_qnz_order := 2
				set_knob_defval ($knob__zalewski_qnz_order, 3)
				make_persistent ($knob__zalewski_qnz_order)
				read_persistent_var($knob__zalewski_qnz_order)
				set_text ($knob__zalewski_qnz_order,"    n")
				set_control_par(get_ui_id($knob__zalewski_qnz_order),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_zalewski_qnz_module))
				set_control_par(get_ui_id ($knob__zalewski_qnz_order),$CONTROL_PAR_POS_X,208)
				set_control_par(get_ui_id ($knob__zalewski_qnz_order),$CONTROL_PAR_POS_Y,44)



		{Scriptable Zalewski's harmonic structures:}

		declare ui_panel $gui_zalewski_module
			set_control_par(get_ui_id ($gui_zalewski_module),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__scalesmithing_tab))
			set_control_par(get_ui_id ($gui_zalewski_module),$CONTROL_PAR_POS_X,10)
			set_control_par(get_ui_id ($gui_zalewski_module),$CONTROL_PAR_POS_Y,80)

			declare $gui_zalewski_module_visibility
				$gui_zalewski_module_visibility := 0
				make_persistent($gui_zalewski_module_visibility)
				read_persistent_var($gui_zalewski_module_visibility)

			declare %zalewski_script[512]
				make_persistent(%zalewski_script)
				read_persistent_var(%zalewski_script)
			declare !zalewski_script_characters[512]
			declare $zalewski_last_pressed_button
				$zalewski_last_pressed_button := 0
			declare $zalewski_rzad {number of steps in a given structure}
			declare %zski_ram[512] := (0)
			declare ?harmonic_structure[512] := (0.0)
			declare ~zalewski__interval_of_equivalence
			declare $num_chars_typed_from_cursor_pos
				$num_chars_typed_from_cursor_pos := 0
			declare @zalewski_script_display_string
				@zalewski_script_display_string := ""
			declare ~zalewski_suma_czastkowa := 0.0
			declare ~zalewski_produkt_czastkowy := 0.0
			declare ~zalewski_liczba_w_pamieci := 0.0
			declare $zalewski_warunek := 0
			declare $zalewski_sgn := 1
			declare ~zalewski_iloraz := 0.0
			declare ~zalewski_iloczyn := 0.0
			declare ~zalewski_suma := 0.0
			declare ~zalewski_roznica := 0.0
			declare ~zalewski_zasada := 12.0
			declare $zalewski_wartosc_po_przecinku := 0

			declare const $zalewski_max_stack_length := 128
			declare ?zalewski_number_stack[$zalewski_max_stack_length] := (0.0)
				declare $zalewski_number_stack_length := 0
			declare %zalewski_operator_stack[$zalewski_max_stack_length] := (0)
				declare $zalewski_operator_stack_length := 0
			declare $zalewski_operational_index := 0
			declare $zalewski_operational_index_reading_offset := 0




			declare ui_label $zalewski_script_edit (1,1)
			set_control_par(get_ui_id($zalewski_script_edit),$CONTROL_PAR_WIDTH,564)
			set_control_par(get_ui_id($zalewski_script_edit),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_zalewski_module))
			set_control_par_str(get_ui_id($zalewski_script_edit),$CONTROL_PAR_TEXT,"  z a l e w s k i ' s   h a r m o n i c   s t r u c t u r e s")
			set_control_par(get_ui_id($zalewski_script_edit),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id($zalewski_script_edit),$CONTROL_PAR_POS_Y,20)

			declare $gui_zalewski_structure_btn_width
				$gui_zalewski_structure_btn_width := 20
			declare $gui_zalewski_structure_btn_column_spacing
				$gui_zalewski_structure_btn_column_spacing := $gui_zalewski_structure_btn_width * 2
			declare $gui_zalewski_structure_btn_row_spacing
				$gui_zalewski_structure_btn_row_spacing := 22
			declare $gui_zalewski_structure_module_width
				$gui_zalewski_structure_module_width := $gui_zalewski_structure_btn_column_spacing*7


			declare ui_label $label_zalewski_structure_module (1,1)
				set_text ($label_zalewski_structure_module,"")
				set_control_par(get_ui_id($label_zalewski_structure_module),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_zalewski_module))
				set_control_par(get_ui_id($label_zalewski_structure_module),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_module_width+1)
				set_control_par(get_ui_id ($label_zalewski_structure_module),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_zalewski_structure_module),$CONTROL_PAR_POS_Y,44)


			declare ui_panel $panel__zalewski_structure_numpad
				set_control_par(get_ui_id($panel__zalewski_structure_numpad),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_zalewski_module))
				set_control_par(get_ui_id ($panel__zalewski_structure_numpad),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($panel__zalewski_structure_numpad),$CONTROL_PAR_POS_Y,64)

			declare ui_knob $knob__zalewski__cursor_position(0,127,1)
				set_control_par_str(get_ui_id($knob__zalewski__cursor_position),$CONTROL_PAR_AUTOMATION_NAME,"zalewski_script_cursor_position")
				$knob__zalewski__cursor_position := 1
				set_knob_defval ($knob__zalewski__cursor_position, 1)
				make_persistent ($knob__zalewski__cursor_position)
				read_persistent_var($knob__zalewski__cursor_position)
				set_text ($knob__zalewski__cursor_position," cursor")
				set_control_par(get_ui_id($knob__zalewski__cursor_position),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($knob__zalewski__cursor_position),$CONTROL_PAR_POS_X,192)
				set_control_par(get_ui_id ($knob__zalewski__cursor_position),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*0 + 1)

			declare ui_switch $gui_zalewski__backspace {backspace trigger}
				set_control_par(get_ui_id($gui_zalewski__backspace),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__backspace),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*1)
				set_control_par(get_ui_id ($gui_zalewski__backspace),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*0)
				set_control_par(get_ui_id($gui_zalewski__backspace),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width*3-4)
				set_control_par_str(get_ui_id($gui_zalewski__backspace), $CONTROL_PAR_TEXT, "backspace")
				set_control_par(get_ui_id($gui_zalewski__backspace), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__clear_all {clear_all trigger}
				set_control_par(get_ui_id($gui_zalewski__clear_all),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__clear_all),$CONTROL_PAR_POS_X,5*$gui_zalewski_structure_btn_column_spacing/2)
				set_control_par(get_ui_id ($gui_zalewski__clear_all),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*0)
				set_control_par(get_ui_id($gui_zalewski__clear_all),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width*2)
				set_control_par_str(get_ui_id($gui_zalewski__clear_all), $CONTROL_PAR_TEXT, "reset")
				set_control_par(get_ui_id($gui_zalewski__clear_all), $CONTROL_PAR_TEXT_ALIGNMENT, 1)



			declare ui_switch $gui_zalewski__struktura_przeciwna {-}
				set_control_par(get_ui_id($gui_zalewski__struktura_przeciwna),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__struktura_przeciwna),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*0)
				set_control_par(get_ui_id ($gui_zalewski__struktura_przeciwna),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*0)
				set_control_par(get_ui_id($gui_zalewski__struktura_przeciwna),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__struktura_przeciwna), $CONTROL_PAR_TEXT, "-(")
				set_control_par(get_ui_id($gui_zalewski__struktura_przeciwna), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__struktura_odbita {*}
				set_control_par(get_ui_id($gui_zalewski__struktura_odbita),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__struktura_odbita),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*4)
				set_control_par(get_ui_id ($gui_zalewski__struktura_odbita),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*0)
				set_control_par(get_ui_id($gui_zalewski__struktura_odbita),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__struktura_odbita), $CONTROL_PAR_TEXT, ")*")
				set_control_par(get_ui_id($gui_zalewski__struktura_odbita), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__przecinek {,}
				set_control_par(get_ui_id($gui_zalewski__przecinek),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__przecinek),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*1)
				set_control_par(get_ui_id ($gui_zalewski__przecinek),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*4)
				set_control_par(get_ui_id($gui_zalewski__przecinek),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__przecinek), $CONTROL_PAR_TEXT, ",")
				set_control_par(get_ui_id($gui_zalewski__przecinek), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__decimal_places_separator {.}
				set_control_par(get_ui_id($gui_zalewski__decimal_places_separator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__decimal_places_separator),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*3)
				set_control_par(get_ui_id ($gui_zalewski__decimal_places_separator),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*4)
				set_control_par(get_ui_id($gui_zalewski__decimal_places_separator),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__decimal_places_separator), $CONTROL_PAR_TEXT, ".")
				set_control_par(get_ui_id($gui_zalewski__decimal_places_separator), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__plus {+}
				set_control_par(get_ui_id($gui_zalewski__plus),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__plus),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*4)
				set_control_par(get_ui_id ($gui_zalewski__plus),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*1)
				set_control_par(get_ui_id($gui_zalewski__plus),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__plus), $CONTROL_PAR_TEXT, "+")
				set_control_par(get_ui_id($gui_zalewski__plus), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__minus {-}
				set_control_par(get_ui_id($gui_zalewski__minus),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__minus),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*4)
				set_control_par(get_ui_id ($gui_zalewski__minus),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*2)
				set_control_par(get_ui_id($gui_zalewski__minus),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__minus), $CONTROL_PAR_TEXT, "-")
				set_control_par(get_ui_id($gui_zalewski__minus), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__razy {*}
				set_control_par(get_ui_id($gui_zalewski__razy),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__razy),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*4)
				set_control_par(get_ui_id ($gui_zalewski__razy),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*3)
				set_control_par(get_ui_id($gui_zalewski__razy),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__razy), $CONTROL_PAR_TEXT, "*")
				set_control_par(get_ui_id($gui_zalewski__razy), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__podzielic {/}
				set_control_par(get_ui_id($gui_zalewski__podzielic),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__podzielic),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*4)
				set_control_par(get_ui_id ($gui_zalewski__podzielic),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*4)
				set_control_par(get_ui_id($gui_zalewski__podzielic),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__podzielic), $CONTROL_PAR_TEXT, "/")
				set_control_par(get_ui_id($gui_zalewski__podzielic), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__var_a {a}
				set_control_par(get_ui_id($gui_zalewski__var_a),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__var_a),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*0)
				set_control_par(get_ui_id ($gui_zalewski__var_a),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*1)
				set_control_par(get_ui_id($gui_zalewski__var_a),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__var_a), $CONTROL_PAR_TEXT, "a")
				set_control_par(get_ui_id($gui_zalewski__var_a), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__var_b {b}
				set_control_par(get_ui_id($gui_zalewski__var_b),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__var_b),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*0)
				set_control_par(get_ui_id ($gui_zalewski__var_b),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*2)
				set_control_par(get_ui_id($gui_zalewski__var_b),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__var_b), $CONTROL_PAR_TEXT, "b")
				set_control_par(get_ui_id($gui_zalewski__var_b), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__var_c {c}
				set_control_par(get_ui_id($gui_zalewski__var_c),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__var_c),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*0)
				set_control_par(get_ui_id ($gui_zalewski__var_c),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*3)
				set_control_par(get_ui_id($gui_zalewski__var_c),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__var_c), $CONTROL_PAR_TEXT, "c")
				set_control_par(get_ui_id($gui_zalewski__var_c), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__template_ratio {$}
				set_control_par(get_ui_id($gui_zalewski__template_ratio),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__template_ratio),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*0)
				set_control_par(get_ui_id ($gui_zalewski__template_ratio),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*4)
				set_control_par(get_ui_id($gui_zalewski__template_ratio),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__template_ratio), $CONTROL_PAR_TEXT, "$")
				set_control_par(get_ui_id($gui_zalewski__template_ratio), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__spacja {" "}
				set_control_par(get_ui_id($gui_zalewski__spacja),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__spacja),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*2)
				set_control_par(get_ui_id ($gui_zalewski__spacja),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*5)
				set_control_par(get_ui_id($gui_zalewski__spacja),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__spacja), $CONTROL_PAR_TEXT, " ")
				set_control_par(get_ui_id($gui_zalewski__spacja), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__numpad_1
				set_control_par(get_ui_id($gui_zalewski__numpad_1),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__numpad_1),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*1)
				set_control_par(get_ui_id ($gui_zalewski__numpad_1),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*1)
				set_control_par(get_ui_id($gui_zalewski__numpad_1),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__numpad_1), $CONTROL_PAR_TEXT, "1")
				set_control_par(get_ui_id($gui_zalewski__numpad_1), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__numpad_2
				set_control_par(get_ui_id($gui_zalewski__numpad_2),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__numpad_2),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*2)
				set_control_par(get_ui_id ($gui_zalewski__numpad_2),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*1)
				set_control_par(get_ui_id($gui_zalewski__numpad_2),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__numpad_2), $CONTROL_PAR_TEXT, "2")
				set_control_par(get_ui_id($gui_zalewski__numpad_2), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__numpad_3
				set_control_par(get_ui_id($gui_zalewski__numpad_3),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__numpad_3),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*3)
				set_control_par(get_ui_id ($gui_zalewski__numpad_3),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*1)
				set_control_par(get_ui_id($gui_zalewski__numpad_3),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__numpad_3), $CONTROL_PAR_TEXT, "3")
				set_control_par(get_ui_id($gui_zalewski__numpad_3), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__numpad_4 
				set_control_par(get_ui_id($gui_zalewski__numpad_4),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__numpad_4),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*1)
				set_control_par(get_ui_id ($gui_zalewski__numpad_4),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*2)
				set_control_par(get_ui_id($gui_zalewski__numpad_4),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__numpad_4), $CONTROL_PAR_TEXT, "4")
				set_control_par(get_ui_id($gui_zalewski__numpad_4), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__numpad_5
				set_control_par(get_ui_id($gui_zalewski__numpad_5),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__numpad_5),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*2)
				set_control_par(get_ui_id ($gui_zalewski__numpad_5),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*2)
				set_control_par(get_ui_id($gui_zalewski__numpad_5),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__numpad_5), $CONTROL_PAR_TEXT, "5")
				set_control_par(get_ui_id($gui_zalewski__numpad_5), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__numpad_6
				set_control_par(get_ui_id($gui_zalewski__numpad_6),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__numpad_6),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*3)
				set_control_par(get_ui_id ($gui_zalewski__numpad_6),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*2)
				set_control_par(get_ui_id($gui_zalewski__numpad_6),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__numpad_6), $CONTROL_PAR_TEXT, "6")
				set_control_par(get_ui_id($gui_zalewski__numpad_6), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__numpad_7
				set_control_par(get_ui_id($gui_zalewski__numpad_7),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__numpad_7),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*1)
				set_control_par(get_ui_id ($gui_zalewski__numpad_7),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*3)
				set_control_par(get_ui_id($gui_zalewski__numpad_7),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__numpad_7), $CONTROL_PAR_TEXT, "7")
				set_control_par(get_ui_id($gui_zalewski__numpad_7), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__numpad_8
				set_control_par(get_ui_id($gui_zalewski__numpad_8),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__numpad_8),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*2)
				set_control_par(get_ui_id ($gui_zalewski__numpad_8),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*3)
				set_control_par(get_ui_id($gui_zalewski__numpad_8),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__numpad_8), $CONTROL_PAR_TEXT, "8")
				set_control_par(get_ui_id($gui_zalewski__numpad_8), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__numpad_9
				set_control_par(get_ui_id($gui_zalewski__numpad_9),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__numpad_9),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*3)
				set_control_par(get_ui_id ($gui_zalewski__numpad_9),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*3)
				set_control_par(get_ui_id($gui_zalewski__numpad_9),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__numpad_9), $CONTROL_PAR_TEXT, "9")
				set_control_par(get_ui_id($gui_zalewski__numpad_9), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare ui_switch $gui_zalewski__numpad_0 
				set_control_par(get_ui_id($gui_zalewski__numpad_0),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski_structure_numpad))
				set_control_par(get_ui_id ($gui_zalewski__numpad_0),$CONTROL_PAR_POS_X,$gui_zalewski_structure_btn_column_spacing*2)
				set_control_par(get_ui_id ($gui_zalewski__numpad_0),$CONTROL_PAR_POS_Y,$gui_zalewski_structure_btn_row_spacing*4)
				set_control_par(get_ui_id($gui_zalewski__numpad_0),$CONTROL_PAR_WIDTH,$gui_zalewski_structure_btn_width)
				set_control_par_str(get_ui_id($gui_zalewski__numpad_0), $CONTROL_PAR_TEXT, "0")
				set_control_par(get_ui_id($gui_zalewski__numpad_0), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

		declare ui_label $label_zalewski__tuning_display (1,1)
			declare @zalewskis_structure__cent_string
			set_text ($label_zalewski__tuning_display," ")
			set_control_par(get_ui_id($label_zalewski__tuning_display),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_zalewski_module))
			set_control_par(get_ui_id($label_zalewski__tuning_display),$CONTROL_PAR_WIDTH,272+0)
			set_control_par(get_ui_id ($label_zalewski__tuning_display),$CONTROL_PAR_POS_X,292)
			set_control_par(get_ui_id ($label_zalewski__tuning_display),$CONTROL_PAR_POS_Y,44)


		declare ui_panel $panel__zalewski__var_knobs
			set_control_par(get_ui_id($panel__zalewski__var_knobs),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_zalewski_module))
			set_control_par(get_ui_id ($panel__zalewski__var_knobs),$CONTROL_PAR_POS_X,292)
			set_control_par(get_ui_id ($panel__zalewski__var_knobs),$CONTROL_PAR_POS_Y,66)

		declare ui_knob $knob__zalewski__var_a(1,128,1)
			set_control_par_str(get_ui_id($knob__zalewski__var_a),$CONTROL_PAR_AUTOMATION_NAME,"zalewski_var_a")
			$knob__zalewski__var_a := 2
			set_knob_defval ($knob__zalewski__var_a, 2)
			make_persistent ($knob__zalewski__var_a)
			read_persistent_var($knob__zalewski__var_a)
			set_text ($knob__zalewski__var_a,"    a")
			set_control_par(get_ui_id($knob__zalewski__var_a),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski__var_knobs))
			set_control_par(get_ui_id ($knob__zalewski__var_a),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id ($knob__zalewski__var_a),$CONTROL_PAR_POS_Y,0)
		declare ui_knob $knob__zalewski__var_b(1,128,1)
			set_control_par_str(get_ui_id($knob__zalewski__var_b),$CONTROL_PAR_AUTOMATION_NAME,"zalewski_var_b")
			$knob__zalewski__var_b := 1
			set_knob_defval ($knob__zalewski__var_b, 1)
			make_persistent ($knob__zalewski__var_b)
			read_persistent_var ($knob__zalewski__var_b)
			set_text ($knob__zalewski__var_b,"    b")
			set_control_par(get_ui_id($knob__zalewski__var_b),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski__var_knobs))
			set_control_par(get_ui_id ($knob__zalewski__var_b),$CONTROL_PAR_POS_X,92*1)
			set_control_par(get_ui_id ($knob__zalewski__var_b),$CONTROL_PAR_POS_Y,0)
		declare ui_knob $knob__zalewski__var_c(1,128,1)
			set_control_par_str(get_ui_id($knob__zalewski__var_c),$CONTROL_PAR_AUTOMATION_NAME,"zalewski_var_c")
			$knob__zalewski__var_c := 1
			set_knob_defval ($knob__zalewski__var_c, 1)
			make_persistent ($knob__zalewski__var_c)
			read_persistent_var ($knob__zalewski__var_c)
			set_text ($knob__zalewski__var_c,"    c")
			set_control_par(get_ui_id($knob__zalewski__var_c),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski__var_knobs))
			set_control_par(get_ui_id ($knob__zalewski__var_c),$CONTROL_PAR_POS_X,92*2)
			set_control_par(get_ui_id ($knob__zalewski__var_c),$CONTROL_PAR_POS_Y,0)


		declare ui_panel $panel__zalewski__template_ratio {variable "$"}
			set_control_par(get_ui_id($panel__zalewski__template_ratio),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski__var_knobs))
			set_control_par(get_ui_id ($panel__zalewski__template_ratio),$CONTROL_PAR_POS_X,92)
			set_control_par(get_ui_id ($panel__zalewski__template_ratio),$CONTROL_PAR_POS_Y,44)

		declare ui_label $label_zalewski__template_ratio (1,1)
			set_text ($label_zalewski__template_ratio,"$  (template ratio):")
			set_control_par(get_ui_id($label_zalewski__template_ratio),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski__template_ratio))
			set_control_par(get_ui_id($label_zalewski__template_ratio),$CONTROL_PAR_WIDTH,180)
			set_control_par(get_ui_id ($label_zalewski__template_ratio),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id ($label_zalewski__template_ratio),$CONTROL_PAR_POS_Y,0)

		declare ui_knob $knob__zalewski__template_ratio_numerator(1,128,1)
			set_control_par_str(get_ui_id($knob__zalewski__template_ratio_numerator),$CONTROL_PAR_AUTOMATION_NAME,"x_zmienna_numerator")
			$knob__zalewski__template_ratio_numerator := 2
			set_knob_defval ($knob__zalewski__template_ratio_numerator, 2)
			make_persistent ($knob__zalewski__template_ratio_numerator)
			read_persistent_var($knob__zalewski__template_ratio_numerator)
			set_text ($knob__zalewski__template_ratio_numerator,"    *")
			set_control_par(get_ui_id($knob__zalewski__template_ratio_numerator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski__template_ratio))
			set_control_par(get_ui_id ($knob__zalewski__template_ratio_numerator),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id ($knob__zalewski__template_ratio_numerator),$CONTROL_PAR_POS_Y,22)
		declare ui_knob $knob__zalewski__template_ratio_denominator(1,128,1)
			set_control_par_str(get_ui_id($knob__zalewski__template_ratio_denominator),$CONTROL_PAR_AUTOMATION_NAME,"denominator")
			$knob__zalewski__template_ratio_denominator := 1
			set_knob_defval ($knob__zalewski__template_ratio_denominator, 1)
			make_persistent ($knob__zalewski__template_ratio_denominator)
			read_persistent_var ($knob__zalewski__template_ratio_denominator)
			set_text ($knob__zalewski__template_ratio_denominator,"    /")
			set_control_par(get_ui_id($knob__zalewski__template_ratio_denominator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__zalewski__template_ratio))
			set_control_par(get_ui_id ($knob__zalewski__template_ratio_denominator),$CONTROL_PAR_POS_X,92)
			set_control_par(get_ui_id ($knob__zalewski__template_ratio_denominator),$CONTROL_PAR_POS_Y,22)


			{convert Zalewski script to single string}
			$counter1 := 0
			while ($counter1 < num_elements(%zalewski_script))
				{!zalewski_script_characters[$counter1] := ""}
				select (%zalewski_script[$counter1])
					case 8
						if ($counter1 > 0)
							!zalewski_script_characters[$counter1 - 1] := " "
						end if
					case 32
						!zalewski_script_characters[$counter1] := " "
					case 36
						!zalewski_script_characters[$counter1] := "$"
					case 42
						!zalewski_script_characters[$counter1] := "*"
					case 43
						!zalewski_script_characters[$counter1] := "+"
					case 44
						!zalewski_script_characters[$counter1] := ","
					case 45
						!zalewski_script_characters[$counter1] := "-"
					case 46
						!zalewski_script_characters[$counter1] := "."
					case 47
						!zalewski_script_characters[$counter1] := "/"
					case 48
						!zalewski_script_characters[$counter1] := "0"
					case 49
						!zalewski_script_characters[$counter1] := "1"
					case 50
						!zalewski_script_characters[$counter1] := "2"
					case 51
						!zalewski_script_characters[$counter1] := "3"
					case 52
						!zalewski_script_characters[$counter1] := "4"
					case 53
						!zalewski_script_characters[$counter1] := "5"
					case 54
						!zalewski_script_characters[$counter1] := "6"
					case 55
						!zalewski_script_characters[$counter1] := "7"
					case 56
						!zalewski_script_characters[$counter1] := "8"
					case 57
						!zalewski_script_characters[$counter1] := "9"
					case 64
						!zalewski_script_characters[$counter1] := "@"
					case 97
						!zalewski_script_characters[$counter1] := "a"
					case 98
						!zalewski_script_characters[$counter1] := "b"
					case 99
						!zalewski_script_characters[$counter1] := "c"
					case 107
						!zalewski_script_characters[$counter1] := "k"
					case 127 {DEL}
						$counter2 := 0
						while ($counter2 <= $counter1)
							!zalewski_script_characters[$counter2] := " "
							inc($counter2)
						end while
				end select
				inc($counter1)
			end while
			$counter1 := 0
			@zalewski_script_display_string := ""
			select ($gui_zalewski__struktura_przeciwna)
				case 0
					@zalewski_script_display_string := @zalewski_script_display_string & "    (  "
				case 1
					@zalewski_script_display_string := @zalewski_script_display_string & "  - (  "
			end select
			while ($counter1 < num_elements(!zalewski_script_characters))
				@zalewski_script_display_string := @zalewski_script_display_string & !zalewski_script_characters[$counter1]
				inc($counter1)
			end while
			select ($gui_zalewski__struktura_odbita)
				case 0
					@zalewski_script_display_string := @zalewski_script_display_string & "  )  "
				case 1
					@zalewski_script_display_string := @zalewski_script_display_string & "  ) *"
			end select
			set_text ($label_zalewski_structure_module,@zalewski_script_display_string)






		{freq ratio input module - 1935}


				set_control_par(get_ui_id ($panel__freqratio),$CONTROL_PAR_POS_X,12)
				set_control_par(get_ui_id ($panel__freqratio),$CONTROL_PAR_POS_Y,30)
				declare $panel__freqratio_visibility
					$panel__freqratio_visibility := 0
					make_persistent($panel__freqratio_visibility)
					read_persistent_var($panel__freqratio_visibility)
				declare const $panel__freqratio__num_of_ui_values := 7
				declare %freqratio__uivalue_numerators_id[$panel__freqratio__num_of_ui_values]
				declare %freqratio__uivalue_denominators_id[$panel__freqratio__num_of_ui_values]
				declare ui_panel $panel__freqratio_num_of_cats
				declare ui_panel $panel__freqratio_table
				declare ui_panel $panel_freqratio__uivalues
				declare const $panel__freqratio__width := 550
				declare const $panel__freqratio__nav_btn_width := 20
				declare const $panel__freqratio__column_width := 70
				declare const $panel__freqratio__ui_value_width := 62
				declare const $panel__freqratio__values_left_margin := ($panel__freqratio__width - ($panel__freqratio__num_of_ui_values * $panel__freqratio__column_width) + ($panel__freqratio__column_width - $panel__freqratio__ui_value_width) ) / 2

				set_control_par(get_ui_id($panel__freqratio_num_of_cats),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__freqratio))	
				set_control_par(get_ui_id ($panel__freqratio_num_of_cats),$CONTROL_PAR_POS_X,91)
				set_control_par(get_ui_id ($panel__freqratio_num_of_cats),$CONTROL_PAR_POS_Y,0)

			declare ui_label $label__freqratio_num_of_cats (1,1)
				set_text ($label__freqratio_num_of_cats,"n u m   o f  c a t s")
				set_control_par(get_ui_id($label__freqratio_num_of_cats),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__freqratio_num_of_cats))
				set_control_par(get_ui_id($label__freqratio_num_of_cats),$CONTROL_PAR_WIDTH,88)
				set_control_par(get_ui_id ($label__freqratio_num_of_cats),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__freqratio_num_of_cats),$CONTROL_PAR_POS_Y,0)
			declare ui_knob $knob__number_of_pitch_classes__freqratio(1,128,1)
				set_control_par_str(get_ui_id($knob__number_of_pitch_classes__freqratio),$CONTROL_PAR_AUTOMATION_NAME,"number_of_pitch_classes")
				$knob__number_of_pitch_classes__freqratio := 5
				make_persistent($knob__number_of_pitch_classes__freqratio)
				read_persistent_var($knob__number_of_pitch_classes__freqratio)
				set_text ($knob__number_of_pitch_classes__freqratio," steps")
				set_control_par(get_ui_id($knob__number_of_pitch_classes__freqratio),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__freqratio_num_of_cats))
				set_control_par(get_ui_id ($knob__number_of_pitch_classes__freqratio),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($knob__number_of_pitch_classes__freqratio),$CONTROL_PAR_POS_Y,22)

		
				set_control_par(get_ui_id($panel__freqratio_table),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__freqratio))
				set_control_par(get_ui_id ($panel__freqratio_table),$CONTROL_PAR_POS_X, 11)
				set_control_par(get_ui_id ($panel__freqratio_table),$CONTROL_PAR_POS_Y, 71)


		declare ui_label $label__freqratio__table (1,1)
				set_text ($label__freqratio__table," f r e q u e n c y   r a t i o s :")
				set_control_par(get_ui_id($label__freqratio__table),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__freqratio_table))
				set_control_par(get_ui_id($label__freqratio__table),$CONTROL_PAR_WIDTH,$panel__freqratio__width)
				set_control_par(get_ui_id ($label__freqratio__table),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__freqratio__table),$CONTROL_PAR_POS_Y,0)

			declare $panel__freqratio__navigation_counter
				$panel__freqratio__navigation_counter := 0 {which twelve scale steps are currently displayed in the table of ratios}
				make_persistent($panel__freqratio__navigation_counter)
				read_persistent_var($panel__freqratio__navigation_counter)

			declare ui_button $panel__freqratio__navigate_left
				$panel__freqratio__navigate_left := 0
				set_text ($panel__freqratio__navigate_left,"<")
				set_control_par(get_ui_id($panel__freqratio__navigate_left),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__freqratio_table))
				set_control_par(get_ui_id($panel__freqratio__navigate_left),$CONTROL_PAR_WIDTH,$panel__freqratio__nav_btn_width)
				set_control_par(get_ui_id ($panel__freqratio__navigate_left),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($panel__freqratio__navigate_left),$CONTROL_PAR_POS_Y,28)
				if ($panel__freqratio__navigation_counter = 0)
					set_control_par(get_ui_id($panel__freqratio__navigate_left),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				else
					set_control_par(get_ui_id($panel__freqratio__navigate_left),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				end if

			declare ui_button $panel__freqratio__navigate_right
				$panel__freqratio__navigate_right := 0
				set_text ($panel__freqratio__navigate_right,">")
				set_control_par(get_ui_id($panel__freqratio__navigate_right),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__freqratio_table))
				set_control_par(get_ui_id($panel__freqratio__navigate_right),$CONTROL_PAR_WIDTH,$panel__freqratio__nav_btn_width)
				set_control_par(get_ui_id ($panel__freqratio__navigate_right),$CONTROL_PAR_POS_X,$panel__freqratio__width-$panel__freqratio__nav_btn_width)
				set_control_par(get_ui_id ($panel__freqratio__navigate_right),$CONTROL_PAR_POS_Y,27)
				if ($knob__number_of_pitch_classes__freqratio+($panel__freqratio__navigation_counter*$panel__freqratio__num_of_ui_values) <= $panel__freqratio__num_of_ui_values)
					set_control_par(get_ui_id($panel__freqratio__navigate_right),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				else
					set_control_par(get_ui_id($panel__freqratio__navigate_right),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				end if

			
				set_control_par(get_ui_id($panel_freqratio__uivalues),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__freqratio_table))
				set_control_par(get_ui_id ($panel_freqratio__uivalues),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($panel_freqratio__uivalues),$CONTROL_PAR_POS_Y,18)


			declare ?default_freqratio_tuning[4] := (440.0, 440.0, ...
													1000.0, 440.0)
			declare %panel_freqratio__milihertz_array_numerators[256] := (0)
			declare %panel_freqratio__milihertz_array_denominators[256] := (0)

				make_persistent(%panel_freqratio__milihertz_array_numerators)
				make_persistent(%panel_freqratio__milihertz_array_denominators)
				$counter1 := 0
					while ($counter1 < num_elements(?default_freqratio_tuning)/2)
						%panel_freqratio__milihertz_array_numerators[$counter1] := real_to_int(1000.0*(?default_freqratio_tuning[2 * $counter1 ]))
						%panel_freqratio__milihertz_array_denominators[$counter1] := real_to_int(1000.0*(?default_freqratio_tuning[2 * $counter1 + 1 ]))
						inc($counter1)
					end while			
					while ($counter1 < num_elements(%panel_freqratio__milihertz_array_numerators))
						%panel_freqratio__milihertz_array_numerators[$counter1] := $counter1 * 100 * 1000
						%panel_freqratio__milihertz_array_denominators[$counter1] := 440 * 1000
						inc($counter1)
					end while

					declare ui_value_edit $gui_miliherz_value_1_numerator(1,99999999,1000)
						%freqratio__uivalue_numerators_id[0] := get_ui_id ($gui_miliherz_value_1_numerator)
					declare ui_value_edit $gui_miliherz_value_2_numerator(1,99999999,1000)
						%freqratio__uivalue_numerators_id[1] := get_ui_id ($gui_miliherz_value_2_numerator)
					declare ui_value_edit $gui_miliherz_value_3_numerator(1,99999999,1000)
						%freqratio__uivalue_numerators_id[2] := get_ui_id ($gui_miliherz_value_3_numerator)
					declare ui_value_edit $gui_miliherz_value_4_numerator(1,99999999,1000)
						%freqratio__uivalue_numerators_id[3] := get_ui_id ($gui_miliherz_value_4_numerator)
					declare ui_value_edit $gui_miliherz_value_5_numerator(1,99999999,1000)
						%freqratio__uivalue_numerators_id[4] := get_ui_id ($gui_miliherz_value_5_numerator)
					declare ui_value_edit $gui_miliherz_value_6_numerator(1,99999999,1000)
						%freqratio__uivalue_numerators_id[5] := get_ui_id ($gui_miliherz_value_6_numerator)
					declare ui_value_edit $gui_miliherz_value_7_numerator(1,99999999,1000)
						%freqratio__uivalue_numerators_id[6] := get_ui_id ($gui_miliherz_value_7_numerator)

					declare ui_value_edit $gui_miliherz_value_1_denominator(1,99999999,1000)
						%freqratio__uivalue_denominators_id[0] := get_ui_id ($gui_miliherz_value_1_denominator)
					declare ui_value_edit $gui_miliherz_value_2_denominator(1,99999999,1000)
						%freqratio__uivalue_denominators_id[1] := get_ui_id ($gui_miliherz_value_2_denominator)
					declare ui_value_edit $gui_miliherz_value_3_denominator(1,99999999,1000)
						%freqratio__uivalue_denominators_id[2] := get_ui_id ($gui_miliherz_value_3_denominator)
					declare ui_value_edit $gui_miliherz_value_4_denominator(1,99999999,1000)
						%freqratio__uivalue_denominators_id[3] := get_ui_id ($gui_miliherz_value_4_denominator)
					declare ui_value_edit $gui_miliherz_value_5_denominator(1,99999999,1000)
						%freqratio__uivalue_denominators_id[4] := get_ui_id ($gui_miliherz_value_5_denominator)
					declare ui_value_edit $gui_miliherz_value_6_denominator(1,99999999,1000)
						%freqratio__uivalue_denominators_id[5] := get_ui_id ($gui_miliherz_value_6_denominator)
					declare ui_value_edit $gui_miliherz_value_7_denominator(1,99999999,1000)
						%freqratio__uivalue_denominators_id[6] := get_ui_id ($gui_miliherz_value_7_denominator)


					read_persistent_var(%panel_freqratio__milihertz_array_numerators)
					read_persistent_var(%panel_freqratio__milihertz_array_denominators)
					$counter1 := 0
					while ($counter1 < $panel__freqratio__num_of_ui_values)
						set_control_par(%freqratio__uivalue_numerators_id[$counter1],$CONTROL_PAR_VALUE, %panel_freqratio__milihertz_array_numerators[$panel__freqratio__navigation_counter*$panel__freqratio__num_of_ui_values + $counter1])
						set_control_par_str (%freqratio__uivalue_numerators_id[$counter1],$CONTROL_PAR_TEXT,"")
						set_control_par(%freqratio__uivalue_numerators_id[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_freqratio__uivalues))
						set_control_par(%freqratio__uivalue_numerators_id[$counter1],$CONTROL_PAR_WIDTH, $panel__freqratio__ui_value_width)
						set_control_par(%freqratio__uivalue_numerators_id[$counter1],$CONTROL_PAR_POS_X, $panel__freqratio__values_left_margin + $panel__freqratio__column_width*($counter1 mod $panel__freqratio__num_of_ui_values))
						set_control_par(%freqratio__uivalue_numerators_id[$counter1],$CONTROL_PAR_POS_Y,2)
						set_control_par(%freqratio__uivalue_numerators_id[$counter1], $CONTROL_PAR_DEFAULT_VALUE, 440*1000)


						set_control_par(%freqratio__uivalue_denominators_id[$counter1],$CONTROL_PAR_VALUE, %panel_freqratio__milihertz_array_denominators[$panel__freqratio__navigation_counter*$panel__freqratio__num_of_ui_values + $counter1])
						set_control_par_str (%freqratio__uivalue_denominators_id[$counter1],$CONTROL_PAR_TEXT,"")
						set_control_par(%freqratio__uivalue_denominators_id[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_freqratio__uivalues))
						set_control_par(%freqratio__uivalue_denominators_id[$counter1],$CONTROL_PAR_WIDTH, $panel__freqratio__ui_value_width)
						set_control_par(%freqratio__uivalue_denominators_id[$counter1],$CONTROL_PAR_POS_X, $panel__freqratio__values_left_margin + $panel__freqratio__column_width*($counter1 mod $panel__freqratio__num_of_ui_values))
						set_control_par(%freqratio__uivalue_denominators_id[$counter1],$CONTROL_PAR_POS_Y,22)
						set_control_par(%freqratio__uivalue_denominators_id[$counter1], $CONTROL_PAR_DEFAULT_VALUE, 440*1000)

						inc($counter1)
					end while

					$counter1 := 0
					while ($counter1 < ($knob__number_of_pitch_classes__freqratio-($panel__freqratio__num_of_ui_values * $panel__freqratio__navigation_counter)) and $counter1 < $panel__freqratio__num_of_ui_values)
						set_control_par(%freqratio__uivalue_numerators_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						set_control_par(%freqratio__uivalue_denominators_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						inc($counter1)
					end while
					while ($counter1 < $panel__freqratio__num_of_ui_values)
						set_control_par(%freqratio__uivalue_numerators_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
						set_control_par(%freqratio__uivalue_denominators_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
						inc($counter1)
					end while


	{period + generator module, temperament - menu paradigm 3}


				set_control_par(get_ui_id ($panel__periodandgenerator),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($panel__periodandgenerator),$CONTROL_PAR_POS_Y,30)
				declare $panel__periodandgenerator_visibility
					$panel__periodandgenerator_visibility := 0
					make_persistent($panel__periodandgenerator_visibility)
					read_persistent_var($panel__periodandgenerator_visibility)
				declare ~periodandgenerator__helper_float := 0.0

			declare ui_panel $panel__generator_interval
				set_control_par(get_ui_id($panel__generator_interval),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__periodandgenerator))
				set_control_par(get_ui_id ($panel__generator_interval),$CONTROL_PAR_POS_X,103+102)
				set_control_par(get_ui_id ($panel__generator_interval),$CONTROL_PAR_POS_Y,68)

			declare ui_label $label_generator_interval (1,1)
				set_text ($label_generator_interval," g e n e r a t o r :")
				set_control_par(get_ui_id($label_generator_interval),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__generator_interval))
				set_control_par(get_ui_id($label_generator_interval),$CONTROL_PAR_WIDTH,92*4)
				set_control_par(get_ui_id ($label_generator_interval),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_generator_interval),$CONTROL_PAR_POS_Y,0)

			declare ui_knob $knob__generator_interval_numerator(1,128,1)
				set_control_par_str(get_ui_id($knob__generator_interval_numerator),$CONTROL_PAR_AUTOMATION_NAME,"generator_numerator")
				$knob__generator_interval_numerator := 3
				set_knob_defval ($knob__generator_interval_numerator, 2)
				make_persistent ($knob__generator_interval_numerator)
				read_persistent_var($knob__generator_interval_numerator)
				set_text ($knob__generator_interval_numerator,"   *")
				set_control_par(get_ui_id($knob__generator_interval_numerator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__generator_interval))
				set_control_par(get_ui_id ($knob__generator_interval_numerator),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($knob__generator_interval_numerator),$CONTROL_PAR_POS_Y,22)
			declare ui_knob $knob__generator_interval_denominator(1,128,1)
				set_control_par_str(get_ui_id($knob__generator_interval_denominator),$CONTROL_PAR_AUTOMATION_NAME,"generator_denominator")
				$knob__generator_interval_denominator := 2
				set_knob_defval ($knob__generator_interval_denominator, 1)
				make_persistent ($knob__generator_interval_denominator)
				read_persistent_var ($knob__generator_interval_denominator)
				set_text ($knob__generator_interval_denominator,"    /")
				set_control_par(get_ui_id($knob__generator_interval_denominator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__generator_interval))
				set_control_par(get_ui_id ($knob__generator_interval_denominator),$CONTROL_PAR_POS_X,92)
				set_control_par(get_ui_id ($knob__generator_interval_denominator),$CONTROL_PAR_POS_Y,22)
			declare ui_knob $knob__generator_interval_power_numerator(1,128,1)
				set_control_par_str(get_ui_id($knob__generator_interval_power_numerator),$CONTROL_PAR_AUTOMATION_NAME,"generator_power_numerator")
				$knob__generator_interval_power_numerator := 1
				set_knob_defval ($knob__generator_interval_power_numerator, 2)
				make_persistent ($knob__generator_interval_power_numerator)
				read_persistent_var($knob__generator_interval_power_numerator)
				set_text ($knob__generator_interval_power_numerator,"   exp")
				set_control_par(get_ui_id($knob__generator_interval_power_numerator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__generator_interval))
				set_control_par(get_ui_id ($knob__generator_interval_power_numerator),$CONTROL_PAR_POS_X,92+4+92)
				set_control_par(get_ui_id ($knob__generator_interval_power_numerator),$CONTROL_PAR_POS_Y,22)
			declare ui_knob $knob__generator_interval_power_denominator(1,128,1)
				set_control_par_str(get_ui_id($knob__generator_interval_power_denominator),$CONTROL_PAR_AUTOMATION_NAME,"generator_power_denominator")
				$knob__generator_interval_power_denominator := 1
				set_knob_defval ($knob__generator_interval_power_denominator, 1)
				make_persistent ($knob__generator_interval_power_denominator)
				read_persistent_var ($knob__generator_interval_power_denominator)
				set_text ($knob__generator_interval_power_denominator,"   root")
				set_control_par(get_ui_id($knob__generator_interval_power_denominator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__generator_interval))
				set_control_par(get_ui_id ($knob__generator_interval_power_denominator),$CONTROL_PAR_POS_X,92+4+92+92)
				set_control_par(get_ui_id ($knob__generator_interval_power_denominator),$CONTROL_PAR_POS_Y,22)


			declare ~tuning_generator_interval_cents
				make_persistent(~tuning_generator_interval_cents)
			~tuning_generator_interval_cents := 1200.0*log( exp((int_to_real($knob__generator_interval_power_numerator)/int_to_real($knob__generator_interval_power_denominator)) * log(int_to_real($knob__generator_interval_numerator)/int_to_real($knob__generator_interval_denominator))) )/log(2.0)
			set_text ($label_generator_interval,"g e n e r a t o r   i n t e r v a l   =   ( " & $knob__generator_interval_numerator & " / " & $knob__generator_interval_denominator & " ) ^ ( " & $knob__generator_interval_power_numerator & " / " & $knob__generator_interval_power_denominator & " ) " & " =  " & floor(~tuning_generator_interval_cents*100.0)/100.0 & "c")
				read_persistent_var(~tuning_generator_interval_cents)



			declare ui_panel $panel__periodandgenerator_num_of_cats
				set_control_par(get_ui_id($panel__periodandgenerator_num_of_cats),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__periodandgenerator))
				set_control_par(get_ui_id ($panel__periodandgenerator_num_of_cats),$CONTROL_PAR_POS_X,103)
				set_control_par(get_ui_id ($panel__periodandgenerator_num_of_cats),$CONTROL_PAR_POS_Y,36)

			declare ui_label $label__periodandgenerator_num_of_cats (1,1)
				set_text ($label__periodandgenerator_num_of_cats,"n u m   o f  c a t s")
				set_control_par(get_ui_id($label__periodandgenerator_num_of_cats),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__periodandgenerator_num_of_cats))
				set_control_par(get_ui_id($label__periodandgenerator_num_of_cats),$CONTROL_PAR_WIDTH,88)
				set_control_par(get_ui_id ($label__periodandgenerator_num_of_cats),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__periodandgenerator_num_of_cats),$CONTROL_PAR_POS_Y,0)
			declare ui_knob $knob__periodandgenerator__stack_up(0,127,1)
				set_control_par_str(get_ui_id($knob__periodandgenerator__stack_up),$CONTROL_PAR_AUTOMATION_NAME,"tuning_stack_intervals_up")
				$knob__periodandgenerator__stack_up := 11
				make_persistent($knob__periodandgenerator__stack_up)
				read_persistent_var($knob__periodandgenerator__stack_up)
				set_text ($knob__periodandgenerator__stack_up,"   up")
				set_control_par(get_ui_id($knob__periodandgenerator__stack_up),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__periodandgenerator_num_of_cats))
				set_control_par(get_ui_id ($knob__periodandgenerator__stack_up),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($knob__periodandgenerator__stack_up),$CONTROL_PAR_POS_Y,22)
			declare ui_knob $knob__periodandgenerator__num_of_untempered_intervals(0,127,1)
				set_control_par_str(get_ui_id($knob__periodandgenerator__num_of_untempered_intervals),$CONTROL_PAR_AUTOMATION_NAME,"number_of_non-tempered_intervals")
				$knob__periodandgenerator__num_of_untempered_intervals := 0
				make_persistent($knob__periodandgenerator__num_of_untempered_intervals)
				read_persistent_var($knob__periodandgenerator__num_of_untempered_intervals)
				set_text ($knob__periodandgenerator__num_of_untempered_intervals,"    $")
				set_control_par(get_ui_id($knob__periodandgenerator__num_of_untempered_intervals),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__periodandgenerator_num_of_cats))
				set_control_par(get_ui_id ($knob__periodandgenerator__num_of_untempered_intervals),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($knob__periodandgenerator__num_of_untempered_intervals),$CONTROL_PAR_POS_Y,64)
			declare ui_knob $knob__periodandgenerator__stack_down(0,127,1)
				set_control_par_str(get_ui_id($knob__periodandgenerator__stack_down),$CONTROL_PAR_AUTOMATION_NAME,"tuning_stack_intervals_down")
				$knob__periodandgenerator__stack_down := 0
				make_persistent($knob__periodandgenerator__stack_down)
				read_persistent_var($knob__periodandgenerator__stack_down)
				set_text ($knob__periodandgenerator__stack_down,"  down")
				set_control_par(get_ui_id($knob__periodandgenerator__stack_down),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__periodandgenerator_num_of_cats))
				set_control_par(get_ui_id ($knob__periodandgenerator__stack_down),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($knob__periodandgenerator__stack_down),$CONTROL_PAR_POS_Y,106)

			declare ui_label $label__periodandgenerator_total_num_of_cats (1,1)
				set_text ($label__periodandgenerator_total_num_of_cats, "total:  " & $knob__periodandgenerator__stack_up + $knob__periodandgenerator__num_of_untempered_intervals + $knob__periodandgenerator__stack_down + 1)
				set_control_par(get_ui_id($label__periodandgenerator_total_num_of_cats),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__periodandgenerator_num_of_cats))
				set_control_par(get_ui_id($label__periodandgenerator_total_num_of_cats),$CONTROL_PAR_WIDTH,87)
				set_control_par(get_ui_id ($label__periodandgenerator_total_num_of_cats),$CONTROL_PAR_POS_X,1)
				set_control_par(get_ui_id ($label__periodandgenerator_total_num_of_cats),$CONTROL_PAR_POS_Y,148)
				set_control_par(get_ui_id($label__periodandgenerator_total_num_of_cats), $CONTROL_PAR_TEXT_ALIGNMENT, 1)


			declare ui_panel $panel__comma_to_temper
				set_control_par(get_ui_id($panel__comma_to_temper),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__periodandgenerator))
				set_control_par(get_ui_id ($panel__comma_to_temper),$CONTROL_PAR_POS_X,103+102)
				set_control_par(get_ui_id ($panel__comma_to_temper),$CONTROL_PAR_POS_Y,140)

			declare ui_label $label_comma_to_temper (1,1)
				set_text ($label_comma_to_temper," c o m m a  t o  t e m p e r :")
				set_control_par(get_ui_id($label_comma_to_temper),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__comma_to_temper))
				set_control_par(get_ui_id($label_comma_to_temper),$CONTROL_PAR_WIDTH,92*4)
				set_control_par(get_ui_id ($label_comma_to_temper),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_comma_to_temper),$CONTROL_PAR_POS_Y,0)

			declare ui_knob $knob__comma_interval_numerator(1,128,1)
				set_control_par_str(get_ui_id($knob__comma_interval_numerator),$CONTROL_PAR_AUTOMATION_NAME,"comma_interval_numerator")
				$knob__comma_interval_numerator := 81
				set_knob_defval ($knob__comma_interval_numerator, 2)
				make_persistent ($knob__comma_interval_numerator)
				read_persistent_var($knob__comma_interval_numerator)
				set_text ($knob__comma_interval_numerator,"   *")
				set_control_par(get_ui_id($knob__comma_interval_numerator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__comma_to_temper))
				set_control_par(get_ui_id ($knob__comma_interval_numerator),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($knob__comma_interval_numerator),$CONTROL_PAR_POS_Y,22)
			declare ui_knob $knob__comma_interval_denominator(1,128,1)
				set_control_par_str(get_ui_id($knob__comma_interval_denominator),$CONTROL_PAR_AUTOMATION_NAME,"comma_interval_denominator")
				$knob__comma_interval_denominator := 80
				set_knob_defval ($knob__comma_interval_denominator, 1)
				make_persistent ($knob__comma_interval_denominator)
				read_persistent_var ($knob__comma_interval_denominator)
				set_text ($knob__comma_interval_denominator,"    /")
				set_control_par(get_ui_id($knob__comma_interval_denominator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__comma_to_temper))
				set_control_par(get_ui_id ($knob__comma_interval_denominator),$CONTROL_PAR_POS_X,92)
				set_control_par(get_ui_id ($knob__comma_interval_denominator),$CONTROL_PAR_POS_Y,22)
			declare ui_knob $knob__comma_fraction_numerator(-63,64,1)
				set_control_par_str(get_ui_id($knob__comma_fraction_numerator),$CONTROL_PAR_AUTOMATION_NAME,"comma_fraction_numerator")
				$knob__comma_fraction_numerator := 0
				set_knob_defval ($knob__comma_fraction_numerator, 0)
				make_persistent ($knob__comma_fraction_numerator)
				read_persistent_var($knob__comma_fraction_numerator)
				set_text ($knob__comma_fraction_numerator," log *")
				set_control_par(get_ui_id($knob__comma_fraction_numerator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__comma_to_temper))
				set_control_par(get_ui_id ($knob__comma_fraction_numerator),$CONTROL_PAR_POS_X,92+4+92)
				set_control_par(get_ui_id ($knob__comma_fraction_numerator),$CONTROL_PAR_POS_Y,22)
			declare ui_knob $knob__comma_fraction_denominator(1,128,1)
				set_control_par_str(get_ui_id($knob__comma_fraction_denominator),$CONTROL_PAR_AUTOMATION_NAME,"comma_fraction_denominator")
				$knob__comma_fraction_denominator := 4
				set_knob_defval ($knob__comma_fraction_denominator, 1)
				make_persistent ($knob__comma_fraction_denominator)
				read_persistent_var ($knob__comma_fraction_denominator)
				set_text ($knob__comma_fraction_denominator," log /")
				set_control_par(get_ui_id($knob__comma_fraction_denominator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__comma_to_temper))
				set_control_par(get_ui_id ($knob__comma_fraction_denominator),$CONTROL_PAR_POS_X,92+4+92+92)
				set_control_par(get_ui_id ($knob__comma_fraction_denominator),$CONTROL_PAR_POS_Y,22)


			declare ~tuning_comma_to_temper_cents
				make_persistent(~tuning_comma_to_temper_cents)
			~tuning_comma_to_temper_cents := (int_to_real($knob__comma_fraction_numerator)/int_to_real($knob__comma_fraction_denominator)) * 1200.0 * log(int_to_real($knob__comma_interval_numerator)/int_to_real($knob__comma_interval_denominator) )/log(2.0)

			set_text ($label_comma_to_temper,"i n t e r v a l  t o  t e m p e r = (" & $knob__comma_fraction_numerator & "/" & $knob__comma_fraction_denominator & ")*1200*log(" & $knob__comma_interval_numerator & "/" & $knob__comma_interval_denominator & ")/log(2)" & " = " & floor(~tuning_comma_to_temper_cents*100.0)/100.0 & "c")
				read_persistent_var(~tuning_comma_to_temper_cents)




	{Temperament Units notation module - John Brombaugh's TU notation - menu 720}


			declare %default_temperament_units_tuning[12] := (120, 120, 120, 120, 120, 0, 0, 0, 60, 60, 60, 60)
			set_control_par(get_ui_id ($panel__temperament_units),$CONTROL_PAR_POS_X,12)
			set_control_par(get_ui_id ($panel__temperament_units),$CONTROL_PAR_POS_Y,30)
			declare const $panel__temperament_units__num_of_uivalues := 12
			declare $panel__temperament_units__width
				$panel__temperament_units__width := 550
			declare $panel__temperament_units__column_width := 42
			declare $panel__temperament_units__value_width := 32
			declare $panel__temperament_units_visibility
				$panel__temperament_units_visibility := 0
				make_persistent($panel__temperament_units_visibility)
				read_persistent_var($panel__temperament_units_visibility)
			declare $last_touched_temperament_unit_uivalue
			declare $temperament_units_sum


		declare ui_panel $panel__temperament_units_table
			set_control_par(get_ui_id($panel__temperament_units_table),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__temperament_units))
			set_control_par(get_ui_id ($panel__temperament_units_table),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id ($panel__temperament_units_table),$CONTROL_PAR_POS_Y,0)


		declare ui_label $label_temperament_units_table (1,1)
			set_text ($label_temperament_units_table," t e m p e r a m e n t   u n i t s :")
			set_control_par(get_ui_id($label_temperament_units_table),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__temperament_units_table))
			set_control_par(get_ui_id($label_temperament_units_table),$CONTROL_PAR_WIDTH,$panel__temperament_units__width)
			set_control_par(get_ui_id ($label_temperament_units_table),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id ($label_temperament_units_table),$CONTROL_PAR_POS_Y,0)


		declare ui_panel $panel_temperament_units_uivalues
			set_control_par(get_ui_id($panel_temperament_units_uivalues),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__temperament_units_table))
			set_control_par(get_ui_id ($panel_temperament_units_uivalues),$CONTROL_PAR_POS_X, (($panel__temperament_units__width - ($panel__temperament_units__num_of_uivalues * $panel__temperament_units__column_width - ($panel__temperament_units__column_width - $panel__temperament_units__value_width)) ) / 2 ) + 1)
			set_control_par(get_ui_id ($panel_temperament_units_uivalues),$CONTROL_PAR_POS_Y,18)

		declare %tuning_temperament_units[12] := (8)
			$counter1 := 0
				while ($counter1 < num_elements(%default_temperament_units_tuning) and $counter1 < 12)
					%tuning_temperament_units[$counter1] := %default_temperament_units_tuning[$counter1]
					inc($counter1)
				end while			
				while ($counter1 < num_elements(%tuning_temperament_units))
					%tuning_temperament_units[$counter1] := $counter1
					inc($counter1)
				end while
			make_persistent(%tuning_temperament_units)
			read_persistent_var(%tuning_temperament_units)

		declare %temperament_unit_uivalue_id[$panel__temperament_units__num_of_uivalues]

			

				$counter1 := 0
				declare ui_value_edit $gui_temperament_unit_1_fc(0,720,1)
					%temperament_unit_uivalue_id[$counter1] := get_ui_id ($gui_temperament_unit_1_fc)
				inc($counter1)
				declare ui_value_edit $gui_temperament_unit_2_cg(0,720,1)
					%temperament_unit_uivalue_id[$counter1] := get_ui_id ($gui_temperament_unit_2_cg)
				inc($counter1)
				declare ui_value_edit $gui_temperament_unit_3_gd(0,720,1)
					%temperament_unit_uivalue_id[$counter1] := get_ui_id ($gui_temperament_unit_3_gd)
				inc($counter1)
				declare ui_value_edit $gui_temperament_unit_4_da(0,720,1)
					%temperament_unit_uivalue_id[$counter1] := get_ui_id ($gui_temperament_unit_4_da)
				inc($counter1)
				declare ui_value_edit $gui_temperament_unit_5_ae(0,720,1)
					%temperament_unit_uivalue_id[$counter1] := get_ui_id ($gui_temperament_unit_5_ae)
				inc($counter1)
				declare ui_value_edit $gui_temperament_unit_6_eh(0,720,1)
					%temperament_unit_uivalue_id[$counter1] := get_ui_id ($gui_temperament_unit_6_eh)
				inc($counter1)
				declare ui_value_edit $gui_temperament_unit_7_hfis(0,720,1)
					%temperament_unit_uivalue_id[$counter1] := get_ui_id ($gui_temperament_unit_7_hfis)
				inc($counter1)
				declare ui_value_edit $gui_temperament_unit_8_fiscis(0,720,1)
					%temperament_unit_uivalue_id[$counter1] := get_ui_id ($gui_temperament_unit_8_fiscis)
				inc($counter1)
				declare ui_value_edit $gui_temperament_unit_9_cisgis(0,720,1)
					%temperament_unit_uivalue_id[$counter1] := get_ui_id ($gui_temperament_unit_9_cisgis)
				inc($counter1)
				declare ui_value_edit $gui_temperament_unit_10_ases(0,720,1)
					%temperament_unit_uivalue_id[$counter1] := get_ui_id ($gui_temperament_unit_10_ases)
				inc($counter1)
				declare ui_value_edit $gui_temperament_unit_11_esb(0,720,1)
					%temperament_unit_uivalue_id[$counter1] := get_ui_id ($gui_temperament_unit_11_esb)
				inc($counter1)
				declare ui_value_edit $gui_temperament_unit_12_bf(0,720,1)
					%temperament_unit_uivalue_id[$counter1] := get_ui_id ($gui_temperament_unit_12_bf)

				$counter1 := 0
				while ($counter1 < $panel__temperament_units__num_of_uivalues)
					set_control_par(%temperament_unit_uivalue_id[$counter1],$CONTROL_PAR_VALUE, %tuning_temperament_units[$counter1])
					set_control_par_str (%temperament_unit_uivalue_id[$counter1],$CONTROL_PAR_TEXT,"")
					set_control_par(%temperament_unit_uivalue_id[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_temperament_units_uivalues))
					set_control_par(%temperament_unit_uivalue_id[$counter1],$CONTROL_PAR_WIDTH,$panel__temperament_units__value_width)
					set_control_par(%temperament_unit_uivalue_id[$counter1],$CONTROL_PAR_POS_X, $counter1 * $panel__temperament_units__column_width)
					set_control_par(%temperament_unit_uivalue_id[$counter1],$CONTROL_PAR_POS_Y,2)
					inc($counter1)
				end while


	{epimoric scale generation module - menu 1000}

		if (1 = 1)
			declare ui_panel $panel__epimoric_generators
				set_control_par(get_ui_id($panel__epimoric_generators),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__epimoric_scales))
				set_control_par(get_ui_id ($panel__epimoric_generators),$CONTROL_PAR_POS_X,113)
				set_control_par(get_ui_id ($panel__epimoric_generators),$CONTROL_PAR_POS_Y,100)
				declare $panel__epimoric_scales_visibility := 0
					make_persistent($panel__epimoric_scales_visibility)
					read_persistent_var($panel__epimoric_scales_visibility)

			declare $epimoric_generators_utonal_switch_width := 52
			declare $epimoric_generators_gui_row_size := 43

			declare ?epimoric_scales__calc_array[1000] := (0.0)
			declare ~epimoric_scales__twin_structure_offset := 0.0
			declare ~epimoric_scales__helper_float := 0.0


			declare ui_label $label_epimoric_generators (1,1)
				set_text ($label_epimoric_generators," e p i m o r i c :")
				set_control_par(get_ui_id($label_epimoric_generators),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__epimoric_generators))
				set_control_par(get_ui_id($label_epimoric_generators),$CONTROL_PAR_WIDTH,92*3 -3)
				set_control_par(get_ui_id ($label_epimoric_generators),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_epimoric_generators),$CONTROL_PAR_POS_Y,0)




			declare ui_switch $epimoric_generators_utonal_switch_1
			declare ui_knob $knob__epimoric_generators__gradus1(0,127,1)
			declare ui_knob $knob__epimoric_generators__modus1(1,128,1)
			declare ui_switch $epimoric_generators_utonal_switch_2
			declare ui_knob $knob__epimoric_generators__gradus2(0,127,1)
			declare ui_knob $knob__epimoric_generators__modus2(0,128,1)

				set_control_par_str(get_ui_id($epimoric_generators_utonal_switch_1), $CONTROL_PAR_TEXT, "flip")
				set_control_par_str(get_ui_id($epimoric_generators_utonal_switch_1),$CONTROL_PAR_AUTOMATION_NAME,"epimoric_utonal_switch_1")
				$epimoric_generators_utonal_switch_1 := 0
				make_persistent($epimoric_generators_utonal_switch_1)
				read_persistent_var($epimoric_generators_utonal_switch_1)
				select ($epimoric_generators_utonal_switch_1)
					case 0
						set_control_par_str(get_ui_id($epimoric_generators_utonal_switch_1), $CONTROL_PAR_TEXT, "[ H M ]")
					case 1
						set_control_par_str(get_ui_id($epimoric_generators_utonal_switch_1), $CONTROL_PAR_TEXT, "[ A M ]")
				end select
				set_control_par(get_ui_id ($epimoric_generators_utonal_switch_1),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__epimoric_generators))
				set_control_par(get_ui_id($epimoric_generators_utonal_switch_1),$CONTROL_PAR_POS_X, 36 + 92*0)
				set_control_par(get_ui_id($epimoric_generators_utonal_switch_1),$CONTROL_PAR_POS_Y, 32)	
				set_control_par(get_ui_id($epimoric_generators_utonal_switch_1), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par(get_ui_id($epimoric_generators_utonal_switch_1),$CONTROL_PAR_WIDTH, $epimoric_generators_utonal_switch_width)

				set_control_par_str(get_ui_id($knob__epimoric_generators__gradus1),$CONTROL_PAR_AUTOMATION_NAME,"epimoric_gradus1")
				$knob__epimoric_generators__gradus1 := 0
				set_knob_defval ($knob__epimoric_generators__gradus1, 0)
				make_persistent ($knob__epimoric_generators__gradus1)
				read_persistent_var($knob__epimoric_generators__gradus1)
				set_text ($knob__epimoric_generators__gradus1," gradus1")
				set_control_par(get_ui_id($knob__epimoric_generators__gradus1),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__epimoric_generators))
				set_control_par(get_ui_id ($knob__epimoric_generators__gradus1),$CONTROL_PAR_POS_X, 92*1)
				set_control_par(get_ui_id ($knob__epimoric_generators__gradus1),$CONTROL_PAR_POS_Y,22)
				if ($knob__epimoric_generators__modus1 # 0)
					set_knob_label($knob__epimoric_generators__gradus1, "  " & ($knob__epimoric_generators__gradus1 mod $knob__epimoric_generators__modus1))
				else
					set_knob_label($knob__epimoric_generators__gradus1, "  " & 0)
				end if
			
				set_control_par_str(get_ui_id($knob__epimoric_generators__modus1),$CONTROL_PAR_AUTOMATION_NAME,"epimoric_modus1")
				$knob__epimoric_generators__modus1 := 2
				set_knob_defval ($knob__epimoric_generators__modus1, 1)
				make_persistent ($knob__epimoric_generators__modus1)
				read_persistent_var ($knob__epimoric_generators__modus1)
				set_text ($knob__epimoric_generators__modus1," modus1")
				set_control_par(get_ui_id($knob__epimoric_generators__modus1),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__epimoric_generators))
				set_control_par(get_ui_id ($knob__epimoric_generators__modus1),$CONTROL_PAR_POS_X, 92*2)
				set_control_par(get_ui_id ($knob__epimoric_generators__modus1),$CONTROL_PAR_POS_Y, 22)

				set_control_par_str(get_ui_id($epimoric_generators_utonal_switch_2), $CONTROL_PAR_TEXT, "flip")
				set_control_par_str(get_ui_id($epimoric_generators_utonal_switch_2),$CONTROL_PAR_AUTOMATION_NAME,"epimoric_utonal_switch_2")
				$epimoric_generators_utonal_switch_2 := 1
				make_persistent($epimoric_generators_utonal_switch_2)
				read_persistent_var($epimoric_generators_utonal_switch_2)
				select ($epimoric_generators_utonal_switch_2)
					case 0
						set_control_par_str(get_ui_id($epimoric_generators_utonal_switch_2), $CONTROL_PAR_TEXT, "[ H M ]")
					case 1
						set_control_par_str(get_ui_id($epimoric_generators_utonal_switch_2), $CONTROL_PAR_TEXT, "[ A M ]")
				end select
				set_control_par(get_ui_id ($epimoric_generators_utonal_switch_2),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__epimoric_generators))
				set_control_par(get_ui_id($epimoric_generators_utonal_switch_2),$CONTROL_PAR_POS_X, 36 + 92*0)
				set_control_par(get_ui_id($epimoric_generators_utonal_switch_2),$CONTROL_PAR_POS_Y, 32 + $epimoric_generators_gui_row_size)	
				set_control_par(get_ui_id($epimoric_generators_utonal_switch_2), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par(get_ui_id($epimoric_generators_utonal_switch_2),$CONTROL_PAR_WIDTH, $epimoric_generators_utonal_switch_width)

				set_control_par_str(get_ui_id($knob__epimoric_generators__gradus2),$CONTROL_PAR_AUTOMATION_NAME,"epimoric_gradus2")
				$knob__epimoric_generators__gradus2 := 0
				set_knob_defval ($knob__epimoric_generators__gradus2, 0)
				make_persistent ($knob__epimoric_generators__gradus2)
				read_persistent_var($knob__epimoric_generators__gradus2)
				set_text ($knob__epimoric_generators__gradus2," gradus2")
				set_control_par(get_ui_id($knob__epimoric_generators__gradus2),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__epimoric_generators))
				set_control_par(get_ui_id ($knob__epimoric_generators__gradus2),$CONTROL_PAR_POS_X, 92*1)
				set_control_par(get_ui_id ($knob__epimoric_generators__gradus2),$CONTROL_PAR_POS_Y, 22 + $epimoric_generators_gui_row_size)
				if ($knob__epimoric_generators__modus2 # 0)
					set_knob_label($knob__epimoric_generators__gradus2, "  " & ($knob__epimoric_generators__gradus2 mod $knob__epimoric_generators__modus2))
				else
					set_knob_label($knob__epimoric_generators__gradus2, "  " & 0)
				end if
		
				set_control_par_str(get_ui_id($knob__epimoric_generators__modus2),$CONTROL_PAR_AUTOMATION_NAME,"epimoric_modus2")
				$knob__epimoric_generators__modus2 := 0
				set_knob_defval ($knob__epimoric_generators__modus2, 0)
				make_persistent ($knob__epimoric_generators__modus2)
				read_persistent_var ($knob__epimoric_generators__modus2)
				set_text ($knob__epimoric_generators__modus2," modus2")
				set_control_par(get_ui_id($knob__epimoric_generators__modus2),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__epimoric_generators))
				set_control_par(get_ui_id ($knob__epimoric_generators__modus2),$CONTROL_PAR_POS_X, 92*2)
				set_control_par(get_ui_id ($knob__epimoric_generators__modus2),$CONTROL_PAR_POS_Y, 22 + $epimoric_generators_gui_row_size)


			

		end if



	{PEDALING TAB $gui_panel__pedaling_tab :} 


		{sus}

		{pedaling sus module - suspedals}
			set_control_par(get_ui_id ($gui_panel__pedaling_tab_sus),$CONTROL_PAR_POS_X,128)
			set_control_par(get_ui_id ($gui_panel__pedaling_tab_sus),$CONTROL_PAR_POS_Y,64)
			declare $panel__suspedals_width := 471
			declare const $panel__suspedals_numofpedals := 12
			declare $panel__suspedals_top_margin := 22
			declare $panel__suspedals_btn_spacing := 39
			declare $panel__suspedals_btn_width := 37
			declare $panel__suspedals_left_margin
				$panel__suspedals_left_margin := (($panel__suspedals_width - ($panel__suspedals_numofpedals * $panel__suspedals_btn_spacing) + ($panel__suspedals_btn_spacing - $panel__suspedals_btn_width)) / 2) +1

			declare %panel__suspedals_state[$panel__suspedals_numofpedals]
				make_persistent(%panel__suspedals_state)
				read_persistent_var(%panel__suspedals_state)
			declare %panel__suspedals_ids[$panel__suspedals_numofpedals]

			declare ui_label $label_suspedals (4,1)
				set_text ($label_suspedals," s u s   p e d a l s :")
				set_control_par(get_ui_id ($label_suspedals),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__pedaling_tab_sus))
				set_control_par(get_ui_id ($label_suspedals),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_suspedals),$CONTROL_PAR_POS_Y,0)
				set_control_par(get_ui_id($label_suspedals),$CONTROL_PAR_WIDTH, $panel__suspedals_width)

			declare ui_switch $uiswitch__suspedal_1
			declare ui_switch $uiswitch__suspedal_2
			declare ui_switch $uiswitch__suspedal_3
			declare ui_switch $uiswitch__suspedal_4
			declare ui_switch $uiswitch__suspedal_5
			declare ui_switch $uiswitch__suspedal_6
			declare ui_switch $uiswitch__suspedal_7
			declare ui_switch $uiswitch__suspedal_8
			declare ui_switch $uiswitch__suspedal_9
			declare ui_switch $uiswitch__suspedal_10
			declare ui_switch $uiswitch__suspedal_11
			declare ui_switch $uiswitch__suspedal_12

			%panel__suspedals_ids[0] := get_ui_id($uiswitch__suspedal_1)
			%panel__suspedals_ids[1] := get_ui_id($uiswitch__suspedal_2)
			%panel__suspedals_ids[2] := get_ui_id($uiswitch__suspedal_3)
			%panel__suspedals_ids[3] := get_ui_id($uiswitch__suspedal_4)
			%panel__suspedals_ids[4] := get_ui_id($uiswitch__suspedal_5)
			%panel__suspedals_ids[5] := get_ui_id($uiswitch__suspedal_6)
			%panel__suspedals_ids[6] := get_ui_id($uiswitch__suspedal_7)
			%panel__suspedals_ids[7] := get_ui_id($uiswitch__suspedal_8)
			%panel__suspedals_ids[8] := get_ui_id($uiswitch__suspedal_9)
			%panel__suspedals_ids[9] := get_ui_id($uiswitch__suspedal_10)
			%panel__suspedals_ids[10] := get_ui_id($uiswitch__suspedal_11)
			%panel__suspedals_ids[11] := get_ui_id($uiswitch__suspedal_12)

			$counter1 := 0
			while ($counter1 < $panel__suspedals_numofpedals)
				set_control_par_str(%panel__suspedals_ids[$counter1],$CONTROL_PAR_AUTOMATION_NAME, "suspedal_" & $counter1)
				set_control_par(%panel__suspedals_ids[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__pedaling_tab_sus))
				set_control_par(%panel__suspedals_ids[$counter1],$CONTROL_PAR_POS_X, $panel__suspedals_left_margin + ($panel__suspedals_btn_spacing *$counter1))
				set_control_par(%panel__suspedals_ids[$counter1],$CONTROL_PAR_POS_Y, $panel__suspedals_top_margin)
				set_control_par(%panel__suspedals_ids[$counter1], $CONTROL_PAR_WIDTH, $panel__suspedals_btn_width)
				set_control_par(%panel__suspedals_ids[$counter1], $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				set_control_par(%panel__suspedals_ids[$counter1], $CONTROL_PAR_VALUE, %panel__suspedals_state[$counter1])
				select(%panel__suspedals_state[$counter1])
					case 0
						set_control_par_str(%panel__suspedals_ids[$counter1], $CONTROL_PAR_TEXT, "[ " & !cyfry_rzymskie[$counter1+1] & " ]")
					case 1
					set_control_par_str(%panel__suspedals_ids[$counter1], $CONTROL_PAR_TEXT, "[ sus ]")
				end select
				inc($counter1)
			end while


	{harp pedaling module}
		if (1 = 1)
			declare ~harppedaling_note_transposition_cents := 0.0
			declare $panel__harppedals_column_width := 88
			declare $panel__harppedals_top_margin := 22
			declare $panel__harppedals_row_segment_height := 112
			set_control_par(get_ui_id ($gui_panel__pedaling_tab_harp),$CONTROL_PAR_POS_X,3)
			set_control_par(get_ui_id ($gui_panel__pedaling_tab_harp),$CONTROL_PAR_POS_Y,40)

			declare const $panel__harppedals__numofpedals := 7
			declare %switchids__harppedals__sharps_btns[$panel__harppedals__numofpedals]
			declare %knobids__harppedals__sharps_numerators[$panel__harppedals__numofpedals]
			declare %knobids__harppedals__sharps_denominators[$panel__harppedals__numofpedals]
			declare %switchids__harppedals__flats_btns[$panel__harppedals__numofpedals]
			declare %knobids__harppedals__flats_numerators[$panel__harppedals__numofpedals]
			declare %knobids__harppedals__flats_denominators[$panel__harppedals__numofpedals]
			declare %knobids__harppedals__target[$panel__harppedals__numofpedals]

			declare ui_knob $knob__harppedal_1__d_sharp_numerator(1,128,1)
			declare ui_knob $knob__harppedal_1__d_sharp_denominator(1,128,1)
			declare ui_knob $knob__harppedal_2__c_sharp_numerator(1,128,1)
			declare ui_knob $knob__harppedal_2__c_sharp_denominator(1,128,1)
			declare ui_knob $knob__harppedal_3__b_sharp_numerator(1,128,1)
			declare ui_knob $knob__harppedal_3__b_sharp_denominator(1,128,1)
			declare ui_knob $knob__harppedal_4__e_sharp_numerator(1,128,1)
			declare ui_knob $knob__harppedal_4__e_sharp_denominator(1,128,1)
			declare ui_knob $knob__harppedal_5__f_sharp_numerator(1,128,1)
			declare ui_knob $knob__harppedal_5__f_sharp_denominator(1,128,1)
			declare ui_knob $knob__harppedal_6__g_sharp_numerator(1,128,1)
			declare ui_knob $knob__harppedal_6__g_sharp_denominator(1,128,1)
			declare ui_knob $knob__harppedal_7__a_sharp_numerator(1,128,1)
			declare ui_knob $knob__harppedal_7__a_sharp_denominator(1,128,1)


			declare ui_knob $knob__harppedal_1__d_flat_numerator(1,128,1)
			declare ui_knob $knob__harppedal_1__d_flat_denominator(1,128,1)
			declare ui_knob $knob__harppedal_2__c_flat_numerator(1,128,1)
			declare ui_knob $knob__harppedal_2__c_flat_denominator(1,128,1)
			declare ui_knob $knob__harppedal_3__b_flat_numerator(1,128,1)
			declare ui_knob $knob__harppedal_3__b_flat_denominator(1,128,1)
			declare ui_knob $knob__harppedal_4__e_flat_numerator(1,128,1)
			declare ui_knob $knob__harppedal_4__e_flat_denominator(1,128,1)
			declare ui_knob $knob__harppedal_5__f_flat_numerator(1,128,1)
			declare ui_knob $knob__harppedal_5__f_flat_denominator(1,128,1)
			declare ui_knob $knob__harppedal_6__g_flat_numerator(1,128,1)
			declare ui_knob $knob__harppedal_6__g_flat_denominator(1,128,1)
			declare ui_knob $knob__harppedal_7__a_flat_numerator(1,128,1)
			declare ui_knob $knob__harppedal_7__a_flat_denominator(1,128,1)
		
			declare ui_switch $switch__harppedal_1__d_sharp
			declare ui_switch $switch__harppedal_2__c_sharp
			declare ui_switch $switch__harppedal_3__b_sharp
			declare ui_switch $switch__harppedal_4__e_sharp
			declare ui_switch $switch__harppedal_5__f_sharp
			declare ui_switch $switch__harppedal_6__g_sharp
			declare ui_switch $switch__harppedal_7__a_sharp

			declare ui_switch $switch__harppedal_1__d_flat
			declare ui_switch $switch__harppedal_2__c_flat
			declare ui_switch $switch__harppedal_3__b_flat
			declare ui_switch $switch__harppedal_4__e_flat
			declare ui_switch $switch__harppedal_5__f_flat
			declare ui_switch $switch__harppedal_6__g_flat
			declare ui_switch $switch__harppedal_7__a_flat
		

			%knobids__harppedals__sharps_numerators[0] := get_ui_id($knob__harppedal_1__d_sharp_numerator)
			%knobids__harppedals__sharps_numerators[1] := get_ui_id($knob__harppedal_2__c_sharp_numerator)
			%knobids__harppedals__sharps_numerators[2] := get_ui_id($knob__harppedal_3__b_sharp_numerator)
			%knobids__harppedals__sharps_numerators[3] := get_ui_id($knob__harppedal_4__e_sharp_numerator)
			%knobids__harppedals__sharps_numerators[4] := get_ui_id($knob__harppedal_5__f_sharp_numerator)
			%knobids__harppedals__sharps_numerators[5] := get_ui_id($knob__harppedal_6__g_sharp_numerator)
			%knobids__harppedals__sharps_numerators[6] := get_ui_id($knob__harppedal_7__a_sharp_numerator)
			%knobids__harppedals__sharps_denominators[0] := get_ui_id($knob__harppedal_1__d_sharp_denominator)
			%knobids__harppedals__sharps_denominators[1] := get_ui_id($knob__harppedal_2__c_sharp_denominator)
			%knobids__harppedals__sharps_denominators[2] := get_ui_id($knob__harppedal_3__b_sharp_denominator)
			%knobids__harppedals__sharps_denominators[3] := get_ui_id($knob__harppedal_4__e_sharp_denominator)
			%knobids__harppedals__sharps_denominators[4] := get_ui_id($knob__harppedal_5__f_sharp_denominator)
			%knobids__harppedals__sharps_denominators[5] := get_ui_id($knob__harppedal_6__g_sharp_denominator)
			%knobids__harppedals__sharps_denominators[6] := get_ui_id($knob__harppedal_7__a_sharp_denominator)
			%knobids__harppedals__flats_numerators[0] := get_ui_id($knob__harppedal_1__d_flat_numerator)
			%knobids__harppedals__flats_numerators[1] := get_ui_id($knob__harppedal_2__c_flat_numerator)
			%knobids__harppedals__flats_numerators[2] := get_ui_id($knob__harppedal_3__b_flat_numerator)
			%knobids__harppedals__flats_numerators[3] := get_ui_id($knob__harppedal_4__e_flat_numerator)
			%knobids__harppedals__flats_numerators[4] := get_ui_id($knob__harppedal_5__f_flat_numerator)
			%knobids__harppedals__flats_numerators[5] := get_ui_id($knob__harppedal_6__g_flat_numerator)
			%knobids__harppedals__flats_numerators[6] := get_ui_id($knob__harppedal_7__a_flat_numerator)
			%knobids__harppedals__flats_denominators[0] := get_ui_id($knob__harppedal_1__d_flat_denominator)
			%knobids__harppedals__flats_denominators[1] := get_ui_id($knob__harppedal_2__c_flat_denominator)
			%knobids__harppedals__flats_denominators[2] := get_ui_id($knob__harppedal_3__b_flat_denominator)
			%knobids__harppedals__flats_denominators[3] := get_ui_id($knob__harppedal_4__e_flat_denominator)
			%knobids__harppedals__flats_denominators[4] := get_ui_id($knob__harppedal_5__f_flat_denominator)
			%knobids__harppedals__flats_denominators[5] := get_ui_id($knob__harppedal_6__g_flat_denominator)
			%knobids__harppedals__flats_denominators[6] := get_ui_id($knob__harppedal_7__a_flat_denominator)
		
			%switchids__harppedals__sharps_btns[0] := get_ui_id($switch__harppedal_1__d_sharp)
			%switchids__harppedals__sharps_btns[1] := get_ui_id($switch__harppedal_2__c_sharp)
			%switchids__harppedals__sharps_btns[2] := get_ui_id($switch__harppedal_3__b_sharp)
			%switchids__harppedals__sharps_btns[3] := get_ui_id($switch__harppedal_4__e_sharp)
			%switchids__harppedals__sharps_btns[4] := get_ui_id($switch__harppedal_5__f_sharp)
			%switchids__harppedals__sharps_btns[5] := get_ui_id($switch__harppedal_6__g_sharp)
			%switchids__harppedals__sharps_btns[6] := get_ui_id($switch__harppedal_7__a_sharp)
			%switchids__harppedals__flats_btns[0] := get_ui_id($switch__harppedal_1__d_flat)
			%switchids__harppedals__flats_btns[1] := get_ui_id($switch__harppedal_2__c_flat)
			%switchids__harppedals__flats_btns[2] := get_ui_id($switch__harppedal_3__b_flat)
			%switchids__harppedals__flats_btns[3] := get_ui_id($switch__harppedal_4__e_flat)
			%switchids__harppedals__flats_btns[4] := get_ui_id($switch__harppedal_5__f_flat)
			%switchids__harppedals__flats_btns[5] := get_ui_id($switch__harppedal_6__g_flat)
			%switchids__harppedals__flats_btns[6] := get_ui_id($switch__harppedal_7__a_flat)
	

			set_control_par_str(%switchids__harppedals__sharps_btns[0], $CONTROL_PAR_TEXT, "[ II ]")
			set_control_par_str(%switchids__harppedals__sharps_btns[1], $CONTROL_PAR_TEXT, "[ I ]")
			set_control_par_str(%switchids__harppedals__sharps_btns[2], $CONTROL_PAR_TEXT, "[ VII ]")
			set_control_par_str(%switchids__harppedals__sharps_btns[3], $CONTROL_PAR_TEXT, "[ III ]")
			set_control_par_str(%switchids__harppedals__sharps_btns[4], $CONTROL_PAR_TEXT, "[ IV ]")
			set_control_par_str(%switchids__harppedals__sharps_btns[5], $CONTROL_PAR_TEXT, "[ V ]")
			set_control_par_str(%switchids__harppedals__sharps_btns[6], $CONTROL_PAR_TEXT, "[ VI ]")

			set_control_par_str(%switchids__harppedals__flats_btns[0], $CONTROL_PAR_TEXT, "[ II ]")
			set_control_par_str(%switchids__harppedals__flats_btns[1], $CONTROL_PAR_TEXT, "[ I ]")
			set_control_par_str(%switchids__harppedals__flats_btns[2], $CONTROL_PAR_TEXT, "[ VII ]")
			set_control_par_str(%switchids__harppedals__flats_btns[3], $CONTROL_PAR_TEXT, "[ III ]")
			set_control_par_str(%switchids__harppedals__flats_btns[4], $CONTROL_PAR_TEXT, "[ IV ]")
			set_control_par_str(%switchids__harppedals__flats_btns[5], $CONTROL_PAR_TEXT, "[ V ]")
			set_control_par_str(%switchids__harppedals__flats_btns[6], $CONTROL_PAR_TEXT, "[ VI ]")

			declare %harppedal__sharp_switches[$panel__harppedals__numofpedals] := (0)
				make_persistent(%harppedal__sharp_switches)
				read_persistent_var(%harppedal__sharp_switches)
			declare %harppedal__sharp_numerators[$panel__harppedals__numofpedals] := (16)
				make_persistent(%harppedal__sharp_numerators)
				read_persistent_var(%harppedal__sharp_numerators)
			declare %harppedal__sharp_denominators[$panel__harppedals__numofpedals] := (15)
				make_persistent(%harppedal__sharp_denominators)
				read_persistent_var(%harppedal__sharp_denominators)
			declare %harppedal__flat_switches[$panel__harppedals__numofpedals] := (0)
				make_persistent(%harppedal__flat_switches)
				read_persistent_var(%harppedal__flat_switches)
			declare %harppedal__flat_numerators[$panel__harppedals__numofpedals] := (15)
				make_persistent(%harppedal__flat_numerators)
				read_persistent_var(%harppedal__flat_numerators)
			declare %harppedal__flat_denominators[$panel__harppedals__numofpedals] := (16)
				make_persistent(%harppedal__flat_denominators)
				read_persistent_var(%harppedal__flat_denominators)

			$counter1 := 0
			while ($counter1 < $panel__harppedals__numofpedals)


				set_control_par_str(%knobids__harppedals__sharps_numerators[$counter1],$CONTROL_PAR_AUTOMATION_NAME,"harppedal" & $counter1 + 1 & "_sharp_numerator")
				set_control_par(%knobids__harppedals__sharps_numerators[$counter1], $CONTROL_PAR_VALUE, %harppedal__sharp_numerators[$counter1])
				set_control_par(%knobids__harppedals__sharps_numerators[$counter1], $CONTROL_PAR_DEFAULT_VALUE, 72)
				set_control_par_str(%knobids__harppedals__sharps_numerators[$counter1], $CONTROL_PAR_TEXT, "   *")
				set_control_par(%knobids__harppedals__sharps_numerators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__pedaling_tab_harp))
				set_control_par(%knobids__harppedals__sharps_numerators[$counter1],$CONTROL_PAR_POS_X, $panel__harppedals_column_width*$counter1)
				set_control_par(%knobids__harppedals__sharps_numerators[$counter1],$CONTROL_PAR_POS_Y, $panel__harppedals_top_margin + 20)

				set_control_par_str(%knobids__harppedals__sharps_denominators[$counter1],$CONTROL_PAR_AUTOMATION_NAME,"harppedal" & $counter1 + 1 & "_sharp_denominator")
				set_control_par(%knobids__harppedals__sharps_denominators[$counter1], $CONTROL_PAR_VALUE, %harppedal__sharp_denominators[$counter1])
				set_control_par(%knobids__harppedals__sharps_denominators[$counter1], $CONTROL_PAR_DEFAULT_VALUE, 72)
				set_control_par_str(%knobids__harppedals__sharps_denominators[$counter1], $CONTROL_PAR_TEXT, "   /")
				set_control_par(%knobids__harppedals__sharps_denominators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__pedaling_tab_harp))
				set_control_par(%knobids__harppedals__sharps_denominators[$counter1],$CONTROL_PAR_POS_X,$panel__harppedals_column_width*$counter1)
				set_control_par(%knobids__harppedals__sharps_denominators[$counter1],$CONTROL_PAR_POS_Y, $panel__harppedals_top_margin + 60)

				set_control_par_str(%knobids__harppedals__flats_numerators[$counter1],$CONTROL_PAR_AUTOMATION_NAME,"harppedal" & $counter1 + 1 & "_flat_numerator")
				set_control_par(%knobids__harppedals__flats_numerators[$counter1], $CONTROL_PAR_VALUE, %harppedal__flat_numerators[$counter1])
				set_control_par(%knobids__harppedals__flats_numerators[$counter1], $CONTROL_PAR_DEFAULT_VALUE, 72)
				set_control_par_str(%knobids__harppedals__flats_numerators[$counter1], $CONTROL_PAR_TEXT, "   *")
				set_control_par(%knobids__harppedals__flats_numerators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__pedaling_tab_harp))
				set_control_par(%knobids__harppedals__flats_numerators[$counter1],$CONTROL_PAR_POS_X,$panel__harppedals_column_width*$counter1)
				set_control_par(%knobids__harppedals__flats_numerators[$counter1],$CONTROL_PAR_POS_Y, $panel__harppedals_top_margin + $panel__harppedals_row_segment_height + 20)

				set_control_par_str(%knobids__harppedals__flats_denominators[$counter1],$CONTROL_PAR_AUTOMATION_NAME,"harppedal" & $counter1 + 1 & "_flat_denominator")
				set_control_par(%knobids__harppedals__flats_denominators[$counter1], $CONTROL_PAR_VALUE, %harppedal__flat_denominators[$counter1])
				set_control_par(%knobids__harppedals__flats_denominators[$counter1], $CONTROL_PAR_DEFAULT_VALUE, 72)
				set_control_par_str(%knobids__harppedals__flats_denominators[$counter1], $CONTROL_PAR_TEXT, "   /")
				set_control_par(%knobids__harppedals__flats_denominators[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__pedaling_tab_harp))
				set_control_par(%knobids__harppedals__flats_denominators[$counter1],$CONTROL_PAR_POS_X, $panel__harppedals_column_width*$counter1)
				set_control_par(%knobids__harppedals__flats_denominators[$counter1],$CONTROL_PAR_POS_Y,  $panel__harppedals_top_margin + $panel__harppedals_row_segment_height + 60)

	
				set_control_par_str(%switchids__harppedals__sharps_btns[$counter1],$CONTROL_PAR_AUTOMATION_NAME,"harppedal" & $counter1 + 1 & "_sharp_switch")
				set_control_par(%switchids__harppedals__sharps_btns[$counter1],$CONTROL_PAR_VALUE, %harppedal__sharp_switches[$counter1])
				set_control_par(%switchids__harppedals__sharps_btns[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__pedaling_tab_harp))
				set_control_par(%switchids__harppedals__sharps_btns[$counter1],$CONTROL_PAR_POS_X, $panel__harppedals_column_width*$counter1)
				set_control_par(%switchids__harppedals__sharps_btns[$counter1],$CONTROL_PAR_POS_Y, $panel__harppedals_top_margin)
	   			set_control_par(%switchids__harppedals__sharps_btns[$counter1], $CONTROL_PAR_WIDTH, 88)
	    		set_control_par(%switchids__harppedals__sharps_btns[$counter1], $CONTROL_PAR_HEIGHT, 18 )
				set_control_par(%switchids__harppedals__sharps_btns[$counter1], $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				if (%harppedal__sharp_switches[$counter1] = 1)
					set_control_par_str(%switchids__harppedals__sharps_btns[$counter1], $CONTROL_PAR_TEXT, "[  #  ]")
				end if

				set_control_par_str(%switchids__harppedals__flats_btns[$counter1],$CONTROL_PAR_AUTOMATION_NAME,"harppedal" & $counter1 + 1 & "_flat_switch")
				set_control_par(%switchids__harppedals__flats_btns[$counter1],$CONTROL_PAR_VALUE, %harppedal__flat_switches[$counter1])
				set_control_par(%switchids__harppedals__flats_btns[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__pedaling_tab_harp))
				set_control_par(%switchids__harppedals__flats_btns[$counter1],$CONTROL_PAR_POS_X, $panel__harppedals_column_width*$counter1)
				set_control_par(%switchids__harppedals__flats_btns[$counter1],$CONTROL_PAR_POS_Y, $panel__harppedals_top_margin + $panel__harppedals_row_segment_height)
	   			set_control_par(%switchids__harppedals__flats_btns[$counter1], $CONTROL_PAR_WIDTH, 88)
	    		set_control_par(%switchids__harppedals__flats_btns[$counter1], $CONTROL_PAR_HEIGHT, 18 )
				set_control_par(%switchids__harppedals__flats_btns[$counter1], $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				if (%harppedal__flat_switches[$counter1] = 1)
					set_control_par_str(%switchids__harppedals__flats_btns[$counter1], $CONTROL_PAR_TEXT, "[  b  ]")
				end if
		
				inc($counter1)
			end while

		end if





		{epimoric twin scale - bitonal pedaling module - epimoric fill in module gui elements:}

			declare ~epimoric_bitonal_twinscale_module___root_transposition_cents := 0.0
			declare $epimoric_bitonal_twinscale_module___step_compensation := 0
			declare $epimoric_bitonal_twinscale_module___upsidedown_twin := 0

				declare $epimoric_bitonal_module_panel_pos_x := 128
				declare $epimoric_bitonal_module_panel_pos_y := 66

				declare $epimoric_bitonal_module_panel_width
					$epimoric_bitonal_module_panel_width := 92 * 4
				declare $epimoric_bitonal_module_panel_defaulb_btn_width := 80


			declare $epimoric_bitonal_twinscale_module__ouroboros_transposition := 1
				make_persistent($epimoric_bitonal_twinscale_module__ouroboros_transposition)
			declare $epimoric_bitonal_twinscale_module__dying_battery := 0
				make_persistent($epimoric_bitonal_twinscale_module__dying_battery)
			declare $epimoric_bitonal_twinscale_module__arg1 := 0
				make_persistent($epimoric_bitonal_twinscale_module__arg1)
			declare $epimoric_bitonal_twinscale_module__arg2 := 0
				make_persistent($epimoric_bitonal_twinscale_module__arg2)
			declare $epimoric_bitonal_twinscale_module__polish_mirror {when counting intervals from the top of the scale use the same intervals as from the bottom}
				make_persistent($epimoric_bitonal_twinscale_module__polish_mirror)



			declare ui_panel $epimoric_bitonal_twinscale_module
				set_control_par(get_ui_id ($epimoric_bitonal_twinscale_module),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__pedaling_tab_epimoric))
				set_control_par(get_ui_id ($epimoric_bitonal_twinscale_module),$CONTROL_PAR_POS_X,$epimoric_bitonal_module_panel_pos_x)
				set_control_par(get_ui_id ($epimoric_bitonal_twinscale_module),$CONTROL_PAR_POS_Y,$epimoric_bitonal_module_panel_pos_y)

			declare ui_label $epimoric_bitonal_module_label (4,1)
				set_text ($epimoric_bitonal_module_label," e p i m o r i c    b i t o n a l i t y :")
				set_control_par_str(get_ui_id($epimoric_bitonal_module_label),$CONTROL_PAR_HELP, "Effectively doubles the number of steps in a given scale. Twin scale is created based on the principles of common note transposition and inversion.")
				set_control_par(get_ui_id ($epimoric_bitonal_module_label),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_bitonal_twinscale_module))
				set_control_par(get_ui_id ($epimoric_bitonal_module_label),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($epimoric_bitonal_module_label),$CONTROL_PAR_POS_Y,0)
				set_control_par(get_ui_id($epimoric_bitonal_module_label),$CONTROL_PAR_WIDTH,$epimoric_bitonal_module_panel_width)

			declare ui_switch $epimoric_bitonal_module_onoff
				set_control_par_str(get_ui_id($epimoric_bitonal_module_onoff),$CONTROL_PAR_AUTOMATION_NAME,"epimoric_twin_scale_onoff")
				set_control_par_str(get_ui_id($epimoric_bitonal_module_onoff), $CONTROL_PAR_TEXT, "epimoric twin scale ON/OFF switch")
				set_control_par_str(get_ui_id($epimoric_bitonal_module_onoff),$CONTROL_PAR_HELP, "Turn on the epimoric twin scale module")
				make_persistent($epimoric_bitonal_module_onoff)
				read_persistent_var($epimoric_bitonal_module_onoff)
				set_control_par(get_ui_id ($epimoric_bitonal_module_onoff),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_bitonal_twinscale_module))
				set_control_par(get_ui_id($epimoric_bitonal_module_onoff),$CONTROL_PAR_POS_X, 0)
				set_control_par(get_ui_id($epimoric_bitonal_module_onoff),$CONTROL_PAR_POS_Y,20)
	   			set_control_par(get_ui_id($epimoric_bitonal_module_onoff), $CONTROL_PAR_WIDTH, $epimoric_bitonal_module_panel_width)
	    		set_control_par(get_ui_id($epimoric_bitonal_module_onoff), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($epimoric_bitonal_module_onoff), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				select ($epimoric_bitonal_module_onoff)
					case 1
						set_control_par_str(get_ui_id($epimoric_bitonal_module_onoff), $CONTROL_PAR_TEXT, "[  ON  ]")
					case 0
						set_control_par_str(get_ui_id($epimoric_bitonal_module_onoff), $CONTROL_PAR_TEXT, "[ off ]")
				end select	


			declare ui_switch $epimoric_bitonal_twinscale_module___sort
					set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module___sort), $CONTROL_PAR_TEXT, "sort")
					make_persistent($epimoric_bitonal_twinscale_module___sort)
					read_persistent_var($epimoric_bitonal_twinscale_module___sort)
					select ($epimoric_bitonal_twinscale_module___sort)
						case 0
							set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module___sort), $CONTROL_PAR_TEXT, "[ append ]")
						case 1
							set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module___sort), $CONTROL_PAR_TEXT, "[   sort   ]")
					end select
					set_control_par(get_ui_id ($epimoric_bitonal_twinscale_module___sort),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_bitonal_twinscale_module))
					set_control_par(get_ui_id($epimoric_bitonal_twinscale_module___sort),$CONTROL_PAR_POS_X, 92*1)
					set_control_par(get_ui_id($epimoric_bitonal_twinscale_module___sort),$CONTROL_PAR_POS_Y,22+22+18)	
	   				set_control_par(get_ui_id($epimoric_bitonal_twinscale_module___sort), $CONTROL_PAR_WIDTH, $epimoric_bitonal_module_panel_defaulb_btn_width)
					set_control_par(get_ui_id($epimoric_bitonal_twinscale_module___sort), $CONTROL_PAR_TEXT_ALIGNMENT, 1)


				declare ui_switch $epimoric_bitonal_twinscale_module__switch1
					set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module__switch1), $CONTROL_PAR_TEXT, "360")
					read_persistent_var($epimoric_bitonal_twinscale_module__ouroboros_transposition)
					$epimoric_bitonal_twinscale_module__switch1 := $epimoric_bitonal_twinscale_module__ouroboros_transposition
					select ($epimoric_bitonal_twinscale_module__switch1)
						case 0
							set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module__switch1), $CONTROL_PAR_TEXT, "[ progression ]")
						case 1
							set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module__switch1), $CONTROL_PAR_TEXT, "[ Ouroboros ]")
					end select
					set_control_par(get_ui_id ($epimoric_bitonal_twinscale_module__switch1),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_bitonal_twinscale_module))
					set_control_par(get_ui_id($epimoric_bitonal_twinscale_module__switch1),$CONTROL_PAR_POS_X, 92*0)
					set_control_par(get_ui_id($epimoric_bitonal_twinscale_module__switch1),$CONTROL_PAR_POS_Y,22+22)	
	   				set_control_par(get_ui_id($epimoric_bitonal_twinscale_module__switch1), $CONTROL_PAR_WIDTH, $epimoric_bitonal_module_panel_defaulb_btn_width)
					set_control_par(get_ui_id($epimoric_bitonal_twinscale_module__switch1), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				declare ui_switch $epimoric_bitonal_twinscale_module__switch2
					set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module__switch2), $CONTROL_PAR_TEXT, "vanilla/spicy")
					read_persistent_var($epimoric_bitonal_twinscale_module__dying_battery)
					$epimoric_bitonal_twinscale_module__switch2 := $epimoric_bitonal_twinscale_module__dying_battery
					select ($epimoric_bitonal_twinscale_module__switch2)
						case 0
							set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module__switch2), $CONTROL_PAR_TEXT, "( vanilla )")
						case 1
							set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module__switch2), $CONTROL_PAR_TEXT, "<  spicy  >")
					end select
					set_control_par(get_ui_id ($epimoric_bitonal_twinscale_module__switch2),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_bitonal_twinscale_module))
					set_control_par(get_ui_id($epimoric_bitonal_twinscale_module__switch2),$CONTROL_PAR_POS_X, 92*1)
					set_control_par(get_ui_id($epimoric_bitonal_twinscale_module__switch2),$CONTROL_PAR_POS_Y,22+22)	
	   				set_control_par(get_ui_id($epimoric_bitonal_twinscale_module__switch2), $CONTROL_PAR_WIDTH, $epimoric_bitonal_module_panel_defaulb_btn_width)
					set_control_par(get_ui_id($epimoric_bitonal_twinscale_module__switch2), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				declare ui_switch $epimoric_bitonal_twinscale_module__switch3
					set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module__switch3), $CONTROL_PAR_TEXT, "polish mirror")
					read_persistent_var($epimoric_bitonal_twinscale_module__polish_mirror)
					$epimoric_bitonal_twinscale_module__switch3 := $epimoric_bitonal_twinscale_module__polish_mirror
					select ($epimoric_bitonal_twinscale_module__switch3)
						case 0
							set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module__switch3), $CONTROL_PAR_TEXT, "[ fake mirror ]")
						case 1
							set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module__switch3), $CONTROL_PAR_TEXT, "[ true mirror ]")
					end select
					set_control_par(get_ui_id ($epimoric_bitonal_twinscale_module__switch3),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_bitonal_twinscale_module))
					set_control_par(get_ui_id($epimoric_bitonal_twinscale_module__switch3),$CONTROL_PAR_POS_X, 92*0)
					set_control_par(get_ui_id($epimoric_bitonal_twinscale_module__switch3),$CONTROL_PAR_POS_Y,22+22+18)	
	   				set_control_par(get_ui_id($epimoric_bitonal_twinscale_module__switch3), $CONTROL_PAR_WIDTH, $epimoric_bitonal_module_panel_defaulb_btn_width)
					set_control_par(get_ui_id($epimoric_bitonal_twinscale_module__switch3), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				declare ui_knob $epimoric_bitonal_twinscale_module__knob1 (0, 127, 1)
					read_persistent_var($epimoric_bitonal_twinscale_module__arg1)
					declare $epimoric_bitonal_twinscale_module__knob1_orientation
						$epimoric_bitonal_twinscale_module__knob1_orientation := ($epimoric_bitonal_twinscale_module__knob1 * $number_of_pitch_classes) / 128
						if ($epimoric_bitonal_module_onoff = 1)
							$epimoric_bitonal_twinscale_module__knob1_orientation := $epimoric_bitonal_twinscale_module__knob1_orientation / 2
						end if
						make_persistent($epimoric_bitonal_twinscale_module__knob1_orientation)
						read_persistent_var($epimoric_bitonal_twinscale_module__knob1_orientation)
					$epimoric_bitonal_twinscale_module__knob1 := $epimoric_bitonal_twinscale_module__knob1_orientation
					set_control_par(get_ui_id ($epimoric_bitonal_twinscale_module__knob1),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_bitonal_twinscale_module))
					set_control_par(get_ui_id($epimoric_bitonal_twinscale_module__knob1),$CONTROL_PAR_POS_X, $epimoric_bitonal_module_panel_width - (88+92))
					set_control_par(get_ui_id($epimoric_bitonal_twinscale_module__knob1),$CONTROL_PAR_POS_Y,22+22)
					set_knob_label($epimoric_bitonal_twinscale_module__knob1,$epimoric_bitonal_twinscale_module__arg1)	
					set_text($epimoric_bitonal_twinscale_module__knob1,"i1")
				declare ui_knob $epimoric_bitonal_twinscale_module__knob2 (0, 127, 1)
					read_persistent_var($epimoric_bitonal_twinscale_module__arg2)
					declare $epimoric_bitonal_twinscale_module__knob2_orientation
						$epimoric_bitonal_twinscale_module__knob2_orientation := ($epimoric_bitonal_twinscale_module__knob2 * $number_of_pitch_classes) / 128
						if ($epimoric_bitonal_module_onoff = 1)
							$epimoric_bitonal_twinscale_module__knob2_orientation := $epimoric_bitonal_twinscale_module__knob2_orientation / 2
						end if
						make_persistent($epimoric_bitonal_twinscale_module__knob2_orientation)
						read_persistent_var($epimoric_bitonal_twinscale_module__knob2_orientation)
					$epimoric_bitonal_twinscale_module__knob2 := $epimoric_bitonal_twinscale_module__knob2_orientation
					set_control_par(get_ui_id ($epimoric_bitonal_twinscale_module__knob2),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_bitonal_twinscale_module))
					set_control_par(get_ui_id($epimoric_bitonal_twinscale_module__knob2),$CONTROL_PAR_POS_X, $epimoric_bitonal_module_panel_width - 88)
					set_control_par(get_ui_id($epimoric_bitonal_twinscale_module__knob2),$CONTROL_PAR_POS_Y,22+22)	
					set_knob_label($epimoric_bitonal_twinscale_module__knob2,$epimoric_bitonal_twinscale_module__arg2)	
					set_text($epimoric_bitonal_twinscale_module__knob2,"i2")




	{MODULATION (transposition) TAB:}

	{common note transposition module}
		declare $common_note_transposition_module_is_on
			$common_note_transposition_module_is_on := 1
			make_persistent($common_note_transposition_module_is_on)


		declare ~common_note_transposition_module_calculated_cents := 0.0
			make_persistent(~common_note_transposition_module_calculated_cents)
			read_persistent_var(~common_note_transposition_module_calculated_cents)
		declare $common_note_transposition_module_step_compensation := 0
			make_persistent($common_note_transposition_module_step_compensation)
			read_persistent_var($common_note_transposition_module_step_compensation)

		declare $common_note_transposition__previous_tonic_key := 69


		set_control_par(get_ui_id ($gui_panel__modulation_tab_transposition_common_note),$CONTROL_PAR_POS_X,49)
		set_control_par(get_ui_id ($gui_panel__modulation_tab_transposition_common_note),$CONTROL_PAR_POS_Y,60)

		declare $common_note_transposition_module_width
			$common_note_transposition_module_width := 548
		declare ui_label $label_transposition_common_note (4,1)
			set_text ($label_transposition_common_note," c o m m o n   n o t e   t r a n s p o s i t i o n   e n i g m a :")
			set_control_par(get_ui_id ($label_transposition_common_note),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab_transposition_common_note))
			set_control_par(get_ui_id ($label_transposition_common_note),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id ($label_transposition_common_note),$CONTROL_PAR_POS_Y,0)
			set_control_par(get_ui_id($label_transposition_common_note),$CONTROL_PAR_WIDTH,$common_note_transposition_module_width)

		declare ui_switch $switch_common_note_transposition_module
			set_control_par_str(get_ui_id($switch_common_note_transposition_module),$CONTROL_PAR_AUTOMATION_NAME,"switch_common_note_transposition_enigma")
			set_control_par_str(get_ui_id($switch_common_note_transposition_module), $CONTROL_PAR_TEXT, "common note transposition module ON/OFF switch")
			read_persistent_var($common_note_transposition_module_is_on)
			$switch_common_note_transposition_module := $common_note_transposition_module_is_on
			set_control_par(get_ui_id ($switch_common_note_transposition_module),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab_transposition_common_note))
			set_control_par(get_ui_id($switch_common_note_transposition_module),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id($switch_common_note_transposition_module),$CONTROL_PAR_POS_Y,20)
   			set_control_par(get_ui_id($switch_common_note_transposition_module), $CONTROL_PAR_WIDTH, $common_note_transposition_module_width)
    		set_control_par(get_ui_id($switch_common_note_transposition_module), $CONTROL_PAR_HEIGHT, 18)
			set_control_par(get_ui_id($switch_common_note_transposition_module), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
			select ($common_note_transposition_module_is_on)
				case 1
					set_control_par_str(get_ui_id($switch_common_note_transposition_module), $CONTROL_PAR_TEXT, "[ ON ]")
				case 0
					set_control_par_str(get_ui_id($switch_common_note_transposition_module), $CONTROL_PAR_TEXT, "[ off ]")
			end select

		declare const $panel__common_note_transposition__numofvars := 6
		declare %knobids__common_note_transposition__origin[$panel__common_note_transposition__numofvars]
		declare %knobids__common_note_transposition__target[$panel__common_note_transposition__numofvars]
		declare ui_knob $knob__common_note_transposition__origin_axis1(1,128,1)
		declare ui_knob $knob__common_note_transposition__target_axis1(1,128,1)
		declare ui_knob $knob__common_note_transposition__origin_axis2(1,128,1)
		declare ui_knob $knob__common_note_transposition__target_axis2(1,128,1)
		declare ui_knob $knob__common_note_transposition__origin_axis3(1,128,1)
		declare ui_knob $knob__common_note_transposition__target_axis3(1,128,1)
		declare ui_knob $knob__common_note_transposition__origin_axis4(1,128,1)
		declare ui_knob $knob__common_note_transposition__target_axis4(1,128,1)
		declare ui_knob $knob__common_note_transposition__origin_axis5(1,128,1)
		declare ui_knob $knob__common_note_transposition__target_axis5(1,128,1)
		declare ui_knob $knob__common_note_transposition__origin_axis6(1,128,1)
		declare ui_knob $knob__common_note_transposition__target_axis6(1,128,1)

			%knobids__common_note_transposition__origin[0] := get_ui_id($knob__common_note_transposition__origin_axis1)
			%knobids__common_note_transposition__origin[1] := get_ui_id($knob__common_note_transposition__origin_axis2)
			%knobids__common_note_transposition__origin[2] := get_ui_id($knob__common_note_transposition__origin_axis3)
			%knobids__common_note_transposition__origin[3] := get_ui_id($knob__common_note_transposition__origin_axis4)
			%knobids__common_note_transposition__origin[4] := get_ui_id($knob__common_note_transposition__origin_axis5)
			%knobids__common_note_transposition__origin[5] := get_ui_id($knob__common_note_transposition__origin_axis6)

			%knobids__common_note_transposition__target[0] := get_ui_id($knob__common_note_transposition__target_axis1)
			%knobids__common_note_transposition__target[1] := get_ui_id($knob__common_note_transposition__target_axis2)
			%knobids__common_note_transposition__target[2] := get_ui_id($knob__common_note_transposition__target_axis3)
			%knobids__common_note_transposition__target[3] := get_ui_id($knob__common_note_transposition__target_axis4)
			%knobids__common_note_transposition__target[4] := get_ui_id($knob__common_note_transposition__target_axis5)
			%knobids__common_note_transposition__target[5] := get_ui_id($knob__common_note_transposition__target_axis6)

			declare %panel__common_note_transposition__origin_axis_values[$panel__common_note_transposition__numofvars]
				$counter1 := 0
				while ($counter1 < $panel__common_note_transposition__numofvars)
					%panel__common_note_transposition__origin_axis_values[$counter1] := 69 + $counter1
					inc($counter1)
				end while
				make_persistent(%panel__common_note_transposition__origin_axis_values)
				read_persistent_var(%panel__common_note_transposition__origin_axis_values)
			declare %panel__common_note_transposition__target_axis_values[$panel__common_note_transposition__numofvars]
				$counter1 := 0
				while ($counter1 < $panel__common_note_transposition__numofvars)
					%panel__common_note_transposition__target_axis_values[$counter1] := 69 + $counter1
					inc($counter1)
				end while
				make_persistent(%panel__common_note_transposition__target_axis_values)
				read_persistent_var(%panel__common_note_transposition__target_axis_values)

			$counter1 := 0
			while ($counter1 < $panel__common_note_transposition__numofvars)
					set_control_par_str(%knobids__common_note_transposition__origin[$counter1],$CONTROL_PAR_AUTOMATION_NAME,"common_note_transposition_origin_axis" & $counter1 + 1)
					set_control_par(%knobids__common_note_transposition__origin[$counter1], $CONTROL_PAR_VALUE, %panel__common_note_transposition__origin_axis_values[$counter1])
					set_control_par(%knobids__common_note_transposition__origin[$counter1], $CONTROL_PAR_DEFAULT_VALUE, 72)

					set_control_par_str(%knobids__common_note_transposition__origin[$counter1], $CONTROL_PAR_TEXT, " origin" & $counter1 + 1)
					set_control_par(%knobids__common_note_transposition__origin[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab_transposition_common_note))
					set_control_par(%knobids__common_note_transposition__origin[$counter1],$CONTROL_PAR_POS_X,92*$counter1)
					set_control_par(%knobids__common_note_transposition__origin[$counter1],$CONTROL_PAR_POS_Y,20+22)

					set_control_par_str(%knobids__common_note_transposition__target[$counter1],$CONTROL_PAR_AUTOMATION_NAME,"common_note_transposition_target_axis" & $counter1 + 1)
					set_control_par(%knobids__common_note_transposition__target[$counter1], $CONTROL_PAR_VALUE,  %panel__common_note_transposition__target_axis_values[$counter1])
					set_control_par(%knobids__common_note_transposition__target[$counter1], $CONTROL_PAR_DEFAULT_VALUE, 72)
					set_control_par_str(%knobids__common_note_transposition__target[$counter1], $CONTROL_PAR_TEXT, " target" & $counter1 + 1)
					set_control_par(%knobids__common_note_transposition__target[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab_transposition_common_note))
					set_control_par(%knobids__common_note_transposition__target[$counter1],$CONTROL_PAR_POS_X,92*$counter1)
					set_control_par(%knobids__common_note_transposition__target[$counter1],$CONTROL_PAR_POS_Y,20+22+44)
				inc($counter1)
			end while








	if (1 = 1)

	{epimoric modulation module:}

		{declare epimoric module core variables:}
		declare $epimoric_module_is_on := 0
			make_persistent($epimoric_module_is_on)



		declare $epimoric_module_A__ouroboros_transposition := 0 {in "Epimoric Music" it was called harmoniaOdwracalna. It circulates between two states.}
			make_persistent($epimoric_module_A__ouroboros_transposition)
		declare $epimoric_module_A__dying_battery := 0
			make_persistent($epimoric_module_A__dying_battery)
		declare $epimoric_module_A__arg1 := 0
			make_persistent($epimoric_module_A__arg1)
		declare $epimoric_module_A__arg2 := 0
			make_persistent($epimoric_module_A__arg2)
		declare $epimoric_module_A__xtimes_backward := 0
			make_persistent($epimoric_module_A__xtimes_backward)
		declare $epimoric_module_A__xtimes_forward := 0
			make_persistent($epimoric_module_A__xtimes_forward)
		declare $epimoric_module_A__polish_mirror := 0 {when counting intervals from the top of the scale use the same intervals as from the bottom}
			make_persistent($epimoric_module_A__polish_mirror)
		


		declare $epimoric_module_B__ouroboros_transposition := 0
			make_persistent($epimoric_module_B__ouroboros_transposition)
		declare $epimoric_module_B__dying_battery := 0
			make_persistent($epimoric_module_B__dying_battery)
		declare $epimoric_module_B__arg1 := 0
			make_persistent($epimoric_module_B__arg1)
		declare $epimoric_module_B__arg2 := 0
			make_persistent($epimoric_module_B__arg2)
		declare $epimoric_module_B__xtimes_backward := 0
			make_persistent($epimoric_module_B__xtimes_backward)
		declare $epimoric_module_B__xtimes_forward := 0
			make_persistent($epimoric_module_B__xtimes_forward)
		declare $epimoric_module_B__polish_mirror := 0
			make_persistent($epimoric_module_B__polish_mirror)

		declare $epimoric_module_C__ouroboros_transposition := 0
			make_persistent($epimoric_module_C__ouroboros_transposition)
		declare $epimoric_module_C__dying_battery := 0
			make_persistent($epimoric_module_C__dying_battery)
		declare $epimoric_module_C__arg1 := 0
			make_persistent($epimoric_module_C__arg1)
		declare $epimoric_module_C__arg2 := 0
			make_persistent($epimoric_module_C__arg2)
		declare $epimoric_module_C__xtimes_backward := 0
			make_persistent($epimoric_module_C__xtimes_backward)
		declare $epimoric_module_C__xtimes_forward := 0
			make_persistent($epimoric_module_C__xtimes_forward)
		declare $epimoric_module_C__polish_mirror := 0
			make_persistent($epimoric_module_C__polish_mirror)

		{init default state of the epimoric module:}
			$epimoric_module_is_on := 1

			$epimoric_module_A__ouroboros_transposition := 0
			$epimoric_module_A__dying_battery := 0
			$epimoric_module_A__arg1 := 1
			$epimoric_module_A__arg2 := 0
			$epimoric_module_A__xtimes_backward := 0
			$epimoric_module_A__xtimes_forward := 0
			$epimoric_module_A__polish_mirror := 1


			$epimoric_module_B__ouroboros_transposition := 0
			$epimoric_module_B__dying_battery := 0
			$epimoric_module_B__arg1 := 0
			$epimoric_module_B__arg2 := 0
			$epimoric_module_B__xtimes_backward := 0
			$epimoric_module_B__xtimes_forward := 1
			$epimoric_module_B__polish_mirror := 1

			$epimoric_module_C__ouroboros_transposition := 1
			$epimoric_module_C__dying_battery := 0
			$epimoric_module_C__arg1 := 0
			$epimoric_module_C__arg2 := 0
			$epimoric_module_C__xtimes_backward := 0
			$epimoric_module_C__xtimes_forward := 0
			$epimoric_module_C__polish_mirror := 1


		{declare variables need for pure functionality of the func_epimoric_transposition:}

		{input parameters:}
		declare $eF__gradus1 := 0
		declare $eF__gradus2 := 0
		declare $eF__xtimes := 0
		declare $eF__ouroboros := 0
		declare $eF__dying_battery := 0
		declare $eF__polish_mirror := 0
		declare $eF__inlet_mirror_flag := 0

		{output parameters:}
		declare $eF__step_compensation := 0
		declare ~eF__root_transposition_cents := 0.0
		declare $eF__outlet_mirror_flag := 0

		{helper variables for func_epimoric_transposition: }
		declare $eF__temp_int := 0
		declare ~eF__temp_float := 0.0
		declare $eF__tuningContext_num_of_pitch_classes := 0
		declare ~eF__tuningContext_interval_of_equivalence := 0.0
		declare ~eF__tuningContext_gradus1_above_root := 0.0
		declare ~eF__tuningContext_gradus2_above_root := 0.0
		declare ~eF__tuningContext_gradus1_below_root := 0.0
		declare ~eF__tuningContext_gradus2_below_root := 0.0
		declare $eF__odd_step_compensation := 0
		declare ~eF__odd_root_transposition_cents := 0.0
		declare $eF__even_step_compensation := 0
		declare ~eF__even_root_transposition_cents := 0.0


		{declare epimoric modules helper variables:}

		declare ~epimoric_module__transposition_cents := 0.0
		declare $epimoric_module__step_compensation := 0
		declare $epimoric_module__mirror_flag := 0

		declare $epimoric_module_A__xtimes := 0
		declare $epimoric_module_A___mirror_flag {output scale from this module is flipped upside down}
			$epimoric_module_A___mirror_flag := 0 {LEGACY}
		declare $epimoric_module_A___inlet_inv_scale_flag
			$epimoric_module_A___inlet_inv_scale_flag := 0
		declare $epimoric_module_A___outlet_inv_scale_flag := 0
		declare ~epimoric_module_A___even_root_transposition_cents := 0.0
		declare $epimoric_module_A___even_step_compensation := 0
		declare ~epimoric_module_A___odd_root_transposition_cents := 0.0
		declare $epimoric_module_A___odd_step_compensation := 0
		declare ~epimoric_module_A___root_transposition_cents := 0.0
		declare $epimoric_module_A___step_compensation := 0

		declare $epimoric_module_B__xtimes := 0
		declare $epimoric_module_B___inlet_inv_scale_flag := 0
		declare $epimoric_module_B___outlet_inv_scale_flag := 0
		declare ~epimoric_module_B___even_root_transposition_cents := 0.0
		declare $epimoric_module_B___even_step_compensation := 0
		declare ~epimoric_module_B___odd_root_transposition_cents := 0.0
		declare $epimoric_module_B___odd_step_compensation := 0
		declare ~epimoric_module_B___root_transposition_cents := 0.0
		declare $epimoric_module_B___step_compensation := 0

		declare $epimoric_module_C__xtimes := 0
		declare $epimoric_module_C___inlet_inv_scale_flag := 0
		declare $epimoric_module_C___outlet_inv_scale_flag := 0
		declare ~epimoric_module_C___even_root_transposition_cents := 0.0
		declare $epimoric_module_C___even_step_compensation := 0
		declare ~epimoric_module_C___odd_root_transposition_cents := 0.0
		declare $epimoric_module_C___odd_step_compensation := 0
		declare ~epimoric_module_C___root_transposition_cents := 0.0
		declare $epimoric_module_C___step_compensation := 0
	end if

	if (1 = 1)

		{epimoric module gui spacing:}
		declare $epimoric_module_column_1_offset
			$epimoric_module_column_1_offset := 0
		declare $epimoric_module_column_2_offset
			$epimoric_module_column_2_offset := 92
		declare $epimoric_module_column_3_offset
			$epimoric_module_column_3_offset := 196
		declare $epimoric_module_column_4_offset
			$epimoric_module_column_4_offset := 288
		declare $epimoric_module_column_5_offset
			$epimoric_module_column_5_offset := 392
		declare $epimoric_module_column_6_offset
			$epimoric_module_column_6_offset := 484
		declare $epimoric_module_row_spacing
				$epimoric_module_row_spacing := 50
		declare $epimoric_module_controls_pos_y
		declare $epimoric_module_panel_pos_x {left indent}
				$epimoric_module_panel_pos_x := 25
		declare $epimoric_module_panel_pos_y
				$epimoric_module_panel_pos_y := 60

		{epimoric module gui elements:}
		declare ui_panel $gui_epimoric_module
			set_control_par(get_ui_id ($gui_epimoric_module),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab_transposition_epimoric))
			set_control_par(get_ui_id ($gui_epimoric_module),$CONTROL_PAR_POS_X,$epimoric_module_panel_pos_x)
			set_control_par(get_ui_id ($gui_epimoric_module),$CONTROL_PAR_POS_Y,$epimoric_module_panel_pos_y)

		declare ui_label $epimoric_module_label (4,1)
			set_text ($epimoric_module_label," e p i m o r i c    t r a n s p o s i t i o n    m o d u l e :")
			set_control_par(get_ui_id ($epimoric_module_label),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_epimoric_module))
			set_control_par(get_ui_id ($epimoric_module_label),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id ($epimoric_module_label),$CONTROL_PAR_POS_Y,0)
			set_control_par(get_ui_id($epimoric_module_label),$CONTROL_PAR_WIDTH,572)

		declare ui_switch $epimoric_module_onoff
			set_control_par_str(get_ui_id($epimoric_module_onoff),$CONTROL_PAR_AUTOMATION_NAME,"epimoric_transposition_switch")
			set_control_par_str(get_ui_id($epimoric_module_onoff), $CONTROL_PAR_TEXT, "epimoric module ON/OFF switch")
			read_persistent_var($epimoric_module_is_on)
			$epimoric_module_onoff := $epimoric_module_is_on
			set_control_par(get_ui_id ($epimoric_module_onoff),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_epimoric_module))
			set_control_par(get_ui_id($epimoric_module_onoff),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id($epimoric_module_onoff),$CONTROL_PAR_POS_Y,20)
   			set_control_par(get_ui_id($epimoric_module_onoff), $CONTROL_PAR_WIDTH, 572)
    		set_control_par(get_ui_id($epimoric_module_onoff), $CONTROL_PAR_HEIGHT, 18)
			set_control_par(get_ui_id($epimoric_module_onoff), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
			select ($epimoric_module_is_on)
				case 1
					set_control_par_str(get_ui_id($epimoric_module_onoff), $CONTROL_PAR_TEXT, "[ ON ]")
				case 0
					set_control_par_str(get_ui_id($epimoric_module_onoff), $CONTROL_PAR_TEXT, "[ off ]")
			end select


		{init epimoric_module_A:}

		declare ui_panel $epimoric_module_A
			set_control_par(get_ui_id ($epimoric_module_A),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_epimoric_module))
			set_control_par(get_ui_id($epimoric_module_A),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id($epimoric_module_A),$CONTROL_PAR_POS_Y,$epimoric_module_row_spacing*1)	

			declare ui_switch $epimoric_module_A__switch1
				set_control_par_str(get_ui_id($epimoric_module_A__switch1), $CONTROL_PAR_TEXT, "360")
				read_persistent_var($epimoric_module_A__ouroboros_transposition)
				$epimoric_module_A__switch1 := $epimoric_module_A__ouroboros_transposition
				select ($epimoric_module_A__switch1)
					case 0
						set_control_par_str(get_ui_id($epimoric_module_A__switch1), $CONTROL_PAR_TEXT, "[ progression ]")
					case 1
						set_control_par_str(get_ui_id($epimoric_module_A__switch1), $CONTROL_PAR_TEXT, "[ Ouroboros ]")
				end select
				set_control_par(get_ui_id ($epimoric_module_A__switch1),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_A))
				set_control_par(get_ui_id($epimoric_module_A__switch1),$CONTROL_PAR_POS_X,$epimoric_module_column_1_offset)
				set_control_par(get_ui_id($epimoric_module_A__switch1),$CONTROL_PAR_POS_Y,0)	
				set_control_par(get_ui_id($epimoric_module_A__switch1), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
			declare ui_switch $epimoric_module_A__switch2
				set_control_par_str(get_ui_id($epimoric_module_A__switch2), $CONTROL_PAR_TEXT, "vanilla/spicy")
				read_persistent_var($epimoric_module_A__dying_battery)
				$epimoric_module_A__switch2 := $epimoric_module_A__dying_battery
				select ($epimoric_module_A__switch2)
					case 0
						set_control_par_str(get_ui_id($epimoric_module_A__switch2), $CONTROL_PAR_TEXT, "( vanilla )")
					case 1
						set_control_par_str(get_ui_id($epimoric_module_A__switch2), $CONTROL_PAR_TEXT, "<  spicy  >")
				end select
				set_control_par(get_ui_id ($epimoric_module_A__switch2),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_A))
				set_control_par(get_ui_id($epimoric_module_A__switch2),$CONTROL_PAR_POS_X,$epimoric_module_column_2_offset)
				set_control_par(get_ui_id($epimoric_module_A__switch2),$CONTROL_PAR_POS_Y,0)	
				set_control_par(get_ui_id($epimoric_module_A__switch2), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
			declare ui_switch $epimoric_module_A__switch3
				set_control_par_str(get_ui_id($epimoric_module_A__switch3), $CONTROL_PAR_TEXT, "polish mirror")
				read_persistent_var($epimoric_module_A__polish_mirror)
				$epimoric_module_A__switch3 := $epimoric_module_A__polish_mirror
				select ($epimoric_module_A__switch3)
					case 0
						set_control_par_str(get_ui_id($epimoric_module_A__switch3), $CONTROL_PAR_TEXT, "[ fake mirror ]")
					case 1
						set_control_par_str(get_ui_id($epimoric_module_A__switch3), $CONTROL_PAR_TEXT, "[ true mirror ]")
				end select
				set_control_par(get_ui_id ($epimoric_module_A__switch3),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_A))
				set_control_par(get_ui_id($epimoric_module_A__switch3),$CONTROL_PAR_POS_X,$epimoric_module_column_1_offset)
				set_control_par(get_ui_id($epimoric_module_A__switch3),$CONTROL_PAR_POS_Y,18)	
				set_control_par(get_ui_id($epimoric_module_A__switch3), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
			declare ui_knob $epimoric_module_A__knob1 (0, 127, 1)
				read_persistent_var($epimoric_module_A__arg1)
				declare $epimoric_module_A__knob1_orientation
					$epimoric_module_A__knob1_orientation := $epimoric_module_A__arg1 * 128 / $number_of_pitch_classes
					make_persistent($epimoric_module_A__knob1_orientation)
					read_persistent_var($epimoric_module_A__knob1_orientation)
				$epimoric_module_A__knob1 := $epimoric_module_A__knob1_orientation
				set_control_par(get_ui_id ($epimoric_module_A__knob1),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_A))
				set_control_par(get_ui_id($epimoric_module_A__knob1),$CONTROL_PAR_POS_X,$epimoric_module_column_3_offset)
				set_control_par(get_ui_id($epimoric_module_A__knob1),$CONTROL_PAR_POS_Y,0)
				set_knob_label($epimoric_module_A__knob1,$epimoric_module_A__arg1)	
				set_text($epimoric_module_A__knob1,"i1")
			declare ui_knob $epimoric_module_A__knob2 (0, 127, 1)
				read_persistent_var($epimoric_module_A__arg2)
				declare $epimoric_module_A__knob2_orientation
					$epimoric_module_A__knob2_orientation := $epimoric_module_A__arg2 * 128 / $number_of_pitch_classes
					make_persistent($epimoric_module_A__knob2_orientation)
					read_persistent_var($epimoric_module_A__knob2_orientation)
				$epimoric_module_A__knob2 := $epimoric_module_A__knob2_orientation
				set_control_par(get_ui_id ($epimoric_module_A__knob2),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_A))
				set_control_par(get_ui_id($epimoric_module_A__knob2),$CONTROL_PAR_POS_X,$epimoric_module_column_4_offset)
				set_control_par(get_ui_id($epimoric_module_A__knob2),$CONTROL_PAR_POS_Y,0)	
				set_knob_label($epimoric_module_A__knob2,$epimoric_module_A__arg2)	
				set_text($epimoric_module_A__knob2,"i2")
			declare ui_knob $epimoric_module_A__knob3 (0, 127, -1)
				read_persistent_var($epimoric_module_A__xtimes_backward)
				$epimoric_module_A__knob3 := $epimoric_module_A__xtimes_backward
				set_control_par(get_ui_id ($epimoric_module_A__knob3),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_A))
				set_control_par(get_ui_id($epimoric_module_A__knob3),$CONTROL_PAR_POS_X,$epimoric_module_column_5_offset)
				set_control_par(get_ui_id($epimoric_module_A__knob3),$CONTROL_PAR_POS_Y,0)	
				set_text($epimoric_module_A__knob3,"  x_-")
				set_control_par(get_ui_id($epimoric_module_A__knob3), $CONTROL_PAR_DEFAULT_VALUE, 0)
			declare ui_knob $epimoric_module_A__knob4 (0, 127, 1)
				read_persistent_var($epimoric_module_A__xtimes_forward)
				$epimoric_module_A__knob4 := $epimoric_module_A__xtimes_forward
				set_control_par(get_ui_id ($epimoric_module_A__knob4),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_A))
				set_control_par(get_ui_id($epimoric_module_A__knob4),$CONTROL_PAR_POS_X,$epimoric_module_column_6_offset)
				set_control_par(get_ui_id($epimoric_module_A__knob4),$CONTROL_PAR_POS_Y,0)	
				set_text($epimoric_module_A__knob4,"  x_+")

		declare ui_panel $epimoric_module_B
			set_control_par(get_ui_id ($epimoric_module_B),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_epimoric_module))
			set_control_par(get_ui_id($epimoric_module_B),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id($epimoric_module_B),$CONTROL_PAR_POS_Y,$epimoric_module_row_spacing*2)	

			declare ui_switch $epimoric_module_B__switch1
				set_control_par_str(get_ui_id($epimoric_module_B__switch1), $CONTROL_PAR_TEXT, "360")
				read_persistent_var($epimoric_module_B__ouroboros_transposition)
				$epimoric_module_B__switch1 := $epimoric_module_B__ouroboros_transposition
				select ($epimoric_module_B__switch1)
					case 0
						set_control_par_str(get_ui_id($epimoric_module_B__switch1), $CONTROL_PAR_TEXT, "[ progression ]")
					case 1
						set_control_par_str(get_ui_id($epimoric_module_B__switch1), $CONTROL_PAR_TEXT, "[ Ouroboros ]")
				end select
				set_control_par(get_ui_id ($epimoric_module_B__switch1),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_B))
				set_control_par(get_ui_id($epimoric_module_B__switch1),$CONTROL_PAR_POS_X,$epimoric_module_column_1_offset)
				set_control_par(get_ui_id($epimoric_module_B__switch1),$CONTROL_PAR_POS_Y,0)	
				set_control_par(get_ui_id($epimoric_module_B__switch1), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
			declare ui_switch $epimoric_module_B__switch2
				set_control_par_str(get_ui_id($epimoric_module_B__switch2), $CONTROL_PAR_TEXT, "vanilla/spicy")
				read_persistent_var($epimoric_module_B__dying_battery)
				$epimoric_module_B__switch2 := $epimoric_module_B__dying_battery
				select ($epimoric_module_B__switch2)
					case 0
						set_control_par_str(get_ui_id($epimoric_module_B__switch2), $CONTROL_PAR_TEXT, "( vanilla )")
					case 1
						set_control_par_str(get_ui_id($epimoric_module_B__switch2), $CONTROL_PAR_TEXT, "<  spicy  >")
				end select
				set_control_par(get_ui_id ($epimoric_module_B__switch2),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_B))
				set_control_par(get_ui_id($epimoric_module_B__switch2),$CONTROL_PAR_POS_X,$epimoric_module_column_2_offset)
				set_control_par(get_ui_id($epimoric_module_B__switch2),$CONTROL_PAR_POS_Y,0)	
				set_control_par(get_ui_id($epimoric_module_B__switch2), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
			declare ui_switch $epimoric_module_B__switch3
				set_control_par_str(get_ui_id($epimoric_module_B__switch3), $CONTROL_PAR_TEXT, "polish mirror")
				read_persistent_var($epimoric_module_B__polish_mirror)
				$epimoric_module_B__switch3 := $epimoric_module_B__polish_mirror
				select ($epimoric_module_B__switch3)
					case 0
						set_control_par_str(get_ui_id($epimoric_module_B__switch3), $CONTROL_PAR_TEXT, "[ fake mirror ]")
					case 1
						set_control_par_str(get_ui_id($epimoric_module_B__switch3), $CONTROL_PAR_TEXT, "[ true mirror ]")
				end select
				set_control_par(get_ui_id ($epimoric_module_B__switch3),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_B))
				set_control_par(get_ui_id($epimoric_module_B__switch3),$CONTROL_PAR_POS_X,$epimoric_module_column_1_offset)
				set_control_par(get_ui_id($epimoric_module_B__switch3),$CONTROL_PAR_POS_Y,18)	
				set_control_par(get_ui_id($epimoric_module_B__switch3), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
			declare ui_knob $epimoric_module_B__knob1 (0, 127, 1)
				read_persistent_var($epimoric_module_B__arg1)
				declare $epimoric_module_B__knob1_orientation
					$epimoric_module_B__knob1_orientation := $epimoric_module_B__arg1 * 128 / $number_of_pitch_classes
					make_persistent($epimoric_module_B__knob1_orientation)
					read_persistent_var($epimoric_module_B__knob1_orientation)
				$epimoric_module_B__knob1 := $epimoric_module_B__knob1_orientation
				set_control_par(get_ui_id ($epimoric_module_B__knob1),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_B))
				set_control_par(get_ui_id($epimoric_module_B__knob1),$CONTROL_PAR_POS_X,$epimoric_module_column_3_offset)
				set_control_par(get_ui_id($epimoric_module_B__knob1),$CONTROL_PAR_POS_Y,0)
				set_knob_label($epimoric_module_B__knob1,$epimoric_module_B__arg1)	
				set_text($epimoric_module_B__knob1,"i1")
			declare ui_knob $epimoric_module_B__knob2 (0, 127, 1)
				read_persistent_var($epimoric_module_B__arg2)
				declare $epimoric_module_B__knob2_orientation
					$epimoric_module_B__knob2_orientation := $epimoric_module_B__arg2 * 128 / $number_of_pitch_classes
					make_persistent($epimoric_module_B__knob2_orientation)
					read_persistent_var($epimoric_module_B__knob2_orientation)
				$epimoric_module_B__knob2 := $epimoric_module_B__knob2_orientation
				set_control_par(get_ui_id ($epimoric_module_B__knob2),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_B))
				set_control_par(get_ui_id($epimoric_module_B__knob2),$CONTROL_PAR_POS_X,$epimoric_module_column_4_offset)
				set_control_par(get_ui_id($epimoric_module_B__knob2),$CONTROL_PAR_POS_Y,0)	
				set_knob_label($epimoric_module_B__knob2,$epimoric_module_B__arg2)	
				set_text($epimoric_module_B__knob2,"i2")
			declare ui_knob $epimoric_module_B__knob3 (0, 127, -1)
				read_persistent_var($epimoric_module_B__xtimes_backward)
				$epimoric_module_B__knob3 := $epimoric_module_B__xtimes_backward
				set_control_par(get_ui_id ($epimoric_module_B__knob3),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_B))
				set_control_par(get_ui_id($epimoric_module_B__knob3),$CONTROL_PAR_POS_X,$epimoric_module_column_5_offset)
				set_control_par(get_ui_id($epimoric_module_B__knob3),$CONTROL_PAR_POS_Y,0)	
				set_text($epimoric_module_B__knob3,"  x_-")
				set_control_par(get_ui_id($epimoric_module_B__knob3), $CONTROL_PAR_DEFAULT_VALUE, 0)
			declare ui_knob $epimoric_module_B__knob4 (0, 127, 1)
				read_persistent_var($epimoric_module_B__xtimes_forward)
				$epimoric_module_B__knob4 := $epimoric_module_B__xtimes_forward
				set_control_par(get_ui_id ($epimoric_module_B__knob4),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_B))
				set_control_par(get_ui_id($epimoric_module_B__knob4),$CONTROL_PAR_POS_X,$epimoric_module_column_6_offset)
				set_control_par(get_ui_id($epimoric_module_B__knob4),$CONTROL_PAR_POS_Y,0)	
				set_text($epimoric_module_B__knob4,"  x_+")

		declare ui_panel $epimoric_module_C
			set_control_par(get_ui_id ($epimoric_module_C),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_epimoric_module))
			set_control_par(get_ui_id($epimoric_module_C),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id($epimoric_module_C),$CONTROL_PAR_POS_Y,$epimoric_module_row_spacing*3)	

			declare ui_switch $epimoric_module_C__switch1
				set_control_par_str(get_ui_id($epimoric_module_C__switch1), $CONTROL_PAR_TEXT, "360")
				read_persistent_var($epimoric_module_C__ouroboros_transposition)
				$epimoric_module_C__switch1 := $epimoric_module_C__ouroboros_transposition
				select ($epimoric_module_C__switch1)
					case 0
						set_control_par_str(get_ui_id($epimoric_module_C__switch1), $CONTROL_PAR_TEXT, "[ progression ]")
					case 1
						set_control_par_str(get_ui_id($epimoric_module_C__switch1), $CONTROL_PAR_TEXT, "[ Ouroboros ]")
				end select
				set_control_par(get_ui_id ($epimoric_module_C__switch1),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_C))
				set_control_par(get_ui_id($epimoric_module_C__switch1),$CONTROL_PAR_POS_X,$epimoric_module_column_1_offset)
				set_control_par(get_ui_id($epimoric_module_C__switch1),$CONTROL_PAR_POS_Y,0)	
				set_control_par(get_ui_id($epimoric_module_C__switch1), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
			declare ui_switch $epimoric_module_C__switch2
				set_control_par_str(get_ui_id($epimoric_module_C__switch2), $CONTROL_PAR_TEXT, "vanilla/spicy")
				read_persistent_var($epimoric_module_C__dying_battery)
				$epimoric_module_C__switch2 := $epimoric_module_C__dying_battery
				select ($epimoric_module_C__switch2)
					case 0
						set_control_par_str(get_ui_id($epimoric_module_C__switch2), $CONTROL_PAR_TEXT, "( vanilla )")
					case 1
						set_control_par_str(get_ui_id($epimoric_module_C__switch2), $CONTROL_PAR_TEXT, "<  spicy  >")
				end select
				set_control_par(get_ui_id ($epimoric_module_C__switch2),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_C))
				set_control_par(get_ui_id($epimoric_module_C__switch2),$CONTROL_PAR_POS_X,$epimoric_module_column_2_offset)
				set_control_par(get_ui_id($epimoric_module_C__switch2),$CONTROL_PAR_POS_Y,0)	
				set_control_par(get_ui_id($epimoric_module_C__switch2), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
			declare ui_switch $epimoric_module_C__switch3
				set_control_par_str(get_ui_id($epimoric_module_C__switch3), $CONTROL_PAR_TEXT, "polish mirror")
				read_persistent_var($epimoric_module_C__polish_mirror)
				$epimoric_module_C__switch3 := $epimoric_module_C__polish_mirror
				select ($epimoric_module_C__switch3)
					case 0
						set_control_par_str(get_ui_id($epimoric_module_C__switch3), $CONTROL_PAR_TEXT, "[ fake mirror ]")
					case 1
						set_control_par_str(get_ui_id($epimoric_module_C__switch3), $CONTROL_PAR_TEXT, "[ true mirror ]")
				end select
				set_control_par(get_ui_id ($epimoric_module_C__switch3),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_C))
				set_control_par(get_ui_id($epimoric_module_C__switch3),$CONTROL_PAR_POS_X,$epimoric_module_column_1_offset)
				set_control_par(get_ui_id($epimoric_module_C__switch3),$CONTROL_PAR_POS_Y,18)	
				set_control_par(get_ui_id($epimoric_module_C__switch3), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
			declare ui_knob $epimoric_module_C__knob1 (0, 127, 1)
				read_persistent_var($epimoric_module_C__arg1)
				declare $epimoric_module_C__knob1_orientation
					$epimoric_module_C__knob1_orientation := $epimoric_module_C__arg1 * 128 / $number_of_pitch_classes
					make_persistent($epimoric_module_C__knob1_orientation)
					read_persistent_var($epimoric_module_C__knob1_orientation)
				$epimoric_module_C__knob1 := $epimoric_module_C__knob1_orientation
				set_control_par(get_ui_id ($epimoric_module_C__knob1),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_C))
				set_control_par(get_ui_id($epimoric_module_C__knob1),$CONTROL_PAR_POS_X,$epimoric_module_column_3_offset)
				set_control_par(get_ui_id($epimoric_module_C__knob1),$CONTROL_PAR_POS_Y,0)
				set_knob_label($epimoric_module_C__knob1,$epimoric_module_C__arg1)	
				set_text($epimoric_module_C__knob1,"i1")
			declare ui_knob $epimoric_module_C__knob2 (0, 127, 1)
				read_persistent_var($epimoric_module_C__arg2)
				declare $epimoric_module_C__knob2_orientation
					$epimoric_module_C__knob2_orientation := $epimoric_module_C__arg2 * 128 / $number_of_pitch_classes
					make_persistent($epimoric_module_C__knob2_orientation)
					read_persistent_var($epimoric_module_C__knob2_orientation)
				$epimoric_module_C__knob2 := $epimoric_module_C__knob2_orientation
				set_control_par(get_ui_id ($epimoric_module_C__knob2),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_C))
				set_control_par(get_ui_id($epimoric_module_C__knob2),$CONTROL_PAR_POS_X,$epimoric_module_column_4_offset)
				set_control_par(get_ui_id($epimoric_module_C__knob2),$CONTROL_PAR_POS_Y,0)	
				set_knob_label($epimoric_module_C__knob2,$epimoric_module_C__arg2)	
				set_text($epimoric_module_C__knob2,"i2")
			declare ui_knob $epimoric_module_C__knob3 (0, 127, -1)
				read_persistent_var($epimoric_module_C__xtimes_backward)
				$epimoric_module_C__knob3 := $epimoric_module_C__xtimes_backward
				set_control_par(get_ui_id ($epimoric_module_C__knob3),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_C))
				set_control_par(get_ui_id($epimoric_module_C__knob3),$CONTROL_PAR_POS_X,$epimoric_module_column_5_offset)
				set_control_par(get_ui_id($epimoric_module_C__knob3),$CONTROL_PAR_POS_Y,0)	
				set_text($epimoric_module_C__knob3,"  x_-")
				set_control_par(get_ui_id($epimoric_module_C__knob3), $CONTROL_PAR_DEFAULT_VALUE, 0)
			declare ui_knob $epimoric_module_C__knob4 (0, 127, 1)
				read_persistent_var($epimoric_module_C__xtimes_forward)
				$epimoric_module_C__knob4 := $epimoric_module_C__xtimes_forward
				set_control_par(get_ui_id ($epimoric_module_C__knob4),$CONTROL_PAR_PARENT_PANEL,get_ui_id($epimoric_module_C))
				set_control_par(get_ui_id($epimoric_module_C__knob4),$CONTROL_PAR_POS_X,$epimoric_module_column_6_offset)
				set_control_par(get_ui_id($epimoric_module_C__knob4),$CONTROL_PAR_POS_Y,0)	
				set_text($epimoric_module_C__knob4,"  x_+")

	end if


	{transposition by interval module}


	{transpose by interval module $gui_panel__modulation_tab_transposition_interval}

		if (1 = 1)
			declare $transpositionbyinterval__compound_step_transposition := 0
			declare ~transpositionbyinterval__compound_cent_transposition := 0.0
			declare ~transpositionbyinterval__module_transposition := 0.0
			declare const $panel__transpositionbyinterval__numoftemplatepars := 7
			declare const $panel__transpositionbyinterval__numofmodules := 5
			declare const $panel__transpositionbyinterval__numofknobs := 6
			set_control_par(get_ui_id ($gui_panel__modulation_tab_transposition_interval),$CONTROL_PAR_POS_X,14)
			set_control_par(get_ui_id ($gui_panel__modulation_tab_transposition_interval),$CONTROL_PAR_POS_Y,60)
			declare $panel__transpositionbyinterval_column_width := 90
			declare $panel__transpositionbyinterval_top_margin := 12
			declare $panel__transpositionbyinterval_knob_indent := 50
			declare $panel__transpositionbyinterval_segment_height := 22
			declare $panel__transpositionbyinterval_switch_width := 40
			declare $panel__transpositionbyinterval_width
			$panel__transpositionbyinterval_width := $panel__transpositionbyinterval_knob_indent + ($panel__transpositionbyinterval_column_width * $panel__transpositionbyinterval__numofknobs)

			declare %ids_panel__transpositionbyinterval[($panel__transpositionbyinterval__numoftemplatepars+1) * $panel__transpositionbyinterval__numofmodules]

			declare %panel__transpositionbyinterval__state[$panel__transpositionbyinterval__numoftemplatepars * $panel__transpositionbyinterval__numofmodules] := ( ...
											0,1,1,1,1,1,0, ...
											0,1,1,1,1,1,0, ...
											0,1,1,1,1,1,0, ...
											0,1,1,1,1,1,0, ...
											0,1,1,1,1,1,0  )
				make_persistent(%panel__transpositionbyinterval__state)
				read_persistent_var(%panel__transpositionbyinterval__state)
			declare $transpositionbyinterval_panel_index := 0
			declare $transpositionbyinterval_var_index := 0

			declare ui_label $label_transpositionbyinterval (1,1)
				set_text ($label_transpositionbyinterval," t r a n s p o s e   b y   i n t e r v a l s :")
				set_control_par(get_ui_id($label_transpositionbyinterval),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab_transposition_interval))
				set_control_par(get_ui_id($label_transpositionbyinterval),$CONTROL_PAR_WIDTH, $panel__transpositionbyinterval_width - 2)
				set_control_par(get_ui_id($label_transpositionbyinterval),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id($label_transpositionbyinterval),$CONTROL_PAR_POS_Y,0)


			declare ui_panel $panel__transpositionbyinterval_module_A
			declare ui_switch $switch__transpositionbyinterval_panel_A
			declare ui_knob $knob__transpositionbyinterval_panel_A_iterations(-63,64,1)
			declare ui_knob $knob__transpositionbyinterval_panel_A_numerator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_A_denominator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_A_power_numerator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_A_power_denominator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_A_step_compensation(-63,64,1)

			declare ui_panel $panel__transpositionbyinterval_module_B
			declare ui_switch $switch__transpositionbyinterval_panel_B
			declare ui_knob $knob__transpositionbyinterval_panel_B_iterations(-63,64,1)
			declare ui_knob $knob__transpositionbyinterval_panel_B_numerator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_B_denominator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_B_power_numerator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_B_power_denominator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_B_step_compensation(-63,64,1)

			declare ui_panel $panel__transpositionbyinterval_module_C
			declare ui_switch $switch__transpositionbyinterval_panel_C
			declare ui_knob $knob__transpositionbyinterval_panel_C_iterations(-63,64,1)
			declare ui_knob $knob__transpositionbyinterval_panel_C_numerator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_C_denominator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_C_power_numerator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_C_power_denominator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_C_step_compensation(-63,64,1)

			declare ui_panel $panel__transpositionbyinterval_module_D
			declare ui_switch $switch__transpositionbyinterval_panel_D
			declare ui_knob $knob__transpositionbyinterval_panel_D_iterations(-63,64,1)
			declare ui_knob $knob__transpositionbyinterval_panel_D_numerator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_D_denominator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_D_power_numerator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_D_power_denominator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_D_step_compensation(-63,64,1)

			declare ui_panel $panel__transpositionbyinterval_module_E
			declare ui_switch $switch__transpositionbyinterval_panel_E
			declare ui_knob $knob__transpositionbyinterval_panel_E_iterations(-63,64,1)
			declare ui_knob $knob__transpositionbyinterval_panel_E_numerator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_E_denominator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_E_power_numerator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_E_power_denominator(1,128,1)
			declare ui_knob $knob__transpositionbyinterval_panel_E_step_compensation(-63,64,1)


			$counter1 := 0
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+0] := get_ui_id($panel__transpositionbyinterval_module_A)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+1] := get_ui_id($switch__transpositionbyinterval_panel_A)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+2] := get_ui_id($knob__transpositionbyinterval_panel_A_iterations)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+3] := get_ui_id($knob__transpositionbyinterval_panel_A_numerator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+4] := get_ui_id($knob__transpositionbyinterval_panel_A_denominator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+5] := get_ui_id($knob__transpositionbyinterval_panel_A_power_numerator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+6] := get_ui_id($knob__transpositionbyinterval_panel_A_power_denominator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+7] := get_ui_id($knob__transpositionbyinterval_panel_A_step_compensation)
			inc($counter1)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+0] := get_ui_id($panel__transpositionbyinterval_module_B)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+1] := get_ui_id($switch__transpositionbyinterval_panel_B)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+2] := get_ui_id($knob__transpositionbyinterval_panel_B_iterations)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+3] := get_ui_id($knob__transpositionbyinterval_panel_B_numerator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+4] := get_ui_id($knob__transpositionbyinterval_panel_B_denominator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+5] := get_ui_id($knob__transpositionbyinterval_panel_B_power_numerator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+6] := get_ui_id($knob__transpositionbyinterval_panel_B_power_denominator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+7] := get_ui_id($knob__transpositionbyinterval_panel_B_step_compensation)
			inc($counter1)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+0] := get_ui_id($panel__transpositionbyinterval_module_C)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+1] := get_ui_id($switch__transpositionbyinterval_panel_C)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+2] := get_ui_id($knob__transpositionbyinterval_panel_C_iterations)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+3] := get_ui_id($knob__transpositionbyinterval_panel_C_numerator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+4] := get_ui_id($knob__transpositionbyinterval_panel_C_denominator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+5] := get_ui_id($knob__transpositionbyinterval_panel_C_power_numerator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+6] := get_ui_id($knob__transpositionbyinterval_panel_C_power_denominator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+7] := get_ui_id($knob__transpositionbyinterval_panel_C_step_compensation)
			inc($counter1)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+0] := get_ui_id($panel__transpositionbyinterval_module_D)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+1] := get_ui_id($switch__transpositionbyinterval_panel_D)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+2] := get_ui_id($knob__transpositionbyinterval_panel_D_iterations)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+3] := get_ui_id($knob__transpositionbyinterval_panel_D_numerator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+4] := get_ui_id($knob__transpositionbyinterval_panel_D_denominator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+5] := get_ui_id($knob__transpositionbyinterval_panel_D_power_numerator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+6] := get_ui_id($knob__transpositionbyinterval_panel_D_power_denominator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+7] := get_ui_id($knob__transpositionbyinterval_panel_D_step_compensation)
			inc($counter1)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+0] := get_ui_id($panel__transpositionbyinterval_module_E)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+1] := get_ui_id($switch__transpositionbyinterval_panel_E)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+2] := get_ui_id($knob__transpositionbyinterval_panel_E_iterations)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+3] := get_ui_id($knob__transpositionbyinterval_panel_E_numerator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+4] := get_ui_id($knob__transpositionbyinterval_panel_E_denominator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+5] := get_ui_id($knob__transpositionbyinterval_panel_E_power_numerator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+6] := get_ui_id($knob__transpositionbyinterval_panel_E_power_denominator)
			%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+7] := get_ui_id($knob__transpositionbyinterval_panel_E_step_compensation)


			$counter1 := 0
				while ($counter1 < $panel__transpositionbyinterval__numofmodules)
				   {init panels}
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1) + 0 ],$CONTROL_PAR_PARENT_PANEL, get_ui_id ($gui_panel__modulation_tab_transposition_interval))
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1) + 0],$CONTROL_PAR_POS_X, 0)
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1) + 0],$CONTROL_PAR_POS_Y, $panel__transpositionbyinterval_top_margin + ($panel__transpositionbyinterval_segment_height * $counter1))
					inc($counter1)
				end while
				$counter1 := 0
				while ($counter1 < $panel__transpositionbyinterval__numofmodules) {$counter1 = panel index}
					{init switches}
					set_control_par_str (%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+1],$CONTROL_PAR_AUTOMATION_NAME,"transpose_by_interval__panel_" & $counter1 + 1)
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+1], $CONTROL_PAR_DEFAULT_VALUE, 0)
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+1], $CONTROL_PAR_VALUE, %panel__transpositionbyinterval__state[$counter1 * $panel__transpositionbyinterval__numoftemplatepars + 0])
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+1],$CONTROL_PAR_PARENT_PANEL, %ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+0])
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+1] ,$CONTROL_PAR_WIDTH, $panel__transpositionbyinterval_switch_width)
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+1],$CONTROL_PAR_POS_X, 0)
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+1] ,$CONTROL_PAR_POS_Y, $panel__transpositionbyinterval_top_margin  + ($panel__transpositionbyinterval_segment_height * $counter1) + 10)
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+1],$CONTROL_PAR_TEXT_ALIGNMENT, 1)
					select (get_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+1], $CONTROL_PAR_VALUE))
						case 0
							set_control_par_str(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+1],$CONTROL_PAR_TEXT, "[ off ]")
						case 1
							set_control_par_str(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+1],$CONTROL_PAR_TEXT, "[ ON ]")
					end select
				   {init knobs}
				   	$counter2 := 0
				   	while ($counter2 < $panel__transpositionbyinterval__numofknobs)
				   		set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+2+$counter2],$CONTROL_PAR_PARENT_PANEL, %ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+0])
						set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+2+$counter2],$CONTROL_PAR_POS_X, $panel__transpositionbyinterval_knob_indent + ($panel__transpositionbyinterval_column_width*$counter2))
						set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+2+$counter2],$CONTROL_PAR_POS_Y, $panel__transpositionbyinterval_top_margin + ($panel__transpositionbyinterval_segment_height * $counter1))
				   		inc($counter2)
				   	end while
					set_control_par_str(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+2],$CONTROL_PAR_AUTOMATION_NAME,"transposition_iterations")
					set_control_par_str(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+2],$CONTROL_PAR_TEXT, "  iter")
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+2],$CONTROL_PAR_DEFAULT_VALUE, 0)
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+2], $CONTROL_PAR_VALUE, %panel__transpositionbyinterval__state[$counter1 * $panel__transpositionbyinterval__numoftemplatepars + 1])

					set_control_par_str(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+3],$CONTROL_PAR_AUTOMATION_NAME,"transposition_interval_numerator")
					set_control_par_str(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+3],$CONTROL_PAR_TEXT, "   *")
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+3],$CONTROL_PAR_DEFAULT_VALUE, 0)
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+3], $CONTROL_PAR_VALUE, %panel__transpositionbyinterval__state[$counter1 * $panel__transpositionbyinterval__numoftemplatepars + 2])

					set_control_par_str(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+4],$CONTROL_PAR_AUTOMATION_NAME,"transposition_interval_denominator")
					set_control_par_str(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+4],$CONTROL_PAR_TEXT, "  /")
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+4],$CONTROL_PAR_DEFAULT_VALUE, 0)
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+4], $CONTROL_PAR_VALUE, %panel__transpositionbyinterval__state[$counter1 * $panel__transpositionbyinterval__numoftemplatepars + 3])

					set_control_par_str(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+5],$CONTROL_PAR_AUTOMATION_NAME,"transposition_interval_power_numerator")
					set_control_par_str(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+5],$CONTROL_PAR_TEXT, "  exp")
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+5],$CONTROL_PAR_DEFAULT_VALUE, 0)
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+5], $CONTROL_PAR_VALUE, %panel__transpositionbyinterval__state[$counter1 * $panel__transpositionbyinterval__numoftemplatepars + 4])

					set_control_par_str(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+6],$CONTROL_PAR_AUTOMATION_NAME,"transposition_interval_power_denominator")
					set_control_par_str(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+6],$CONTROL_PAR_TEXT, "  root")
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+6],$CONTROL_PAR_DEFAULT_VALUE, 0)
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+6], $CONTROL_PAR_VALUE, %panel__transpositionbyinterval__state[$counter1 * $panel__transpositionbyinterval__numoftemplatepars + 5])

					set_control_par_str(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+7],$CONTROL_PAR_AUTOMATION_NAME,"transposition_step_compensation")
					set_control_par_str(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+7],$CONTROL_PAR_TEXT, " steps")
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+7],$CONTROL_PAR_DEFAULT_VALUE, 0)
					set_control_par(%ids_panel__transpositionbyinterval[$counter1*($panel__transpositionbyinterval__numoftemplatepars+1)+7], $CONTROL_PAR_VALUE, %panel__transpositionbyinterval__state[$counter1 * $panel__transpositionbyinterval__numoftemplatepars + 6])

					inc($counter1)
				end while

		end if


		{transposition - whammy module}

		if (1=1)

			set_control_par(get_ui_id ($gui_panel__modulation_tab_transposition_whammy),$CONTROL_PAR_POS_X,42)
			set_control_par(get_ui_id ($gui_panel__modulation_tab_transposition_whammy),$CONTROL_PAR_POS_Y,60)

			declare ~whammy_module_panel_transposition_cents := 0.0
			declare ~whammy_module_compound_transposition_cents := 0.0
			declare const $panel__whammy__numofmodules := 5
			declare const $panel__whammy__numofknobs := 6
			declare $panel__whammy_column_width := 92
			declare $panel__whammy_knobpanels_top_margin := 42
			declare $panel__whammy_segment_height := 44
			declare $panel__whammy_width
			$panel__whammy_width := ($panel__whammy_column_width * $panel__whammy__numofknobs)

			declare %ids_panel__whammy[($panel__whammy__numofknobs+1) * $panel__whammy__numofmodules + 1]

			declare %panel__whammy__state[$panel__whammy__numofknobs * $panel__whammy__numofmodules] := (1)
				make_persistent(%panel__whammy__state)
				read_persistent_var(%panel__whammy__state)

			declare ui_label $label_whammy (1,1)
				set_text ($label_whammy," t r a n s p o s i t i o n :")
				set_control_par(get_ui_id($label_whammy),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab_transposition_whammy))
				set_control_par(get_ui_id($label_whammy),$CONTROL_PAR_WIDTH, $panel__whammy_width - 3)
				set_control_par(get_ui_id($label_whammy),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id($label_whammy),$CONTROL_PAR_POS_Y,0)

			declare ui_switch $whammy_module_onoff
				set_control_par_str(get_ui_id($whammy_module_onoff),$CONTROL_PAR_AUTOMATION_NAME,"whammy_transposition_switch")
				set_control_par_str(get_ui_id($whammy_module_onoff), $CONTROL_PAR_TEXT, "whammy module ON/OFF switch")
				$whammy_module_onoff := 0
				make_persistent($whammy_module_onoff)
				read_persistent_var($whammy_module_onoff)
				set_control_par(get_ui_id ($whammy_module_onoff),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab_transposition_whammy))
				set_control_par(get_ui_id($whammy_module_onoff),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id($whammy_module_onoff),$CONTROL_PAR_POS_Y,20)
	   			set_control_par(get_ui_id($whammy_module_onoff), $CONTROL_PAR_WIDTH, $panel__whammy_column_width * $panel__whammy__numofknobs - 3)
	    		set_control_par(get_ui_id($whammy_module_onoff), $CONTROL_PAR_HEIGHT, 18)
				set_control_par(get_ui_id($whammy_module_onoff), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				select ($whammy_module_onoff)
					case 1
						set_control_par_str(get_ui_id($whammy_module_onoff), $CONTROL_PAR_TEXT, "[ ON ]")
					case 0
						set_control_par_str(get_ui_id($whammy_module_onoff), $CONTROL_PAR_TEXT, "[ off ]")
				end select


			declare ui_panel $panel__whammy_module_A
			declare ui_knob $knob__whammy_panel_A_interval_numerator(1,128,1)
			declare ui_knob $knob__whammy_panel_A_interval_denominator(1,128,1)
			declare ui_knob $knob__whammy_panel_A_power_numerator(1,128,1)
			declare ui_knob $knob__whammy_panel_A_power_denominator(1,128,1)
			declare ui_knob $knob__whammy_panel_A_amount_interval_denominator(1,128,1)
			declare ui_knob $knob__whammy_panel_A_amount_power_numerator(1,128,1)

			declare ui_panel $panel__whammy_module_B
			declare ui_knob $knob__whammy_panel_B_interval_numerator(1,128,1)
			declare ui_knob $knob__whammy_panel_B_interval_denominator(1,128,1)
			declare ui_knob $knob__whammy_panel_B_power_numerator(1,128,1)
			declare ui_knob $knob__whammy_panel_B_power_denominator(1,128,1)
			declare ui_knob $knob__whammy_panel_B_amount_interval_denominator(1,128,1)
			declare ui_knob $knob__whammy_panel_B_amount_power_numerator(1,128,1)

			declare ui_panel $panel__whammy_module_C
			declare ui_knob $knob__whammy_panel_C_interval_numerator(1,128,1)
			declare ui_knob $knob__whammy_panel_C_interval_denominator(1,128,1)
			declare ui_knob $knob__whammy_panel_C_power_numerator(1,128,1)
			declare ui_knob $knob__whammy_panel_C_power_denominator(1,128,1)
			declare ui_knob $knob__whammy_panel_C_amount_interval_denominator(1,128,1)
			declare ui_knob $knob__whammy_panel_C_amount_power_numerator(1,128,1)

			declare ui_panel $panel__whammy_module_D
			declare ui_knob $knob__whammy_panel_D_interval_numerator(1,128,1)
			declare ui_knob $knob__whammy_panel_D_interval_denominator(1,128,1)
			declare ui_knob $knob__whammy_panel_D_power_numerator(1,128,1)
			declare ui_knob $knob__whammy_panel_D_power_denominator(1,128,1)
			declare ui_knob $knob__whammy_panel_D_amount_interval_denominator(1,128,1)
			declare ui_knob $knob__whammy_panel_D_amount_power_numerator(1,128,1)

			declare ui_panel $panel__whammy_module_E
			declare ui_knob $knob__whammy_panel_E_interval_numerator(1,128,1)
			declare ui_knob $knob__whammy_panel_E_interval_denominator(1,128,1)
			declare ui_knob $knob__whammy_panel_E_power_numerator(1,128,1)
			declare ui_knob $knob__whammy_panel_E_power_denominator(1,128,1)
			declare ui_knob $knob__whammy_panel_E_amount_interval_denominator(1,128,1)
			declare ui_knob $knob__whammy_panel_E_amount_power_numerator(1,128,1)

	


			$counter1 := 0
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+0] := get_ui_id($panel__whammy_module_A)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+1] := get_ui_id($knob__whammy_panel_A_interval_numerator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+2] := get_ui_id($knob__whammy_panel_A_interval_denominator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+3] := get_ui_id($knob__whammy_panel_A_power_numerator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+4] := get_ui_id($knob__whammy_panel_A_power_denominator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+5] := get_ui_id($knob__whammy_panel_A_amount_interval_denominator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+6] := get_ui_id($knob__whammy_panel_A_amount_power_numerator)
			inc($counter1)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+0] := get_ui_id($panel__whammy_module_B)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+1] := get_ui_id($knob__whammy_panel_B_interval_numerator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+2] := get_ui_id($knob__whammy_panel_B_interval_denominator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+3] := get_ui_id($knob__whammy_panel_B_power_numerator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+4] := get_ui_id($knob__whammy_panel_B_power_denominator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+5] := get_ui_id($knob__whammy_panel_B_amount_interval_denominator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+6] := get_ui_id($knob__whammy_panel_B_amount_power_numerator)
			inc($counter1)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+0] := get_ui_id($panel__whammy_module_C)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+1] := get_ui_id($knob__whammy_panel_C_interval_numerator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+2] := get_ui_id($knob__whammy_panel_C_interval_denominator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+3] := get_ui_id($knob__whammy_panel_C_power_numerator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+4] := get_ui_id($knob__whammy_panel_C_power_denominator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+5] := get_ui_id($knob__whammy_panel_C_amount_interval_denominator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+6] := get_ui_id($knob__whammy_panel_C_amount_power_numerator)
			inc($counter1)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+0] := get_ui_id($panel__whammy_module_D)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+1] := get_ui_id($knob__whammy_panel_D_interval_numerator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+2] := get_ui_id($knob__whammy_panel_D_interval_denominator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+3] := get_ui_id($knob__whammy_panel_D_power_numerator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+4] := get_ui_id($knob__whammy_panel_D_power_denominator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+5] := get_ui_id($knob__whammy_panel_D_amount_interval_denominator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+6] := get_ui_id($knob__whammy_panel_D_amount_power_numerator)
			inc($counter1)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+0] := get_ui_id($panel__whammy_module_E)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+1] := get_ui_id($knob__whammy_panel_E_interval_numerator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+2] := get_ui_id($knob__whammy_panel_E_interval_denominator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+3] := get_ui_id($knob__whammy_panel_E_power_numerator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+4] := get_ui_id($knob__whammy_panel_E_power_denominator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+5] := get_ui_id($knob__whammy_panel_E_amount_interval_denominator)
			%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+6] := get_ui_id($knob__whammy_panel_E_amount_power_numerator)

	
				$counter1 := 0
				while ($counter1 < $panel__whammy__numofmodules)
				   {init panels}
					set_control_par(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1) + 0],$CONTROL_PAR_PARENT_PANEL, get_ui_id ($gui_panel__modulation_tab_transposition_whammy))
					set_control_par(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1) + 0],$CONTROL_PAR_POS_X, 0)
					set_control_par(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1) + 0],$CONTROL_PAR_POS_Y, $panel__whammy_knobpanels_top_margin + ($panel__whammy_segment_height * $counter1))
				   {init knobs}
				   	$counter2 := 0
				   	while ($counter2 < $panel__whammy__numofknobs)
				   		set_control_par(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+1+$counter2],$CONTROL_PAR_PARENT_PANEL, %ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+0])
						set_control_par(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+1+$counter2],$CONTROL_PAR_POS_X, ($panel__whammy_column_width*$counter2))
						set_control_par(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+1+$counter2],$CONTROL_PAR_POS_Y, 0)
				   		inc($counter2)
				   	end while
					set_control_par_str(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+1],$CONTROL_PAR_AUTOMATION_NAME, "whammy" & $counter1 + 1 & "_interval_numerator")
					set_control_par_str(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+1],$CONTROL_PAR_TEXT, "   *")
					set_control_par(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+1],$CONTROL_PAR_DEFAULT_VALUE, 0)
					set_control_par(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+1], $CONTROL_PAR_VALUE, %panel__whammy__state[$counter1 * $panel__whammy__numofknobs + 0])
			
					set_control_par_str(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+2],$CONTROL_PAR_AUTOMATION_NAME, "whammy" & $counter1 + 1 & "_interval_denominator")
					set_control_par_str(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+2],$CONTROL_PAR_TEXT, "   /")
					set_control_par(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+2],$CONTROL_PAR_DEFAULT_VALUE, 0)
					set_control_par(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+2], $CONTROL_PAR_VALUE, %panel__whammy__state[$counter1 * $panel__whammy__numofknobs + 1])

					set_control_par_str(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+3],$CONTROL_PAR_AUTOMATION_NAME, "whammy" & $counter1 + 1 & "_power_numerator")
					set_control_par_str(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+3],$CONTROL_PAR_TEXT, "  pow")
					set_control_par(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+3],$CONTROL_PAR_DEFAULT_VALUE, 0)
					set_control_par(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+3], $CONTROL_PAR_VALUE, %panel__whammy__state[$counter1 * $panel__whammy__numofknobs + 2])

					set_control_par_str(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+4],$CONTROL_PAR_AUTOMATION_NAME, "whammy" & $counter1 + 1 & "_power_denominator")
					set_control_par_str(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+4],$CONTROL_PAR_TEXT, "  root")
					set_control_par(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+4],$CONTROL_PAR_DEFAULT_VALUE, 0)
					set_control_par(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+4], $CONTROL_PAR_VALUE, %panel__whammy__state[$counter1 * $panel__whammy__numofknobs + 3])

					set_control_par_str(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+5],$CONTROL_PAR_AUTOMATION_NAME, "whammy" & $counter1 + 1 & "_power_numerator")
					set_control_par_str(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+5],$CONTROL_PAR_TEXT, "  pow")
					set_control_par(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+5],$CONTROL_PAR_DEFAULT_VALUE, 0)
					set_control_par(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+5], $CONTROL_PAR_VALUE, %panel__whammy__state[$counter1 * $panel__whammy__numofknobs + 4])

					set_control_par_str(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+6],$CONTROL_PAR_AUTOMATION_NAME, "whammy" & $counter1 + 1 & "_power_denominator")
					set_control_par_str(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+6],$CONTROL_PAR_TEXT, " root")
					set_control_par(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+6],$CONTROL_PAR_DEFAULT_VALUE, 0)
					set_control_par(%ids_panel__whammy[$counter1*($panel__whammy__numofknobs+1)+6], $CONTROL_PAR_VALUE, %panel__whammy__state[$counter1 * $panel__whammy__numofknobs + 5])
			
					inc($counter1)
				end while

		end if



	{transposition - Monzo module}
		if (1=1)
			set_control_par(get_ui_id ($gui_panel__modulation_tab_transposition_monzo),$CONTROL_PAR_POS_X,42)
			set_control_par(get_ui_id ($gui_panel__modulation_tab_transposition_monzo),$CONTROL_PAR_POS_Y,60)

		declare const $number_of_monzo_knobs := 18
		declare %knobids_transposition_by_monzo[$number_of_monzo_knobs]
		declare $knob_number__transposition_by_monzo
		declare %knobvalues_transposition_by_monzo[$number_of_monzo_knobs]
			make_persistent(%knobvalues_transposition_by_monzo)
			read_persistent_var(%knobvalues_transposition_by_monzo)



		declare ui_label $label_monzo_module (1,1)
			set_text ($label_monzo_module," t r a n s p o s e   b y   p r i m e   f a c t o r s   ( m o n z o s ) :")
			set_control_par(get_ui_id($label_monzo_module),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab_transposition_monzo))
			set_control_par(get_ui_id($label_monzo_module),$CONTROL_PAR_WIDTH, 549)
			set_control_par(get_ui_id($label_monzo_module),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id($label_monzo_module),$CONTROL_PAR_POS_Y,0)

		declare ui_switch $switch_transposition_by_monzo
			set_control_par_str(get_ui_id($switch_transposition_by_monzo),$CONTROL_PAR_AUTOMATION_NAME,"Monzo_transposition_onoff")
			set_control_par_str(get_ui_id($switch_transposition_by_monzo), $CONTROL_PAR_TEXT, "Monzo ON/OFF")
			$switch_transposition_by_monzo := 0
			make_persistent($switch_transposition_by_monzo)
			read_persistent_var($switch_transposition_by_monzo)
			set_control_par(get_ui_id ($switch_transposition_by_monzo),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab_transposition_monzo))
			set_control_par(get_ui_id($switch_transposition_by_monzo),$CONTROL_PAR_POS_X,0)
			set_control_par(get_ui_id($switch_transposition_by_monzo),$CONTROL_PAR_POS_Y,20)
   			set_control_par(get_ui_id($switch_transposition_by_monzo), $CONTROL_PAR_WIDTH, 549)
    		set_control_par(get_ui_id($switch_transposition_by_monzo), $CONTROL_PAR_HEIGHT, 18)
			set_control_par(get_ui_id($switch_transposition_by_monzo), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
			select ($switch_transposition_by_monzo)
				case 1
					set_control_par_str(get_ui_id($switch_transposition_by_monzo), $CONTROL_PAR_TEXT, "[ ON ]")
				case 0
					set_control_par_str(get_ui_id($switch_transposition_by_monzo), $CONTROL_PAR_TEXT, "[ off ]")
			end select



			declare ~monzo_module_compound_transposition_cents := 0.0
				make_persistent(~monzo_module_compound_transposition_cents)
				read_persistent_var(~monzo_module_compound_transposition_cents)


		

			declare ui_knob $knob___monzo_powers_of_2(-63,64,1)
			declare ui_knob $knob___monzo_powers_of_3(-63,64,1)
			declare ui_knob $knob___monzo_powers_of_5(-63,64,1)
			declare ui_knob $knob___monzo_powers_of_7(-63,64,1)
			declare ui_knob $knob___monzo_powers_of_11(-63,64,1)
			declare ui_knob $knob___monzo_powers_of_13(-63,64,1)
			declare ui_knob $knob___monzo_powers_of_17(-63,64,1)
			declare ui_knob $knob___monzo_powers_of_19(-63,64,1)
			declare ui_knob $knob___monzo_powers_of_23(-63,64,1)
			declare ui_knob $knob___monzo_powers_of_29(-63,64,1)
			declare ui_knob $knob___monzo_powers_of_31(-63,64,1)
			declare ui_knob $knob___monzo_powers_of_37(-63,64,1)
			declare ui_knob $knob___monzo_powers_of_41(-63,64,1)
			declare ui_knob $knob___monzo_powers_of_43(-63,64,1)
			declare ui_knob $knob___monzo_powers_of_47(-63,64,1)
			declare ui_knob $knob___monzo_powers_of_53(-63,64,1)
			declare ui_knob $knob___monzo_powers_of_59(-63,64,1)
			declare ui_knob $knob___monzo_powers_of_61(-63,64,1)


				%knobids_transposition_by_monzo[0] := get_ui_id($knob___monzo_powers_of_2)
				%knobids_transposition_by_monzo[1] := get_ui_id($knob___monzo_powers_of_3)
				%knobids_transposition_by_monzo[2] := get_ui_id($knob___monzo_powers_of_5)
				%knobids_transposition_by_monzo[3] := get_ui_id($knob___monzo_powers_of_7)
				%knobids_transposition_by_monzo[4] := get_ui_id($knob___monzo_powers_of_11)
				%knobids_transposition_by_monzo[5] := get_ui_id($knob___monzo_powers_of_13)
				%knobids_transposition_by_monzo[6] := get_ui_id($knob___monzo_powers_of_17)
				%knobids_transposition_by_monzo[7] := get_ui_id($knob___monzo_powers_of_19)
				%knobids_transposition_by_monzo[8] := get_ui_id($knob___monzo_powers_of_23)
				%knobids_transposition_by_monzo[9] := get_ui_id($knob___monzo_powers_of_29)
				%knobids_transposition_by_monzo[10] := get_ui_id($knob___monzo_powers_of_31)
				%knobids_transposition_by_monzo[11] := get_ui_id($knob___monzo_powers_of_37)
				%knobids_transposition_by_monzo[12] := get_ui_id($knob___monzo_powers_of_41)
				%knobids_transposition_by_monzo[13] := get_ui_id($knob___monzo_powers_of_43)
				%knobids_transposition_by_monzo[14] := get_ui_id($knob___monzo_powers_of_47)
				%knobids_transposition_by_monzo[15] := get_ui_id($knob___monzo_powers_of_53)
				%knobids_transposition_by_monzo[16] := get_ui_id($knob___monzo_powers_of_59)
				%knobids_transposition_by_monzo[17] := get_ui_id($knob___monzo_powers_of_61)


				$knob_number__transposition_by_monzo := 0
				while ($knob_number__transposition_by_monzo < $number_of_monzo_knobs)
				$counter1 := 0
					set_control_par_str(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo],$CONTROL_PAR_AUTOMATION_NAME,"monzo_" & %primes[$knob_number__transposition_by_monzo])
					set_control_par_str(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo],$CONTROL_PAR_TEXT, "    " & %primes[$knob_number__transposition_by_monzo] & "^")
					set_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo],$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab_transposition_monzo))
					set_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo],$CONTROL_PAR_POS_X, 92 * ($knob_number__transposition_by_monzo mod 6))
					set_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo],$CONTROL_PAR_POS_Y, 44 * (($knob_number__transposition_by_monzo / 6)+1))
					set_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_DEFAULT_VALUE, 0)
					set_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE, %knobvalues_transposition_by_monzo[$knob_number__transposition_by_monzo])
					inc($knob_number__transposition_by_monzo)
				end while

			end if

	{detune module}



		{detune specific key}


				set_control_par(get_ui_id ($panel__detune_specific_key),$CONTROL_PAR_POS_X,36)
				set_control_par(get_ui_id ($panel__detune_specific_key),$CONTROL_PAR_POS_Y,196)
		declare $panel__detune_specific_key_visibility
				$panel__detune_specific_key_visibility := 1
				make_persistent($panel__detune_specific_key_visibility)
				read_persistent_var($panel__detune_specific_key_visibility)
				declare ~master_cent_mask_detune_value := 0.0

				declare const $panel__detune_specific_key__num_of_ui_values := 7
				declare const $panel__detune_specific_key__num_of_vars := 128
				declare %detune_specific_key__uivalue_id[$panel__detune_specific_key__num_of_ui_values]
				declare %detune_specific_key__label_id[$panel__detune_specific_key__num_of_ui_values]
			declare ui_panel $panel__detune_specific_key_table
			declare ui_panel $panel_detune_specific_key__uivalues
				declare const $panel__detune_specific_key__width := 550
				declare const $panel__detune_specific_key__nav_btn_width := 20
				declare const $panel__detune_specific_key__column_width := 70
				declare const $panel__detune_specific_key__ui_value_width := 62
				declare const $panel__detune_specific_key__label_width := 46
				declare const $panel__detune_specific_key__values_left_margin := ($panel__detune_specific_key__width - ($panel__detune_specific_key__num_of_ui_values * $panel__detune_specific_key__column_width) + ($panel__detune_specific_key__column_width - $panel__detune_specific_key__ui_value_width) ) / 2

				

		
				set_control_par(get_ui_id($panel__detune_specific_key_table),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__detune_specific_key))
				set_control_par(get_ui_id ($panel__detune_specific_key_table),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($panel__detune_specific_key_table),$CONTROL_PAR_POS_Y,0)


		declare ui_label $label__detune_specific_key__cent_table (1,1)
				set_text ($label__detune_specific_key__cent_table," c e n t   m a s k :")
				set_control_par_str(get_ui_id ($label__detune_specific_key__cent_table),$CONTROL_PAR_HELP, "Apply cent values to specific MIDI keys. Note that number values can't be automated.")
				set_control_par(get_ui_id($label__detune_specific_key__cent_table),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__detune_specific_key_table))
				set_control_par(get_ui_id($label__detune_specific_key__cent_table),$CONTROL_PAR_WIDTH,$panel__detune_specific_key__width)
				set_control_par(get_ui_id ($label__detune_specific_key__cent_table),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label__detune_specific_key__cent_table),$CONTROL_PAR_POS_Y,0)

		declare ui_switch $turn_on_global_cent_mask
				set_control_par_str(get_ui_id($turn_on_global_cent_mask), $CONTROL_PAR_TEXT, "cent_mask")
				set_control_par_str(get_ui_id($turn_on_global_cent_mask),$CONTROL_PAR_AUTOMATION_NAME,"global_cent_mask")
				$turn_on_global_cent_mask := 0
				make_persistent($turn_on_global_cent_mask)
				read_persistent_var($turn_on_global_cent_mask)
				select ($turn_on_global_cent_mask)
					case 0
						set_control_par_str(get_ui_id($turn_on_global_cent_mask), $CONTROL_PAR_TEXT, "[off]")
					case 1
						set_control_par_str(get_ui_id($turn_on_global_cent_mask), $CONTROL_PAR_TEXT, "[ ON ]")
				end select
				set_control_par(get_ui_id ($turn_on_global_cent_mask),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__detune_specific_key))
				set_control_par(get_ui_id($turn_on_global_cent_mask),$CONTROL_PAR_POS_X,$panel__detune_specific_key__width - 40)
				set_control_par(get_ui_id($turn_on_global_cent_mask),$CONTROL_PAR_POS_Y,0)	
				set_control_par(get_ui_id($turn_on_global_cent_mask),$CONTROL_PAR_WIDTH,40)
				set_control_par(get_ui_id($turn_on_global_cent_mask),$CONTROL_PAR_HEIGHT,18)
				set_control_par(get_ui_id($turn_on_global_cent_mask), $CONTROL_PAR_TEXT_ALIGNMENT, 1)

			declare $panel__detune_specific_key__navigation_counter
				$panel__detune_specific_key__navigation_counter := 5 {which midi keys are currently displayed in the table}
				make_persistent($panel__detune_specific_key__navigation_counter)
				read_persistent_var($panel__detune_specific_key__navigation_counter)

			declare ui_button $panel__detune_specific_key__navigate_left
				$panel__detune_specific_key__navigate_left := 0
				set_text ($panel__detune_specific_key__navigate_left,"<")
				set_control_par(get_ui_id($panel__detune_specific_key__navigate_left),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__detune_specific_key_table))
				set_control_par(get_ui_id($panel__detune_specific_key__navigate_left),$CONTROL_PAR_WIDTH,$panel__detune_specific_key__nav_btn_width)
				set_control_par(get_ui_id ($panel__detune_specific_key__navigate_left),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($panel__detune_specific_key__navigate_left),$CONTROL_PAR_POS_Y,28)
				if ($panel__detune_specific_key__navigation_counter = 0)
					set_control_par(get_ui_id($panel__detune_specific_key__navigate_left),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				else
					set_control_par(get_ui_id($panel__detune_specific_key__navigate_left),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				end if

			declare ui_button $panel__detune_specific_key__navigate_right
				$panel__detune_specific_key__navigate_right := 0
				set_text ($panel__detune_specific_key__navigate_right,">")
				set_control_par(get_ui_id($panel__detune_specific_key__navigate_right),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__detune_specific_key_table))
				set_control_par(get_ui_id($panel__detune_specific_key__navigate_right),$CONTROL_PAR_WIDTH,$panel__detune_specific_key__nav_btn_width)
				set_control_par(get_ui_id ($panel__detune_specific_key__navigate_right),$CONTROL_PAR_POS_X,$panel__detune_specific_key__width-$panel__detune_specific_key__nav_btn_width)
				set_control_par(get_ui_id ($panel__detune_specific_key__navigate_right),$CONTROL_PAR_POS_Y,28)
				
				if ($panel__detune_specific_key__navigation_counter # 0)
					set_control_par(get_ui_id($panel__detune_specific_key__navigate_left),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				else
					set_control_par(get_ui_id($panel__detune_specific_key__navigate_left),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				end if
				
				if ($panel__detune_specific_key__num_of_vars > $panel__detune_specific_key__num_of_ui_values*($panel__detune_specific_key__navigation_counter+1))
					set_control_par(get_ui_id($panel__detune_specific_key__navigate_right),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				else
					set_control_par(get_ui_id($panel__detune_specific_key__navigate_right),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				end if

			
				set_control_par(get_ui_id($panel_detune_specific_key__uivalues),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__detune_specific_key_table))
				set_control_par(get_ui_id ($panel_detune_specific_key__uivalues),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($panel_detune_specific_key__uivalues),$CONTROL_PAR_POS_Y,18)




			
			declare ?default_cent_mask[128] := (0.0)
			declare %panel_detune_specific_key__milicent_array[$panel__detune_specific_key__num_of_vars] := (0)
				make_persistent(%panel_detune_specific_key__milicent_array)
				$counter1 := 0
					while ($counter1 < num_elements(?default_cent_mask))
						%panel_detune_specific_key__milicent_array[$counter1] := real_to_int(1000.0*(?default_cent_mask[$counter1]))
						inc($counter1)
					end while			
					while ($counter1 < num_elements(%panel_detune_specific_key__milicent_array))
						%panel_detune_specific_key__milicent_array[$counter1] := 0
						inc($counter1)
					end while

					declare ui_value_edit $gui_detune_specific_key_mcent_value_1(-12000000,12000000,1000)
						%detune_specific_key__uivalue_id[0] := get_ui_id ($gui_detune_specific_key_mcent_value_1)
					declare ui_value_edit $gui_detune_specific_key_mcent_value_2(-12000000,12000000,1000)
						%detune_specific_key__uivalue_id[1] := get_ui_id ($gui_detune_specific_key_mcent_value_2)
					declare ui_value_edit $gui_detune_specific_key_mcent_value_3(-12000000,12000000,1000)
						%detune_specific_key__uivalue_id[2] := get_ui_id ($gui_detune_specific_key_mcent_value_3)
					declare ui_value_edit $gui_detune_specific_key_mcent_value_4(-12000000,12000000,1000)
						%detune_specific_key__uivalue_id[3] := get_ui_id ($gui_detune_specific_key_mcent_value_4)
					declare ui_value_edit $gui_detune_specific_key_mcent_value_5(-12000000,12000000,1000)
						%detune_specific_key__uivalue_id[4] := get_ui_id ($gui_detune_specific_key_mcent_value_5)
					declare ui_value_edit $gui_detune_specific_key_mcent_value_6(-12000000,12000000,1000)
						%detune_specific_key__uivalue_id[5] := get_ui_id ($gui_detune_specific_key_mcent_value_6)
					declare ui_value_edit $gui_detune_specific_key_mcent_value_7(-12000000,12000000,1000)
						%detune_specific_key__uivalue_id[6] := get_ui_id ($gui_detune_specific_key_mcent_value_7)

					declare ui_label $detune_specific_key_label_1 (1,1)
						%detune_specific_key__label_id[0] := get_ui_id ($detune_specific_key_label_1)
					declare ui_label $detune_specific_key_label_2 (1,1)
						%detune_specific_key__label_id[1] := get_ui_id ($detune_specific_key_label_2)
					declare ui_label $detune_specific_key_label_3 (1,1)
						%detune_specific_key__label_id[2] := get_ui_id ($detune_specific_key_label_3)
					declare ui_label $detune_specific_key_label_4 (1,1)
						%detune_specific_key__label_id[3] := get_ui_id ($detune_specific_key_label_4)
					declare ui_label $detune_specific_key_label_5 (1,1)
						%detune_specific_key__label_id[4] := get_ui_id ($detune_specific_key_label_5)
					declare ui_label $detune_specific_key_label_6 (1,1)
						%detune_specific_key__label_id[5] := get_ui_id ($detune_specific_key_label_6)
					declare ui_label $detune_specific_key_label_7 (1,1)
						%detune_specific_key__label_id[6] := get_ui_id ($detune_specific_key_label_7)

					read_persistent_var(%panel_detune_specific_key__milicent_array)
					$counter1 := 0
					while ($counter1 < $panel__detune_specific_key__num_of_ui_values)
						set_control_par(%detune_specific_key__uivalue_id[$counter1],$CONTROL_PAR_VALUE, %panel_detune_specific_key__milicent_array[$panel__detune_specific_key__navigation_counter*$panel__detune_specific_key__num_of_ui_values + $counter1])
						set_control_par_str (%detune_specific_key__uivalue_id[$counter1],$CONTROL_PAR_TEXT,"")
						set_control_par(%detune_specific_key__uivalue_id[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel_detune_specific_key__uivalues))
						set_control_par(%detune_specific_key__uivalue_id[$counter1],$CONTROL_PAR_WIDTH, $panel__detune_specific_key__ui_value_width)
						set_control_par(%detune_specific_key__uivalue_id[$counter1],$CONTROL_PAR_POS_X, $panel__detune_specific_key__values_left_margin + $panel__detune_specific_key__column_width*($counter1 mod $panel__detune_specific_key__num_of_ui_values))
						set_control_par(%detune_specific_key__uivalue_id[$counter1],$CONTROL_PAR_POS_Y,2)
						set_control_par(%detune_specific_key__uivalue_id[$counter1], $CONTROL_PAR_DEFAULT_VALUE, 0)

						set_control_par_str (%detune_specific_key__label_id[$counter1],$CONTROL_PAR_TEXT, !note_class[($panel__detune_specific_key__navigation_counter*$panel__detune_specific_key__num_of_ui_values + $counter1) mod 12] & ($panel__detune_specific_key__navigation_counter*$panel__detune_specific_key__num_of_ui_values + $counter1) / 12 & "")
						set_control_par(%detune_specific_key__label_id[$counter1],$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__detune_specific_key_table))
						set_control_par(%detune_specific_key__label_id[$counter1],$CONTROL_PAR_WIDTH, $panel__detune_specific_key__label_width)
						set_control_par(%detune_specific_key__label_id[$counter1],$CONTROL_PAR_POS_X, (($panel__detune_specific_key__ui_value_width-$panel__detune_specific_key__label_width)/2) + $panel__detune_specific_key__values_left_margin + $panel__detune_specific_key__column_width*($counter1 mod $panel__detune_specific_key__num_of_ui_values))
						set_control_par(%detune_specific_key__label_id[$counter1],$CONTROL_PAR_POS_Y,40)

						set_control_par(%detune_specific_key__label_id[$counter1], $CONTROL_PAR_TEXT_ALIGNMENT, 1)
						inc($counter1)
					end while

					$counter1 := 0
					while ($counter1 < ($panel__detune_specific_key__num_of_vars-($panel__detune_specific_key__num_of_ui_values * $panel__detune_specific_key__navigation_counter)) and $counter1 < $panel__detune_specific_key__num_of_ui_values)
						set_control_par(%detune_specific_key__uivalue_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
						inc($counter1)
					end while
					while ($counter1 < $panel__detune_specific_key__num_of_ui_values)
						set_control_par(%detune_specific_key__uivalue_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
						inc($counter1)
					end while




		{master detune and master transposition:}
			{master detune:}
				set_control_par(get_ui_id ($panel__masterdetune),$CONTROL_PAR_POS_X,103+136)
				set_control_par(get_ui_id ($panel__masterdetune),$CONTROL_PAR_POS_Y,44)
				declare ~panel_masterdetune_cent_value := 0.0

			declare ui_label $label_masterdetune (1,1)
				set_text ($label_masterdetune," m a s t e r  d e t u n e :")
				set_control_par(get_ui_id($label_masterdetune),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__masterdetune))
				set_control_par(get_ui_id($label_masterdetune),$CONTROL_PAR_WIDTH, (88+2) * 4 - 2)
				set_control_par(get_ui_id ($label_masterdetune),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_masterdetune),$CONTROL_PAR_POS_Y,0)

			declare ui_knob $knob__masterdetune_numerator(1,128,1)
				set_control_par_str(get_ui_id($knob__masterdetune_numerator),$CONTROL_PAR_AUTOMATION_NAME,"master_detune_ji_numerator")
				$knob__masterdetune_numerator := 1
				set_knob_defval ($knob__masterdetune_numerator, 1)
				make_persistent ($knob__masterdetune_numerator)
				read_persistent_var($knob__masterdetune_numerator)
				set_text ($knob__masterdetune_numerator,"   *")
				set_control_par(get_ui_id($knob__masterdetune_numerator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__masterdetune))
				set_control_par(get_ui_id ($knob__masterdetune_numerator),$CONTROL_PAR_POS_X, (88+2)*0)
				set_control_par(get_ui_id ($knob__masterdetune_numerator),$CONTROL_PAR_POS_Y,22)
			declare ui_knob $knob__masterdetune_denominator(1,128,1)
				set_control_par_str(get_ui_id($knob__masterdetune_denominator),$CONTROL_PAR_AUTOMATION_NAME,"master_detune_ji_denominator")
				$knob__masterdetune_denominator := 1
				set_knob_defval ($knob__masterdetune_denominator, 1)
				make_persistent ($knob__masterdetune_denominator)
				read_persistent_var ($knob__masterdetune_denominator)
				set_text ($knob__masterdetune_denominator,"    /")
				set_control_par(get_ui_id($knob__masterdetune_denominator),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__masterdetune))
				set_control_par(get_ui_id ($knob__masterdetune_denominator),$CONTROL_PAR_POS_X,(88+2)*1)
				set_control_par(get_ui_id ($knob__masterdetune_denominator),$CONTROL_PAR_POS_Y,22)
			declare ui_knob $knob__masterdetune_by_cents(-63,64,1)
				set_control_par_str(get_ui_id($knob__masterdetune_by_cents),$CONTROL_PAR_AUTOMATION_NAME,"master_detune__cents")
				$knob__masterdetune_by_cents := 0
				set_knob_defval ($knob__masterdetune_by_cents, 0)
				make_persistent ($knob__masterdetune_by_cents)
				read_persistent_var($knob__masterdetune_by_cents)
				set_text ($knob__masterdetune_by_cents," cents")
				set_control_par(get_ui_id($knob__masterdetune_by_cents),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__masterdetune))
				set_control_par(get_ui_id ($knob__masterdetune_by_cents),$CONTROL_PAR_POS_X,(88+2)*2)
				set_control_par(get_ui_id ($knob__masterdetune_by_cents),$CONTROL_PAR_POS_Y,22)
			declare ui_knob $knob__masterdetune_by_centpercents(-63,64,1)
				set_control_par_str(get_ui_id($knob__masterdetune_by_centpercents),$CONTROL_PAR_AUTOMATION_NAME,"master_detune__100th_of_a_cent")
				$knob__masterdetune_by_centpercents := 0
				set_knob_defval ($knob__masterdetune_by_centpercents, 0)
				make_persistent ($knob__masterdetune_by_centpercents)
				read_persistent_var ($knob__masterdetune_by_centpercents)
				set_text ($knob__masterdetune_by_centpercents," % c")
				set_control_par(get_ui_id($knob__masterdetune_by_centpercents),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__masterdetune))
				set_control_par(get_ui_id ($knob__masterdetune_by_centpercents),$CONTROL_PAR_POS_X,(88+2)*3)
				set_control_par(get_ui_id ($knob__masterdetune_by_centpercents),$CONTROL_PAR_POS_Y,22)

		{master transposition:}
				set_control_par(get_ui_id ($panel__mastertransposition),$CONTROL_PAR_POS_X,103+136)
				set_control_par(get_ui_id ($panel__mastertransposition),$CONTROL_PAR_POS_Y,112)

			declare ui_label $label_mastertransposition (1,1)
				set_text ($label_mastertransposition," m a s t e r  t r a n s p o s i t i o n :")
				set_control_par(get_ui_id($label_mastertransposition),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__mastertransposition))
				set_control_par(get_ui_id($label_mastertransposition),$CONTROL_PAR_WIDTH,(88+2)*4-2)
				set_control_par(get_ui_id ($label_mastertransposition),$CONTROL_PAR_POS_X,0)
				set_control_par(get_ui_id ($label_mastertransposition),$CONTROL_PAR_POS_Y,0)

			declare ui_knob $knob__mastertransposition__equave(-63,64,1)
				set_control_par_str(get_ui_id($knob__mastertransposition__equave),$CONTROL_PAR_AUTOMATION_NAME,"transposition__num_of_equaves")
				$knob__mastertransposition__equave := 0
				set_knob_defval ($knob__mastertransposition__equave, 1)
				make_persistent ($knob__mastertransposition__equave)
				read_persistent_var($knob__mastertransposition__equave)
				set_text ($knob__mastertransposition__equave,"  equave")
				set_control_par_str(get_ui_id ($knob__mastertransposition__equave),$CONTROL_PAR_HELP, "Tranpose everything by the interval of equivalence.")
				set_control_par(get_ui_id($knob__mastertransposition__equave),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__mastertransposition))
				set_control_par(get_ui_id ($knob__mastertransposition__equave),$CONTROL_PAR_POS_X,(88+2)*0)
				set_control_par(get_ui_id ($knob__mastertransposition__equave),$CONTROL_PAR_POS_Y,22)
			declare ui_knob $knob__mastertransposition__octave(-63,64,1)
				set_control_par_str(get_ui_id($knob__mastertransposition__octave),$CONTROL_PAR_AUTOMATION_NAME,"transposition__num_of_octaves")
				$knob__mastertransposition__octave := 0
				set_knob_defval ($knob__mastertransposition__octave, 0)
				make_persistent ($knob__mastertransposition__octave)
				read_persistent_var ($knob__mastertransposition__octave)
				set_text ($knob__mastertransposition__octave,"  octave")
				set_control_par_str(get_ui_id ($knob__mastertransposition__octave),$CONTROL_PAR_HELP, "Octave transposition.")
				set_control_par(get_ui_id($knob__mastertransposition__octave),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__mastertransposition))
				set_control_par(get_ui_id ($knob__mastertransposition__octave),$CONTROL_PAR_POS_X,(88+2)*1)
				set_control_par(get_ui_id ($knob__mastertransposition__octave),$CONTROL_PAR_POS_Y,22)
			declare ui_knob $knob__mastertransposition__steps(-63,64,1)
				set_control_par_str(get_ui_id($knob__mastertransposition__steps),$CONTROL_PAR_AUTOMATION_NAME,"transposition_num_of_steps")
				$knob__mastertransposition__steps := 0
				set_knob_defval ($knob__mastertransposition__steps, 0)
				make_persistent ($knob__mastertransposition__steps)
				read_persistent_var($knob__mastertransposition__steps)
				set_text ($knob__mastertransposition__steps,"  steps")
				set_control_par(get_ui_id($knob__mastertransposition__steps),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__mastertransposition))
				set_control_par(get_ui_id ($knob__mastertransposition__steps),$CONTROL_PAR_POS_X,(88+2)*2)
				set_control_par(get_ui_id ($knob__mastertransposition__steps),$CONTROL_PAR_POS_Y,22)
			declare ui_knob $knob__mastertransposition_circleoffifths(-7,7,1)
				set_control_par_str(get_ui_id($knob__mastertransposition_circleoffifths),$CONTROL_PAR_AUTOMATION_NAME,"quick_transposition__circle_of_fifths")
				set_control_par_str(get_ui_id ($knob__mastertransposition_circleoffifths),$CONTROL_PAR_HELP, "Tranpose current scale through the circle of fifths.")
				$knob__mastertransposition_circleoffifths := 0
				set_knob_defval ($knob__mastertransposition_circleoffifths, 0)
				make_persistent ($knob__mastertransposition_circleoffifths)
				read_persistent_var ($knob__mastertransposition_circleoffifths)
				declare ~mastertransposition_quick_circleoffifths_detune_cents
					~mastertransposition_quick_circleoffifths_detune_cents := int_to_real($knob__mastertransposition_circleoffifths) * 1200.0 * log(3.0/2.0)/log(2.0)
				declare $mastertransposition_quick_circleoffifths_step_compensation
					$mastertransposition_quick_circleoffifths_step_compensation := - ($knob__mastertransposition_circleoffifths * (($number_of_pitch_classes+1) / 2))
				set_text ($knob__mastertransposition_circleoffifths,"  circle")
				set_control_par(get_ui_id($knob__mastertransposition_circleoffifths),$CONTROL_PAR_PARENT_PANEL,get_ui_id($panel__mastertransposition))
				set_control_par(get_ui_id ($knob__mastertransposition_circleoffifths),$CONTROL_PAR_POS_X,(88+2)*3)
				set_control_par(get_ui_id ($knob__mastertransposition_circleoffifths),$CONTROL_PAR_POS_Y,22)

		{octave stretching}


					set_control_par(get_ui_id ($panel__octave_stretching),$CONTROL_PAR_POS_X,36)
					set_control_par(get_ui_id ($panel__octave_stretching),$CONTROL_PAR_POS_Y,60)
			declare $panel__octave_stretching_visibility
					$panel__octave_stretching_visibility := 1
					make_persistent($panel__octave_stretching_visibility)
					read_persistent_var($panel__octave_stretching_visibility)

				declare ui_panel $panel__octave_stretching_table
				declare ui_panel $panel_octave_stretching__uivalues
					declare const $panel__octave_stretching__width := 180
					declare const $panel__octave_stretching__uivalue_thresh_width := $panel__octave_stretching__width
					declare const $panel__octave_stretching__uivalue_detune_width := $panel__octave_stretching__width
					declare const $panel__octave_stretching__column_width := 88
					declare const $panel__octave_stretching__label_width := $panel__octave_stretching__width
					declare const $panel__octave_stretching__uivalue_first_row_height := 22
					declare const $panel__octave_stretching__uivalue_row_height := 21
					declare const $switch__octave_stretching_width := 36
					declare ~octave_stretching_note_detune_cents := 0.0


			declare ui_label $label__octave_stretching(1,1)
					set_text ($label__octave_stretching, "o c t a v e   s t r e t c h i n g :")
					set_control_par(get_ui_id($label__octave_stretching), $CONTROL_PAR_PARENT_PANEL, get_ui_id($panel__octave_stretching))
					set_control_par(get_ui_id($label__octave_stretching), $CONTROL_PAR_WIDTH,$panel__octave_stretching__label_width)
					set_control_par(get_ui_id ($label__octave_stretching), $CONTROL_PAR_POS_X,0)
					set_control_par(get_ui_id ($label__octave_stretching), $CONTROL_PAR_POS_Y,0)
					set_control_par_str(get_ui_id ($label__octave_stretching),$CONTROL_PAR_HELP, "tuning settings - octave stretching")

			declare ui_switch $switch__octave_stretching
					$switch__octave_stretching := 0
					set_control_par_str (get_ui_id($switch__octave_stretching),$CONTROL_PAR_TEXT,"octave stretching")
					set_control_par_str(get_ui_id ($switch__octave_stretching),$CONTROL_PAR_HELP, "Turn on octave stretching.")
					set_control_par(get_ui_id($switch__octave_stretching),$CONTROL_PAR_POS_X, $panel__octave_stretching__width - $switch__octave_stretching_width - 1)
					set_control_par(get_ui_id($switch__octave_stretching),$CONTROL_PAR_POS_Y, 0)
					set_control_par(get_ui_id($switch__octave_stretching),$CONTROL_PAR_WIDTH, $switch__octave_stretching_width)
					set_control_par(get_ui_id($switch__octave_stretching), $CONTROL_PAR_PARENT_PANEL, get_ui_id($panel__octave_stretching))
					set_control_par(get_ui_id($switch__octave_stretching), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					make_persistent($switch__octave_stretching)
					read_persistent_var($switch__octave_stretching)
					select ($switch__octave_stretching)
						case 1
							set_control_par_str(get_ui_id($switch__octave_stretching), $CONTROL_PAR_TEXT, "[ ON ]")
						case 0
							set_control_par_str(get_ui_id($switch__octave_stretching), $CONTROL_PAR_TEXT, "[off]")
					end select


			declare ui_value_edit $gui_octave_stretching_high_thresh_mhz(1,20000000,1000)
					$gui_octave_stretching_high_thresh_mhz := 523250 {c’’ 523.25Hz}
					set_control_par_str (get_ui_id($gui_octave_stretching_high_thresh_mhz),$CONTROL_PAR_TEXT,"high octaves thresh [Hz]")
					set_control_par_str(get_ui_id ($gui_octave_stretching_high_thresh_mhz),$CONTROL_PAR_HELP, "Sets the threshold frequency above which the octave stretching is applied")
					set_control_par(get_ui_id ($gui_octave_stretching_high_thresh_mhz),$CONTROL_PAR_POS_X, $panel__octave_stretching__column_width * 0)
					set_control_par(get_ui_id ($gui_octave_stretching_high_thresh_mhz),$CONTROL_PAR_POS_Y, $panel__octave_stretching__uivalue_first_row_height + ($panel__octave_stretching__uivalue_row_height * 0))
					set_control_par(get_ui_id($gui_octave_stretching_high_thresh_mhz),$CONTROL_PAR_WIDTH, $panel__octave_stretching__uivalue_thresh_width)
					set_control_par(get_ui_id($gui_octave_stretching_high_thresh_mhz), $CONTROL_PAR_PARENT_PANEL, get_ui_id($panel__octave_stretching))
					set_control_par(get_ui_id($gui_octave_stretching_high_thresh_mhz), $CONTROL_PAR_DEFAULT_VALUE, 1000 * 1000)
					make_persistent($gui_octave_stretching_high_thresh_mhz)
					read_persistent_var($gui_octave_stretching_high_thresh_mhz)
			declare ui_value_edit $gui_octave_stretching_high_detune_milicent(-1200000,1200000,1000)
					$gui_octave_stretching_high_detune_milicent := 5 * 1000
					set_control_par_str (get_ui_id($gui_octave_stretching_high_detune_milicent),$CONTROL_PAR_TEXT,"high octaves detune [cents]")
					set_control_par_str(get_ui_id ($gui_octave_stretching_high_detune_milicent),$CONTROL_PAR_HELP, "Detune value for the higher octaves (cents).")
					set_control_par(get_ui_id ($gui_octave_stretching_high_detune_milicent),$CONTROL_PAR_POS_X, $panel__octave_stretching__column_width * 0)
					set_control_par(get_ui_id ($gui_octave_stretching_high_detune_milicent),$CONTROL_PAR_POS_Y, $panel__octave_stretching__uivalue_first_row_height + ($panel__octave_stretching__uivalue_row_height * 1))
					set_control_par(get_ui_id($gui_octave_stretching_high_detune_milicent),$CONTROL_PAR_WIDTH, $panel__octave_stretching__uivalue_detune_width)
					set_control_par(get_ui_id($gui_octave_stretching_high_detune_milicent), $CONTROL_PAR_PARENT_PANEL, get_ui_id($panel__octave_stretching))
					set_control_par(get_ui_id($gui_octave_stretching_high_detune_milicent), $CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($gui_octave_stretching_high_detune_milicent)
					read_persistent_var($gui_octave_stretching_high_detune_milicent)
			declare ui_value_edit $gui_octave_stretching_low_thresh_mhz(1,20000000,1000)
					$gui_octave_stretching_low_thresh_mhz := 200 * 1000
					set_control_par_str (get_ui_id($gui_octave_stretching_low_thresh_mhz),$CONTROL_PAR_TEXT,"low octaves thresh [Hz]")
					set_control_par_str(get_ui_id ($gui_octave_stretching_low_thresh_mhz),$CONTROL_PAR_HELP, "Sets the threshold frequency below which the octave stretching is applied")
					set_control_par(get_ui_id($gui_octave_stretching_low_thresh_mhz),$CONTROL_PAR_POS_X, $panel__octave_stretching__column_width * 0)
					set_control_par(get_ui_id($gui_octave_stretching_low_thresh_mhz),$CONTROL_PAR_POS_Y, $panel__octave_stretching__uivalue_first_row_height + ($panel__octave_stretching__uivalue_row_height * 2))
					set_control_par(get_ui_id($gui_octave_stretching_low_thresh_mhz),$CONTROL_PAR_WIDTH, $panel__octave_stretching__uivalue_thresh_width)
					set_control_par(get_ui_id($gui_octave_stretching_low_thresh_mhz), $CONTROL_PAR_PARENT_PANEL, get_ui_id($panel__octave_stretching))
					set_control_par(get_ui_id($gui_octave_stretching_low_thresh_mhz), $CONTROL_PAR_DEFAULT_VALUE, 200 * 1000)
					make_persistent($gui_octave_stretching_low_thresh_mhz)
					read_persistent_var($gui_octave_stretching_low_thresh_mhz)
			declare ui_value_edit $gui_octave_stretching_low_detune_milicent(-1200000,1200000,1000)
					$gui_octave_stretching_low_detune_milicent := 5 * 1000
					set_control_par_str (get_ui_id($gui_octave_stretching_low_detune_milicent),$CONTROL_PAR_TEXT,"low octaves detune [cents]")
					set_control_par_str(get_ui_id ($gui_octave_stretching_low_detune_milicent),$CONTROL_PAR_HELP, "Detune value for the lower octaves (cents).")
					set_control_par(get_ui_id ($gui_octave_stretching_low_detune_milicent),$CONTROL_PAR_POS_X, $panel__octave_stretching__column_width * 0)
					set_control_par(get_ui_id ($gui_octave_stretching_low_detune_milicent),$CONTROL_PAR_POS_Y, $panel__octave_stretching__uivalue_first_row_height + ($panel__octave_stretching__uivalue_row_height * 3))
					set_control_par(get_ui_id($gui_octave_stretching_low_detune_milicent),$CONTROL_PAR_WIDTH, $panel__octave_stretching__uivalue_detune_width)
					set_control_par(get_ui_id($gui_octave_stretching_low_detune_milicent), $CONTROL_PAR_PARENT_PANEL, get_ui_id($panel__octave_stretching))
					set_control_par(get_ui_id($gui_octave_stretching_low_detune_milicent), $CONTROL_PAR_DEFAULT_VALUE, 0)
					make_persistent($gui_octave_stretching_low_detune_milicent)
					read_persistent_var($gui_octave_stretching_low_detune_milicent)

		{master detune panel:}

	{GUI tab buttons:}
		declare const $top_button_bar_width := 473
		declare const $top_button_bar_spacing := 4
		declare const $top_button_bar_left_margin := 128
		declare const $top_button_bar_number_of_btns := 5
		declare const $top_button_bar_default_btn_width := ( $top_button_bar_width  - (($top_button_bar_number_of_btns-1) * $top_button_bar_spacing)) / $top_button_bar_number_of_btns
		declare const $top_button_bar_column_width := $top_button_bar_default_btn_width + $top_button_bar_spacing
		declare const $top_sub_button_bar_line_spacing := 20

		declare ui_button $setup_module_visibility
				$setup_module_visibility := 0
				set_text($setup_module_visibility,"setup")
				set_control_par(get_ui_id($setup_module_visibility),$CONTROL_PAR_POS_X,$top_button_bar_left_margin+($top_button_bar_column_width*0))
				set_control_par(get_ui_id($setup_module_visibility),$CONTROL_PAR_POS_Y,14)
				set_control_par(get_ui_id($setup_module_visibility),$CONTROL_PAR_WIDTH,$top_button_bar_default_btn_width)
				set_control_par(get_ui_id($setup_module_visibility), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				make_persistent($setup_module_visibility)
				read_persistent_var($setup_module_visibility)
				select($setup_module_visibility)
					case 0
						set_text($setup_module_visibility,"[setup]")
						set_control_par(get_ui_id($gui_panel__setup_tab), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
					case 1
						set_text($setup_module_visibility,"[ SETUP ]")
						set_control_par(get_ui_id($gui_panel__setup_tab), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				end select
		declare ui_button $scalesmithing_module_visibility
				$scalesmithing_module_visibility := 1
				set_text($scalesmithing_module_visibility,"scalesmithing")
				set_control_par(get_ui_id($scalesmithing_module_visibility),$CONTROL_PAR_POS_X,$top_button_bar_left_margin+($top_button_bar_column_width*1))
				set_control_par(get_ui_id($scalesmithing_module_visibility),$CONTROL_PAR_POS_Y,14)
				set_control_par(get_ui_id($scalesmithing_module_visibility),$CONTROL_PAR_WIDTH,$top_button_bar_default_btn_width)
				set_control_par(get_ui_id($scalesmithing_module_visibility), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				make_persistent($scalesmithing_module_visibility)
				read_persistent_var($scalesmithing_module_visibility)
				select($scalesmithing_module_visibility)
					case 0
						set_text($scalesmithing_module_visibility,"[scalesmithing]")
						set_control_par(get_ui_id($gui_panel__scalesmithing_tab), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
					case 1
						set_text($scalesmithing_module_visibility,"[ SCALESMITHING ]")
						set_control_par(get_ui_id($gui_panel__scalesmithing_tab), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				end select

			{init correct display view}
				if ($scalesmithing_module_visibility = 1)
					set_control_par(get_ui_id($panel__interval_of_equivalence), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
					select ($gui_zalewski_qnz_module_visibility) {if ($paradigms_menu = 99)}
						case 0
							set_control_par(get_ui_id($gui_zalewski_qnz_module), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_control_par(get_ui_id($gui_zalewski_qnz_module), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
					end select
					select ($gui_zalewski_module_visibility) {if ($paradigms_menu = 98)}
						case 0
							set_control_par(get_ui_id($gui_zalewski_module), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_control_par(get_ui_id($gui_zalewski_module), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
					end select
					select ($panel__tune_by_ji_ratios_precise_visibility) {if ($paradigms_menu = 800)}
						case 0
							set_control_par(get_ui_id($panel__tune_by_ji_ratios_precise), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_control_par(get_ui_id($panel__tune_by_ji_ratios_precise), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
					end select
					select ($panel__jiknobs_visibility) {if ($paradigms_menu = 808)}
						case 0
							set_control_par(get_ui_id($panel__jiknobs), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
							set_control_par(get_ui_id($panel__jiknobs_ratios_i_to_vi),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
							set_control_par(get_ui_id($panel__jiknobs_ratios_vii_to_xii),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
							set_control_par(get_ui_id($panel__jiknobs_ratios_xiii_to_xviii),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
							set_control_par(get_ui_id($panel__jiknobs_ratios_xix_to_xxiv),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
						case 1
							set_control_par(get_ui_id($panel__jiknobs), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
							set_control_par(get_ui_id($panel__jiknobs_ratios_i_to_vi),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
							set_control_par(get_ui_id($panel__jiknobs_ratios_vii_to_xii),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
							set_control_par(get_ui_id($panel__jiknobs_ratios_xiii_to_xviii),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
							set_control_par(get_ui_id($panel__jiknobs_ratios_xix_to_xxiv),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
							select ($jiknobs_panel__navigation_counter)
								case 0
									set_control_par(get_ui_id($panel__jiknobs_ratios_i_to_vi),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
								case 1
									set_control_par(get_ui_id($panel__jiknobs_ratios_vii_to_xii),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
								case 2
									set_control_par(get_ui_id($panel__jiknobs_ratios_xiii_to_xviii),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
								case 3
									set_control_par(get_ui_id($panel__jiknobs_ratios_xix_to_xxiv),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
							end select
					end select
					select ($panel__tune_by_exponent_ratios_visibility) {if ($paradigms_menu = 1100)}
						case 0
							set_control_par(get_ui_id($panel__tune_by_exponent_ratios), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_control_par(get_ui_id($panel__tune_by_exponent_ratios), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
					end select
					select ($panel__euler_fokker_genera_visibility) {$paradigms_menu = 1001}
						case 0
							set_control_par(get_ui_id($panel_eulerfokkergenera), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_control_par(get_ui_id($panel_eulerfokkergenera), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
					end select
					select ($panel_cps_visibility) {$paradigms_menu = 1002}
						case 0
							set_control_par(get_ui_id($panel_cps), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_control_par(get_ui_id($panel_cps), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
					end select
					select ($panel__expknobs_visibility) {$paradigms_menu = 1101}
						case 0
							set_control_par(get_ui_id($panel__expknobs), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_control_par(get_ui_id($panel__expknobs), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
					end select
					select ($panel__tune_by_cents_visibility)  {$paradigms_menu = 801}
						case 0
							set_control_par(get_ui_id($panel__tune_by_cents), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_control_par(get_ui_id($panel__tune_by_cents), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
					end select
					select ($panel__freqratio_visibility)  {$paradigms_menu = 1935}
						case 0
							set_control_par(get_ui_id($panel__freqratio), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_control_par(get_ui_id($panel__freqratio), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
					end select
					select ($panel__periodandgenerator_visibility) {$paradigms_menu = 3}
						case 0
							set_control_par(get_ui_id($panel__periodandgenerator), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_control_par(get_ui_id($panel__periodandgenerator), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
					end select
					select ($panel__temperament_units_visibility) {$paradigms_menu = 720}
						case 0
							set_control_par(get_ui_id($panel__temperament_units), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_control_par(get_ui_id($panel__temperament_units), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
							set_control_par(get_ui_id($panel__interval_of_equivalence), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
					end select
					select ($panel__equalsteptuning_visibility) {$paradigms_menu = 1111}
						case 0
							set_control_par(get_ui_id($panel__equalsteptuning), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_control_par(get_ui_id($panel__equalsteptuning), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
					end select
					select ($panel__epimoric_scales_visibility) {$paradigms_menu = 1000}
						case 0
							set_control_par(get_ui_id($panel__epimoric_scales), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_control_par(get_ui_id($panel__epimoric_scales), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
					end select
				end if
			declare ui_button $pedaling_module_visibility
					$pedaling_module_visibility := 0
					set_text($pedaling_module_visibility,"pedaling")
					set_control_par(get_ui_id($pedaling_module_visibility),$CONTROL_PAR_POS_X,$top_button_bar_left_margin+($top_button_bar_column_width*2))
					set_control_par(get_ui_id($pedaling_module_visibility),$CONTROL_PAR_POS_Y,14)
					set_control_par(get_ui_id($pedaling_module_visibility),$CONTROL_PAR_WIDTH,$top_button_bar_default_btn_width)
					set_control_par(get_ui_id($pedaling_module_visibility), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
					make_persistent($pedaling_module_visibility)
					read_persistent_var($pedaling_module_visibility)
					select($pedaling_module_visibility)
						case 0
							set_text($pedaling_module_visibility,"[pedaling]")
							set_control_par(get_ui_id($gui_panel__pedaling_tab), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
						case 1
							set_text($pedaling_module_visibility,"[ PEDALING ]")
							set_control_par(get_ui_id($gui_panel__pedaling_tab), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
					end select
			declare ui_button $pedaling_module_tab_sus_visibility
				$pedaling_module_tab_sus_visibility := 1
				set_control_par(get_ui_id($pedaling_module_tab_sus_visibility),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__pedaling_tab))
				set_text($pedaling_module_tab_sus_visibility,"sus")
				set_control_par(get_ui_id($pedaling_module_tab_sus_visibility),$CONTROL_PAR_POS_X,290)
				set_control_par(get_ui_id($pedaling_module_tab_sus_visibility),$CONTROL_PAR_POS_Y,14+$top_sub_button_bar_line_spacing)
				set_control_par(get_ui_id($pedaling_module_tab_sus_visibility),$CONTROL_PAR_WIDTH,40)
				set_control_par(get_ui_id($pedaling_module_tab_sus_visibility), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				make_persistent($pedaling_module_tab_sus_visibility)
				read_persistent_var($pedaling_module_tab_sus_visibility)
				select($pedaling_module_tab_sus_visibility)
					case 0
						set_text($pedaling_module_tab_sus_visibility,"[sus]")
						set_control_par(get_ui_id($gui_panel__pedaling_tab_sus), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
					case 1
						set_text($pedaling_module_tab_sus_visibility,"[ SUS ]")
						set_control_par(get_ui_id($gui_panel__pedaling_tab_sus), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				end select
			declare ui_button $pedaling_module_tab_harp_visibility
				$pedaling_module_tab_harp_visibility := 0
				set_control_par(get_ui_id($pedaling_module_tab_harp_visibility),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__pedaling_tab))
				set_text($pedaling_module_tab_harp_visibility,"harp")
				set_control_par(get_ui_id($pedaling_module_tab_harp_visibility),$CONTROL_PAR_POS_X,329)
				set_control_par(get_ui_id($pedaling_module_tab_harp_visibility),$CONTROL_PAR_POS_Y,14+$top_sub_button_bar_line_spacing)
				set_control_par(get_ui_id($pedaling_module_tab_harp_visibility),$CONTROL_PAR_WIDTH,46)
				set_control_par(get_ui_id($pedaling_module_tab_harp_visibility), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				make_persistent($pedaling_module_tab_harp_visibility)
				read_persistent_var($pedaling_module_tab_harp_visibility)
				select($pedaling_module_tab_harp_visibility)
					case 0
						set_text($pedaling_module_tab_harp_visibility,"[harp]")
						set_control_par(get_ui_id($gui_panel__pedaling_tab_harp), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
					case 1
						set_text($pedaling_module_tab_harp_visibility,"[ HARP ]")
						set_control_par(get_ui_id($gui_panel__pedaling_tab_harp), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				end select
			declare ui_button $pedaling_module_tab_epimoric_visibility
				$pedaling_module_tab_epimoric_visibility := 0
				set_control_par(get_ui_id($pedaling_module_tab_epimoric_visibility),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__pedaling_tab))
				set_text($pedaling_module_tab_epimoric_visibility,"epimoric")
				set_control_par(get_ui_id($pedaling_module_tab_epimoric_visibility),$CONTROL_PAR_POS_X,374)
				set_control_par(get_ui_id($pedaling_module_tab_epimoric_visibility),$CONTROL_PAR_POS_Y,14+$top_sub_button_bar_line_spacing)
				set_control_par(get_ui_id($pedaling_module_tab_epimoric_visibility),$CONTROL_PAR_WIDTH,64)
				set_control_par(get_ui_id($pedaling_module_tab_epimoric_visibility), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				make_persistent($pedaling_module_tab_epimoric_visibility)
				read_persistent_var($pedaling_module_tab_epimoric_visibility)
				select($pedaling_module_tab_epimoric_visibility)
					case 0
						set_text($pedaling_module_tab_epimoric_visibility,"[epimoric]")
						set_control_par(get_ui_id($gui_panel__pedaling_tab_epimoric), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
					case 1
						set_text($pedaling_module_tab_epimoric_visibility,"[ EPIMORIC ]")
						set_control_par(get_ui_id($gui_panel__pedaling_tab_epimoric), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				end select

		declare ui_button $modulation_module_visibility
				$modulation_module_visibility := 0
				set_text($modulation_module_visibility,"modulation")
				set_control_par(get_ui_id($modulation_module_visibility),$CONTROL_PAR_POS_X,$top_button_bar_left_margin+($top_button_bar_column_width*3))
				set_control_par(get_ui_id($modulation_module_visibility),$CONTROL_PAR_POS_Y,14)
				set_control_par(get_ui_id($modulation_module_visibility),$CONTROL_PAR_WIDTH,$top_button_bar_default_btn_width)
				set_control_par(get_ui_id($modulation_module_visibility), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				make_persistent($modulation_module_visibility)
				read_persistent_var($modulation_module_visibility)
				select($modulation_module_visibility)
					case 0
						set_text($modulation_module_visibility,"[transposition]")
						set_control_par(get_ui_id($gui_panel__modulation_tab), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
					case 1
						set_text($modulation_module_visibility,"[ TRANSPOSITION ]")
						set_control_par(get_ui_id($gui_panel__modulation_tab), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				end select
			declare ui_button $modulation_module__transposition_common_note__visibility
				$modulation_module__transposition_common_note__visibility := 0
				set_control_par(get_ui_id($modulation_module__transposition_common_note__visibility),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab))
				set_text($modulation_module__transposition_common_note__visibility,"sus")
				set_control_par(get_ui_id($modulation_module__transposition_common_note__visibility),$CONTROL_PAR_POS_X,294)
				set_control_par(get_ui_id($modulation_module__transposition_common_note__visibility),$CONTROL_PAR_POS_Y,14+$top_sub_button_bar_line_spacing)
				set_control_par(get_ui_id($modulation_module__transposition_common_note__visibility),$CONTROL_PAR_WIDTH,60)
				set_control_par(get_ui_id($modulation_module__transposition_common_note__visibility), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				make_persistent($modulation_module__transposition_common_note__visibility)
				read_persistent_var($modulation_module__transposition_common_note__visibility)
				select($modulation_module__transposition_common_note__visibility)
					case 0
						set_text($modulation_module__transposition_common_note__visibility,"[common]")
						set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_common_note), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
					case 1
						set_text($modulation_module__transposition_common_note__visibility,"[ COMMON ]")
						set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_common_note), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
				end select
			declare ui_button $modulation_module__transposition_epimoric__visibility
				$modulation_module__transposition_epimoric__visibility := 1
				set_control_par(get_ui_id($modulation_module__transposition_epimoric__visibility),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab))
				set_text($modulation_module__transposition_epimoric__visibility,"epimoric")
				set_control_par(get_ui_id($modulation_module__transposition_epimoric__visibility),$CONTROL_PAR_POS_X,353)
				set_control_par(get_ui_id($modulation_module__transposition_epimoric__visibility),$CONTROL_PAR_POS_Y,14+$top_sub_button_bar_line_spacing)
				set_control_par(get_ui_id($modulation_module__transposition_epimoric__visibility),$CONTROL_PAR_WIDTH,62)
				set_control_par(get_ui_id($modulation_module__transposition_epimoric__visibility), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				make_persistent($modulation_module__transposition_epimoric__visibility)
				read_persistent_var($modulation_module__transposition_epimoric__visibility)
				select($modulation_module__transposition_epimoric__visibility)
					case 0
						set_text($modulation_module__transposition_epimoric__visibility,"[epimoric]")
						set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_epimoric), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
					case 1
						set_text($modulation_module__transposition_epimoric__visibility,"[ EPIMORIC ]")
						set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_epimoric), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
				end select
			declare ui_button $modulation_module__transposition_interval__visibility
				$modulation_module__transposition_interval__visibility := 0
				set_control_par(get_ui_id($modulation_module__transposition_interval__visibility),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab))
				set_text($modulation_module__transposition_interval__visibility,"interval")
				set_control_par(get_ui_id($modulation_module__transposition_interval__visibility),$CONTROL_PAR_POS_X,414)
				set_control_par(get_ui_id($modulation_module__transposition_interval__visibility),$CONTROL_PAR_POS_Y,14+$top_sub_button_bar_line_spacing)
				set_control_par(get_ui_id($modulation_module__transposition_interval__visibility),$CONTROL_PAR_WIDTH,63)
				set_control_par(get_ui_id($modulation_module__transposition_interval__visibility), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				make_persistent($modulation_module__transposition_interval__visibility)
				read_persistent_var($modulation_module__transposition_interval__visibility)
				select($modulation_module__transposition_interval__visibility)
					case 0
						set_text($modulation_module__transposition_interval__visibility,"[interval]")
						set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_interval), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
					case 1
						set_text($modulation_module__transposition_interval__visibility,"[ INTERVAL ]")
						set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_interval), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
				end select
			declare ui_button $modulation_module__transposition_whammy__visibility
				$modulation_module__transposition_whammy__visibility := 0
				set_control_par(get_ui_id($modulation_module__transposition_whammy__visibility),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab))
				set_text($modulation_module__transposition_whammy__visibility,"whammy")
				set_control_par(get_ui_id($modulation_module__transposition_whammy__visibility),$CONTROL_PAR_POS_X,476)
				set_control_par(get_ui_id($modulation_module__transposition_whammy__visibility),$CONTROL_PAR_POS_Y,14+$top_sub_button_bar_line_spacing)
				set_control_par(get_ui_id($modulation_module__transposition_whammy__visibility),$CONTROL_PAR_WIDTH,62)
				set_control_par(get_ui_id($modulation_module__transposition_whammy__visibility), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				make_persistent($modulation_module__transposition_whammy__visibility)
				read_persistent_var($modulation_module__transposition_whammy__visibility)
				select($modulation_module__transposition_whammy__visibility)
					case 0
						set_text($modulation_module__transposition_whammy__visibility,"[whammy]")
						set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_whammy), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
					case 1
						set_text($modulation_module__transposition_whammy__visibility,"[ WHAMMY ]")
						set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_whammy), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
				end select
			declare ui_button $modulation_module__monzo__visibility
				$modulation_module__monzo__visibility := 0
				set_control_par(get_ui_id($modulation_module__monzo__visibility),$CONTROL_PAR_PARENT_PANEL,get_ui_id($gui_panel__modulation_tab))
				set_text($modulation_module__monzo__visibility,"monzo")
				set_control_par(get_ui_id($modulation_module__monzo__visibility),$CONTROL_PAR_POS_X,537)
				set_control_par(get_ui_id($modulation_module__monzo__visibility),$CONTROL_PAR_POS_Y,14+$top_sub_button_bar_line_spacing)
				set_control_par(get_ui_id($modulation_module__monzo__visibility),$CONTROL_PAR_WIDTH,61)
				set_control_par(get_ui_id($modulation_module__monzo__visibility), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				make_persistent($modulation_module__monzo__visibility)
				read_persistent_var($modulation_module__monzo__visibility)
				select($modulation_module__monzo__visibility)
					case 0
						set_text($modulation_module__monzo__visibility,"[monzo]")
						set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_monzo), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
					case 1
						set_text($modulation_module__monzo__visibility,"[ MONZO ]")
						set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_monzo), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
				end select
			{init correct modulation module gui:}
			if ($modulation_module_visibility = 1)
				if ($modulation_module__transposition_common_note__visibility = 1)
					set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_common_note), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				else
					set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_common_note), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
				end if
				if ($modulation_module__transposition_epimoric__visibility = 1)
					set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_epimoric), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				else
					set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_epimoric), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
				end if
				if ($modulation_module__transposition_interval__visibility = 1)
					set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_interval), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				else
					set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_interval), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
				end if
				if ($modulation_module__transposition_whammy__visibility = 1)
					set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_whammy), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				else
					set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_whammy), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
				end if
				if ($modulation_module__monzo__visibility = 1)
					set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_monzo), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
				else
					set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_monzo), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
				end if
			end if
			declare ui_button $detune_module_visibility
				$detune_module_visibility := 0
				set_text($detune_module_visibility,"detune")
				set_control_par(get_ui_id($detune_module_visibility),$CONTROL_PAR_POS_X,$top_button_bar_left_margin+($top_button_bar_column_width*4))
				set_control_par(get_ui_id($detune_module_visibility),$CONTROL_PAR_POS_Y,14)
				set_control_par(get_ui_id($detune_module_visibility),$CONTROL_PAR_WIDTH,$top_button_bar_default_btn_width)
				set_control_par(get_ui_id($detune_module_visibility), $CONTROL_PAR_TEXT_ALIGNMENT, 1)
				make_persistent($detune_module_visibility)
				read_persistent_var($detune_module_visibility)
				select($detune_module_visibility)
					case 0
						set_text($detune_module_visibility,"[detune]")
						set_control_par(get_ui_id($gui_panel__detune_tab), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
					case 1
						set_text($detune_module_visibility,"[ DETUNE ]")
						set_control_par(get_ui_id($gui_panel__detune_tab), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
				end select

				if (1=1)
				%ui_id_rpn_krosownica[ 1  ]:= get_ui_id($knob__concert_pitch__midi_key)
				%ui_id_rpn_krosownica[ 2  ]:= get_ui_id($switch__play_nearest_zone)
				%ui_id_rpn_krosownica[ 3  ]:= get_ui_id($switch__play_new_id)
				%ui_id_rpn_krosownica[ 4  ]:= get_ui_id($switch__relative_event_tuning)
				%ui_id_rpn_krosownica[ 5  ]:= get_ui_id($switch__use_white_keys)
				%ui_id_rpn_krosownica[ 6  ]:= get_ui_id($switch__use_black_keys)
				%ui_id_rpn_krosownica[ 7  ]:= get_ui_id($switch__monochrome_behaviour)
				%ui_id_rpn_krosownica[ 8  ]:= get_ui_id($knob__common_note_transposition__origin_axis1)
				%ui_id_rpn_krosownica[ 9  ]:= get_ui_id($knob__common_note_transposition__target_axis1)
				%ui_id_rpn_krosownica[ 10  ]:= get_ui_id($knob__common_note_transposition__origin_axis2)
				%ui_id_rpn_krosownica[ 11  ]:= get_ui_id($knob__common_note_transposition__target_axis2)
				%ui_id_rpn_krosownica[ 12  ]:= get_ui_id($knob__common_note_transposition__origin_axis3)
				%ui_id_rpn_krosownica[ 13  ]:= get_ui_id($knob__common_note_transposition__target_axis3)
				%ui_id_rpn_krosownica[ 14  ]:= get_ui_id($knob__common_note_transposition__origin_axis4)
				%ui_id_rpn_krosownica[ 15  ]:= get_ui_id($knob__common_note_transposition__target_axis4)
				%ui_id_rpn_krosownica[ 16  ]:= get_ui_id($knob__common_note_transposition__origin_axis5)
				%ui_id_rpn_krosownica[ 17  ]:= get_ui_id($knob__common_note_transposition__target_axis5)
				%ui_id_rpn_krosownica[ 18  ]:= get_ui_id($knob__common_note_transposition__origin_axis6)
				%ui_id_rpn_krosownica[ 19  ]:= get_ui_id($knob__common_note_transposition__target_axis6)
				%ui_id_rpn_krosownica[ 20  ]:= get_ui_id($epimoric_module_onoff)
				%ui_id_rpn_krosownica[ 21  ]:= get_ui_id($epimoric_module_A__switch1)
				%ui_id_rpn_krosownica[ 22  ]:= get_ui_id($epimoric_module_A__switch2)
				%ui_id_rpn_krosownica[ 23  ]:= get_ui_id($epimoric_module_A__switch3)
				%ui_id_rpn_krosownica[ 24  ]:= get_ui_id($epimoric_module_A__knob1)
				%ui_id_rpn_krosownica[ 25  ]:= get_ui_id($epimoric_module_A__knob2)
				%ui_id_rpn_krosownica[ 26  ]:= get_ui_id($epimoric_module_A__knob3)
				%ui_id_rpn_krosownica[ 27  ]:= get_ui_id($epimoric_module_A__knob4)
				%ui_id_rpn_krosownica[ 28  ]:= get_ui_id($epimoric_module_B__switch1)
				%ui_id_rpn_krosownica[ 29  ]:= get_ui_id($epimoric_module_B__switch2)
				%ui_id_rpn_krosownica[ 30  ]:= get_ui_id($epimoric_module_B__switch3)
				%ui_id_rpn_krosownica[ 31  ]:= get_ui_id($epimoric_module_B__knob1)
				%ui_id_rpn_krosownica[ 32  ]:= get_ui_id($epimoric_module_B__knob2)
				%ui_id_rpn_krosownica[ 33  ]:= get_ui_id($epimoric_module_B__knob3)
				%ui_id_rpn_krosownica[ 34  ]:= get_ui_id($epimoric_module_B__knob4)
				%ui_id_rpn_krosownica[ 35  ]:= get_ui_id($epimoric_module_C__switch1)
				%ui_id_rpn_krosownica[ 36  ]:= get_ui_id($epimoric_module_C__switch2)
				%ui_id_rpn_krosownica[ 37  ]:= get_ui_id($epimoric_module_C__switch3)
				%ui_id_rpn_krosownica[ 38  ]:= get_ui_id($epimoric_module_C__knob1)
				%ui_id_rpn_krosownica[ 39  ]:= get_ui_id($epimoric_module_C__knob2)
				%ui_id_rpn_krosownica[ 40  ]:= get_ui_id($epimoric_module_C__knob3)
				%ui_id_rpn_krosownica[ 41  ]:= get_ui_id($epimoric_module_C__knob4)
				%ui_id_rpn_krosownica[ 42  ]:= get_ui_id($switch__transpositionbyinterval_panel_A)
				%ui_id_rpn_krosownica[ 43  ]:= get_ui_id($knob__transpositionbyinterval_panel_A_iterations)
				%ui_id_rpn_krosownica[ 44  ]:= get_ui_id($knob__transpositionbyinterval_panel_A_numerator)
				%ui_id_rpn_krosownica[ 45  ]:= get_ui_id($knob__transpositionbyinterval_panel_A_denominator)
				%ui_id_rpn_krosownica[ 46  ]:= get_ui_id($knob__transpositionbyinterval_panel_A_power_numerator)
				%ui_id_rpn_krosownica[ 47  ]:= get_ui_id($knob__transpositionbyinterval_panel_A_power_denominator)
				%ui_id_rpn_krosownica[ 48  ]:= get_ui_id($knob__transpositionbyinterval_panel_A_step_compensation)
				%ui_id_rpn_krosownica[ 49  ]:= get_ui_id($switch__transpositionbyinterval_panel_B)
				%ui_id_rpn_krosownica[ 50  ]:= get_ui_id($knob__transpositionbyinterval_panel_B_iterations)
				%ui_id_rpn_krosownica[ 51  ]:= get_ui_id($knob__transpositionbyinterval_panel_B_numerator)
				%ui_id_rpn_krosownica[ 52  ]:= get_ui_id($knob__transpositionbyinterval_panel_B_denominator)
				%ui_id_rpn_krosownica[ 53  ]:= get_ui_id($knob__transpositionbyinterval_panel_B_power_numerator)
				%ui_id_rpn_krosownica[ 54  ]:= get_ui_id($knob__transpositionbyinterval_panel_B_power_denominator)
				%ui_id_rpn_krosownica[ 55  ]:= get_ui_id($knob__transpositionbyinterval_panel_B_step_compensation)
				%ui_id_rpn_krosownica[ 56  ]:= get_ui_id($switch__transpositionbyinterval_panel_C)
				%ui_id_rpn_krosownica[ 57  ]:= get_ui_id($knob__transpositionbyinterval_panel_C_iterations)
				%ui_id_rpn_krosownica[ 58  ]:= get_ui_id($knob__transpositionbyinterval_panel_C_numerator)
				%ui_id_rpn_krosownica[ 59  ]:= get_ui_id($knob__transpositionbyinterval_panel_C_denominator)
				%ui_id_rpn_krosownica[ 60  ]:= get_ui_id($knob__transpositionbyinterval_panel_C_power_numerator)
				%ui_id_rpn_krosownica[ 61  ]:= get_ui_id($knob__transpositionbyinterval_panel_C_power_denominator)
				%ui_id_rpn_krosownica[ 62  ]:= get_ui_id($knob__transpositionbyinterval_panel_C_step_compensation)
				%ui_id_rpn_krosownica[ 63  ]:= get_ui_id($switch__transpositionbyinterval_panel_D)
				%ui_id_rpn_krosownica[ 64  ]:= get_ui_id($knob__transpositionbyinterval_panel_D_iterations)
				%ui_id_rpn_krosownica[ 65  ]:= get_ui_id($knob__transpositionbyinterval_panel_D_numerator)
				%ui_id_rpn_krosownica[ 66  ]:= get_ui_id($knob__transpositionbyinterval_panel_D_denominator)
				%ui_id_rpn_krosownica[ 67  ]:= get_ui_id($knob__transpositionbyinterval_panel_D_power_numerator)
				%ui_id_rpn_krosownica[ 68  ]:= get_ui_id($knob__transpositionbyinterval_panel_D_power_denominator)
				%ui_id_rpn_krosownica[ 69  ]:= get_ui_id($knob__transpositionbyinterval_panel_D_step_compensation)
				%ui_id_rpn_krosownica[ 70  ]:= get_ui_id($switch__transpositionbyinterval_panel_E)
				%ui_id_rpn_krosownica[ 71  ]:= get_ui_id($knob__transpositionbyinterval_panel_E_iterations)
				%ui_id_rpn_krosownica[ 72  ]:= get_ui_id($knob__transpositionbyinterval_panel_E_numerator)
				%ui_id_rpn_krosownica[ 73  ]:= get_ui_id($knob__transpositionbyinterval_panel_E_denominator)
				%ui_id_rpn_krosownica[ 74  ]:= get_ui_id($knob__transpositionbyinterval_panel_E_power_numerator)
				%ui_id_rpn_krosownica[ 75  ]:= get_ui_id($knob__transpositionbyinterval_panel_E_power_denominator)
				%ui_id_rpn_krosownica[ 76  ]:= get_ui_id($knob__transpositionbyinterval_panel_E_step_compensation)
				%ui_id_rpn_krosownica[ 77  ]:= get_ui_id($knob__whammy_panel_A_interval_numerator)
				%ui_id_rpn_krosownica[ 78  ]:= get_ui_id($knob__whammy_panel_A_interval_denominator)
				%ui_id_rpn_krosownica[ 79  ]:= get_ui_id($knob__whammy_panel_A_power_numerator)
				%ui_id_rpn_krosownica[ 80  ]:= get_ui_id($knob__whammy_panel_A_power_denominator)
				%ui_id_rpn_krosownica[ 81  ]:= get_ui_id($knob__whammy_panel_A_amount_interval_denominator)
				%ui_id_rpn_krosownica[ 82  ]:= get_ui_id($knob__whammy_panel_A_amount_power_numerator)
				%ui_id_rpn_krosownica[ 83  ]:= get_ui_id($knob__whammy_panel_B_interval_numerator)
				%ui_id_rpn_krosownica[ 84  ]:= get_ui_id($knob__whammy_panel_B_interval_denominator)
				%ui_id_rpn_krosownica[ 85  ]:= get_ui_id($knob__whammy_panel_B_power_numerator)
				%ui_id_rpn_krosownica[ 86  ]:= get_ui_id($knob__whammy_panel_B_power_denominator)
				%ui_id_rpn_krosownica[ 87  ]:= get_ui_id($knob__whammy_panel_B_amount_interval_denominator)
				%ui_id_rpn_krosownica[ 88  ]:= get_ui_id($knob__whammy_panel_B_amount_power_numerator)
				%ui_id_rpn_krosownica[ 89  ]:= get_ui_id($knob__whammy_panel_C_interval_numerator)
				%ui_id_rpn_krosownica[ 90  ]:= get_ui_id($knob__whammy_panel_C_interval_denominator)
				%ui_id_rpn_krosownica[ 91  ]:= get_ui_id($knob__whammy_panel_C_power_numerator)
				%ui_id_rpn_krosownica[ 92  ]:= get_ui_id($knob__whammy_panel_C_power_denominator)
				%ui_id_rpn_krosownica[ 93  ]:= get_ui_id($knob__whammy_panel_C_amount_interval_denominator)
				%ui_id_rpn_krosownica[ 94  ]:= get_ui_id($knob__whammy_panel_C_amount_power_numerator)
				%ui_id_rpn_krosownica[ 95  ]:= get_ui_id($knob__whammy_panel_D_interval_numerator)
				%ui_id_rpn_krosownica[ 96  ]:= get_ui_id($knob__whammy_panel_D_interval_denominator)
				%ui_id_rpn_krosownica[ 97  ]:= get_ui_id($knob__whammy_panel_D_power_numerator)
				%ui_id_rpn_krosownica[ 98  ]:= get_ui_id($knob__whammy_panel_D_power_denominator)
				%ui_id_rpn_krosownica[ 99  ]:= get_ui_id($knob__whammy_panel_D_amount_interval_denominator)
				%ui_id_rpn_krosownica[ 100  ]:= get_ui_id($knob__whammy_panel_D_amount_power_numerator)
				%ui_id_rpn_krosownica[ 101  ]:= get_ui_id($knob__whammy_panel_E_interval_numerator)
				%ui_id_rpn_krosownica[ 102  ]:= get_ui_id($knob__whammy_panel_E_interval_denominator)
				%ui_id_rpn_krosownica[ 103  ]:= get_ui_id($knob__whammy_panel_E_power_numerator)
				%ui_id_rpn_krosownica[ 104  ]:= get_ui_id($knob__whammy_panel_E_power_denominator)
				%ui_id_rpn_krosownica[ 105  ]:= get_ui_id($knob__whammy_panel_E_amount_interval_denominator)
				%ui_id_rpn_krosownica[ 106  ]:= get_ui_id($knob__whammy_panel_E_amount_power_numerator)
				%ui_id_rpn_krosownica[ 107  ]:= get_ui_id($switch_transposition_by_monzo)
				%ui_id_rpn_krosownica[ 108  ]:= get_ui_id($knob___monzo_powers_of_2)
				%ui_id_rpn_krosownica[ 109  ]:= get_ui_id($knob___monzo_powers_of_3)
				%ui_id_rpn_krosownica[ 110  ]:= get_ui_id($knob___monzo_powers_of_5)
				%ui_id_rpn_krosownica[ 111  ]:= get_ui_id($knob___monzo_powers_of_7)
				%ui_id_rpn_krosownica[ 112  ]:= get_ui_id($knob___monzo_powers_of_11)
				%ui_id_rpn_krosownica[ 113  ]:= get_ui_id($knob___monzo_powers_of_13)
				%ui_id_rpn_krosownica[ 114  ]:= get_ui_id($knob___monzo_powers_of_17)
				%ui_id_rpn_krosownica[ 115  ]:= get_ui_id($knob___monzo_powers_of_19)
				%ui_id_rpn_krosownica[ 116  ]:= get_ui_id($knob___monzo_powers_of_23)
				%ui_id_rpn_krosownica[ 117  ]:= get_ui_id($knob___monzo_powers_of_29)
				%ui_id_rpn_krosownica[ 118  ]:= get_ui_id($knob___monzo_powers_of_31)
				%ui_id_rpn_krosownica[ 119  ]:= get_ui_id($knob___monzo_powers_of_37)
				%ui_id_rpn_krosownica[ 120  ]:= get_ui_id($knob___monzo_powers_of_41)
				%ui_id_rpn_krosownica[ 121  ]:= get_ui_id($knob___monzo_powers_of_43)
				%ui_id_rpn_krosownica[ 122  ]:= get_ui_id($knob___monzo_powers_of_47)
				%ui_id_rpn_krosownica[ 123  ]:= get_ui_id($knob___monzo_powers_of_53)
				%ui_id_rpn_krosownica[ 124  ]:= get_ui_id($knob___monzo_powers_of_59)
				%ui_id_rpn_krosownica[ 125  ]:= get_ui_id($knob___monzo_powers_of_61)
				%ui_id_rpn_krosownica[ 126  ]:= get_ui_id($knob__number_of_pitch_classes__tune_by_cents)
				%ui_id_rpn_krosownica[ 127  ]:= get_ui_id($panel__tune_by_cents__navigate_left)
				%ui_id_rpn_krosownica[ 128  ]:= get_ui_id($panel__tune_by_cents__navigate_right)
				%ui_id_rpn_krosownica[ 129  ]:= get_ui_id($knob__number_of_pitch_classes__jiknobs)
				%ui_id_rpn_krosownica[ 130  ]:= get_ui_id($panel__jiknobs_nav0)
				%ui_id_rpn_krosownica[ 131  ]:= get_ui_id($panel__jiknobs_nav1)
				%ui_id_rpn_krosownica[ 132  ]:= get_ui_id($panel__jiknobs_nav2)
				%ui_id_rpn_krosownica[ 133  ]:= get_ui_id($panel__jiknobs_nav3)
				%ui_id_rpn_krosownica[ 134  ]:= get_ui_id($knob_jiknobs__numerator1)
				%ui_id_rpn_krosownica[ 135  ]:= get_ui_id($knob_jiknobs__numerator2)
				%ui_id_rpn_krosownica[ 136  ]:= get_ui_id($knob_jiknobs__numerator3)
				%ui_id_rpn_krosownica[ 137  ]:= get_ui_id($knob_jiknobs__numerator4)
				%ui_id_rpn_krosownica[ 138  ]:= get_ui_id($knob_jiknobs__numerator5)
				%ui_id_rpn_krosownica[ 139  ]:= get_ui_id($knob_jiknobs__numerator6)
				%ui_id_rpn_krosownica[ 140  ]:= get_ui_id($knob_jiknobs__numerator7)
				%ui_id_rpn_krosownica[ 141  ]:= get_ui_id($knob_jiknobs__numerator8)
				%ui_id_rpn_krosownica[ 142  ]:= get_ui_id($knob_jiknobs__numerator9)
				%ui_id_rpn_krosownica[ 143  ]:= get_ui_id($knob_jiknobs__numerator10)
				%ui_id_rpn_krosownica[ 144  ]:= get_ui_id($knob_jiknobs__numerator11)
				%ui_id_rpn_krosownica[ 145  ]:= get_ui_id($knob_jiknobs__numerator12)
				%ui_id_rpn_krosownica[ 146  ]:= get_ui_id($knob_jiknobs__numerator13)
				%ui_id_rpn_krosownica[ 147  ]:= get_ui_id($knob_jiknobs__numerator14)
				%ui_id_rpn_krosownica[ 148  ]:= get_ui_id($knob_jiknobs__numerator15)
				%ui_id_rpn_krosownica[ 149  ]:= get_ui_id($knob_jiknobs__numerator16)
				%ui_id_rpn_krosownica[ 150  ]:= get_ui_id($knob_jiknobs__numerator17)
				%ui_id_rpn_krosownica[ 151  ]:= get_ui_id($knob_jiknobs__numerator18)
				%ui_id_rpn_krosownica[ 152  ]:= get_ui_id($knob_jiknobs__numerator19)
				%ui_id_rpn_krosownica[ 153  ]:= get_ui_id($knob_jiknobs__numerator20)
				%ui_id_rpn_krosownica[ 154  ]:= get_ui_id($knob_jiknobs__numerator21)
				%ui_id_rpn_krosownica[ 155  ]:= get_ui_id($knob_jiknobs__numerator22)
				%ui_id_rpn_krosownica[ 156  ]:= get_ui_id($knob_jiknobs__numerator23)
				%ui_id_rpn_krosownica[ 157  ]:= get_ui_id($knob_jiknobs__numerator24)
				%ui_id_rpn_krosownica[ 158  ]:= get_ui_id($knob_jiknobs__denominator1)
				%ui_id_rpn_krosownica[ 159  ]:= get_ui_id($knob_jiknobs__denominator2)
				%ui_id_rpn_krosownica[ 160  ]:= get_ui_id($knob_jiknobs__denominator3)
				%ui_id_rpn_krosownica[ 161  ]:= get_ui_id($knob_jiknobs__denominator4)
				%ui_id_rpn_krosownica[ 162  ]:= get_ui_id($knob_jiknobs__denominator5)
				%ui_id_rpn_krosownica[ 163  ]:= get_ui_id($knob_jiknobs__denominator6)
				%ui_id_rpn_krosownica[ 164  ]:= get_ui_id($knob_jiknobs__denominator7)
				%ui_id_rpn_krosownica[ 165  ]:= get_ui_id($knob_jiknobs__denominator8)
				%ui_id_rpn_krosownica[ 166  ]:= get_ui_id($knob_jiknobs__denominator9)
				%ui_id_rpn_krosownica[ 167  ]:= get_ui_id($knob_jiknobs__denominator10)
				%ui_id_rpn_krosownica[ 168  ]:= get_ui_id($knob_jiknobs__denominator11)
				%ui_id_rpn_krosownica[ 169  ]:= get_ui_id($knob_jiknobs__denominator12)
				%ui_id_rpn_krosownica[ 170  ]:= get_ui_id($knob_jiknobs__denominator13)
				%ui_id_rpn_krosownica[ 171  ]:= get_ui_id($knob_jiknobs__denominator14)
				%ui_id_rpn_krosownica[ 172  ]:= get_ui_id($knob_jiknobs__denominator15)
				%ui_id_rpn_krosownica[ 173  ]:= get_ui_id($knob_jiknobs__denominator16)
				%ui_id_rpn_krosownica[ 174  ]:= get_ui_id($knob_jiknobs__denominator17)
				%ui_id_rpn_krosownica[ 175  ]:= get_ui_id($knob_jiknobs__denominator18)
				%ui_id_rpn_krosownica[ 176  ]:= get_ui_id($knob_jiknobs__denominator19)
				%ui_id_rpn_krosownica[ 177  ]:= get_ui_id($knob_jiknobs__denominator20)
				%ui_id_rpn_krosownica[ 178  ]:= get_ui_id($knob_jiknobs__denominator21)
				%ui_id_rpn_krosownica[ 179  ]:= get_ui_id($knob_jiknobs__denominator22)
				%ui_id_rpn_krosownica[ 180  ]:= get_ui_id($knob_jiknobs__denominator23)
				%ui_id_rpn_krosownica[ 181  ]:= get_ui_id($knob_jiknobs__denominator24)
				%ui_id_rpn_krosownica[ 182  ]:= get_ui_id($knob__number_of_pitch_classes__expknobs)
				%ui_id_rpn_krosownica[ 183  ]:= get_ui_id($panel__expknobs_nav0)
				%ui_id_rpn_krosownica[ 184  ]:= get_ui_id($panel__expknobs_nav1)
				%ui_id_rpn_krosownica[ 185  ]:= get_ui_id($panel__expknobs_nav2)
				%ui_id_rpn_krosownica[ 186  ]:= get_ui_id($panel__expknobs_nav3)
				%ui_id_rpn_krosownica[ 187  ]:= get_ui_id($knob_expknobs__numerator1)
				%ui_id_rpn_krosownica[ 188  ]:= get_ui_id($knob_expknobs__numerator2)
				%ui_id_rpn_krosownica[ 189  ]:= get_ui_id($knob_expknobs__numerator3)
				%ui_id_rpn_krosownica[ 190  ]:= get_ui_id($knob_expknobs__numerator4)
				%ui_id_rpn_krosownica[ 191  ]:= get_ui_id($knob_expknobs__numerator5)
				%ui_id_rpn_krosownica[ 192  ]:= get_ui_id($knob_expknobs__numerator6)
				%ui_id_rpn_krosownica[ 193  ]:= get_ui_id($knob_expknobs__numerator7)
				%ui_id_rpn_krosownica[ 194  ]:= get_ui_id($knob_expknobs__numerator8)
				%ui_id_rpn_krosownica[ 195  ]:= get_ui_id($knob_expknobs__numerator9)
				%ui_id_rpn_krosownica[ 196  ]:= get_ui_id($knob_expknobs__numerator10)
				%ui_id_rpn_krosownica[ 197  ]:= get_ui_id($knob_expknobs__numerator11)
				%ui_id_rpn_krosownica[ 198  ]:= get_ui_id($knob_expknobs__numerator12)
				%ui_id_rpn_krosownica[ 199  ]:= get_ui_id($knob_expknobs__numerator13)
				%ui_id_rpn_krosownica[ 200  ]:= get_ui_id($knob_expknobs__numerator14)
				%ui_id_rpn_krosownica[ 201  ]:= get_ui_id($knob_expknobs__numerator15)
				%ui_id_rpn_krosownica[ 202  ]:= get_ui_id($knob_expknobs__numerator16)
				%ui_id_rpn_krosownica[ 203  ]:= get_ui_id($knob_expknobs__numerator17)
				%ui_id_rpn_krosownica[ 204  ]:= get_ui_id($knob_expknobs__numerator18)
				%ui_id_rpn_krosownica[ 205  ]:= get_ui_id($knob_expknobs__numerator19)
				%ui_id_rpn_krosownica[ 206  ]:= get_ui_id($knob_expknobs__numerator20)
				%ui_id_rpn_krosownica[ 207  ]:= get_ui_id($knob_expknobs__numerator21)
				%ui_id_rpn_krosownica[ 208  ]:= get_ui_id($knob_expknobs__numerator22)
				%ui_id_rpn_krosownica[ 209  ]:= get_ui_id($knob_expknobs__numerator23)
				%ui_id_rpn_krosownica[ 210  ]:= get_ui_id($knob_expknobs__numerator24)
				%ui_id_rpn_krosownica[ 211  ]:= get_ui_id($knob_expknobs__denominator1)
				%ui_id_rpn_krosownica[ 212  ]:= get_ui_id($knob_expknobs__denominator2)
				%ui_id_rpn_krosownica[ 213  ]:= get_ui_id($knob_expknobs__denominator3)
				%ui_id_rpn_krosownica[ 214  ]:= get_ui_id($knob_expknobs__denominator4)
				%ui_id_rpn_krosownica[ 215  ]:= get_ui_id($knob_expknobs__denominator5)
				%ui_id_rpn_krosownica[ 216  ]:= get_ui_id($knob_expknobs__denominator6)
				%ui_id_rpn_krosownica[ 217  ]:= get_ui_id($knob_expknobs__denominator7)
				%ui_id_rpn_krosownica[ 218  ]:= get_ui_id($knob_expknobs__denominator8)
				%ui_id_rpn_krosownica[ 219  ]:= get_ui_id($knob_expknobs__denominator9)
				%ui_id_rpn_krosownica[ 220  ]:= get_ui_id($knob_expknobs__denominator10)
				%ui_id_rpn_krosownica[ 221  ]:= get_ui_id($knob_expknobs__denominator11)
				%ui_id_rpn_krosownica[ 222  ]:= get_ui_id($knob_expknobs__denominator12)
				%ui_id_rpn_krosownica[ 223  ]:= get_ui_id($knob_expknobs__denominator13)
				%ui_id_rpn_krosownica[ 224  ]:= get_ui_id($knob_expknobs__denominator14)
				%ui_id_rpn_krosownica[ 225  ]:= get_ui_id($knob_expknobs__denominator15)
				%ui_id_rpn_krosownica[ 226  ]:= get_ui_id($knob_expknobs__denominator16)
				%ui_id_rpn_krosownica[ 227  ]:= get_ui_id($knob_expknobs__denominator17)
				%ui_id_rpn_krosownica[ 228  ]:= get_ui_id($knob_expknobs__denominator18)
				%ui_id_rpn_krosownica[ 229  ]:= get_ui_id($knob_expknobs__denominator19)
				%ui_id_rpn_krosownica[ 230  ]:= get_ui_id($knob_expknobs__denominator20)
				%ui_id_rpn_krosownica[ 231  ]:= get_ui_id($knob_expknobs__denominator21)
				%ui_id_rpn_krosownica[ 232  ]:= get_ui_id($knob_expknobs__denominator22)
				%ui_id_rpn_krosownica[ 233  ]:= get_ui_id($knob_expknobs__denominator23)
				%ui_id_rpn_krosownica[ 234  ]:= get_ui_id($knob_expknobs__denominator24)
				%ui_id_rpn_krosownica[ 235  ]:= get_ui_id($efg_generator_1)
				%ui_id_rpn_krosownica[ 236  ]:= get_ui_id($efg_generator_2)
				%ui_id_rpn_krosownica[ 237  ]:= get_ui_id($efg_generator_3)
				%ui_id_rpn_krosownica[ 238  ]:= get_ui_id($efg_generator_4)
				%ui_id_rpn_krosownica[ 239  ]:= get_ui_id($efg_generator_5)
				%ui_id_rpn_krosownica[ 240  ]:= get_ui_id($knob_cps_n__generator_set_size)
				%ui_id_rpn_krosownica[ 241  ]:= get_ui_id($knob_cps_k__num_of_elem_in_combination)
				%ui_id_rpn_krosownica[ 242  ]:= get_ui_id($cps_identity)
				%ui_id_rpn_krosownica[ 243  ]:= get_ui_id($knob_cps_generator_1)
				%ui_id_rpn_krosownica[ 244  ]:= get_ui_id($knob_cps_generator_2)
				%ui_id_rpn_krosownica[ 245  ]:= get_ui_id($knob_cps_generator_3)
				%ui_id_rpn_krosownica[ 246  ]:= get_ui_id($knob_cps_generator_4)
				%ui_id_rpn_krosownica[ 247  ]:= get_ui_id($knob_cps_generator_5)
				%ui_id_rpn_krosownica[ 248  ]:= get_ui_id($knob_cps_generator_6)
				%ui_id_rpn_krosownica[ 249  ]:= get_ui_id($knob__script_min)
				%ui_id_rpn_krosownica[ 250  ]:= get_ui_id($knob__script_max)
				%ui_id_rpn_krosownica[ 251  ]:= get_ui_id($knob__number_of_pitch_classes__tune_by_ji_ratios_precise)
				%ui_id_rpn_krosownica[ 252  ]:= get_ui_id($panel__tune_by_ji_ratios_precise__navigate_left)
				%ui_id_rpn_krosownica[ 253  ]:= get_ui_id($panel__tune_by_ji_ratios_precise__navigate_right)
				%ui_id_rpn_krosownica[ 254  ]:= get_ui_id($knob__number_of_pitch_classes__tune_by_exp_ratios)
				%ui_id_rpn_krosownica[ 255  ]:= get_ui_id($panel__tune_by_exponent_ratios__navigate_left)
				%ui_id_rpn_krosownica[ 256  ]:= get_ui_id($panel__tune_by_exponent_ratios__navigate_right)
				%ui_id_rpn_krosownica[ 257  ]:= get_ui_id($knob__number_of_pitch_classes__freqratio)
				%ui_id_rpn_krosownica[ 258  ]:= get_ui_id($panel__freqratio__navigate_left)
				%ui_id_rpn_krosownica[ 259  ]:= get_ui_id($panel__freqratio__navigate_right)
				%ui_id_rpn_krosownica[ 260  ]:= get_ui_id($knob__zalewski_qnz_deformation_numerator)
				%ui_id_rpn_krosownica[ 261  ]:= get_ui_id($knob__zalewski_qnz_deformation_denominator)
				%ui_id_rpn_krosownica[ 262  ]:= get_ui_id($knob__zalewski_qnz_order)
				%ui_id_rpn_krosownica[ 263  ]:= get_ui_id($knob__zalewski__cursor_position)
				%ui_id_rpn_krosownica[ 264  ]:= get_ui_id($knob__zalewski__var_a)
				%ui_id_rpn_krosownica[ 265  ]:= get_ui_id($knob__zalewski__var_b)
				%ui_id_rpn_krosownica[ 266  ]:= get_ui_id($knob__zalewski__var_c)
				%ui_id_rpn_krosownica[ 267  ]:= get_ui_id($knob__zalewski__template_ratio_numerator)
				%ui_id_rpn_krosownica[ 268  ]:= get_ui_id($knob__zalewski__template_ratio_denominator)
				%ui_id_rpn_krosownica[ 269  ]:= get_ui_id($gui_zalewski__struktura_odbita)
				%ui_id_rpn_krosownica[ 270  ]:= get_ui_id($gui_zalewski__struktura_przeciwna)
				%ui_id_rpn_krosownica[ 271  ]:= get_ui_id($gui_zalewski__clear_all)
				%ui_id_rpn_krosownica[ 272  ]:= get_ui_id($gui_zalewski__backspace)
				%ui_id_rpn_krosownica[ 273  ]:= get_ui_id($gui_zalewski__spacja)
				%ui_id_rpn_krosownica[ 274  ]:= get_ui_id($gui_zalewski__template_ratio)
				%ui_id_rpn_krosownica[ 275  ]:= get_ui_id($gui_zalewski__plus)
				%ui_id_rpn_krosownica[ 276  ]:= get_ui_id($gui_zalewski__minus)
				%ui_id_rpn_krosownica[ 277  ]:= get_ui_id($gui_zalewski__razy)
				%ui_id_rpn_krosownica[ 278  ]:= get_ui_id($gui_zalewski__przecinek)
				%ui_id_rpn_krosownica[ 279  ]:= get_ui_id($gui_zalewski__decimal_places_separator)
				%ui_id_rpn_krosownica[ 280  ]:= get_ui_id($gui_zalewski__podzielic)
				%ui_id_rpn_krosownica[ 281  ]:= get_ui_id($gui_zalewski__numpad_0)
				%ui_id_rpn_krosownica[ 282  ]:= get_ui_id($gui_zalewski__numpad_1)
				%ui_id_rpn_krosownica[ 283  ]:= get_ui_id($gui_zalewski__numpad_2)
				%ui_id_rpn_krosownica[ 284  ]:= get_ui_id($gui_zalewski__numpad_3)
				%ui_id_rpn_krosownica[ 285  ]:= get_ui_id($gui_zalewski__numpad_4)
				%ui_id_rpn_krosownica[ 286  ]:= get_ui_id($gui_zalewski__numpad_5)
				%ui_id_rpn_krosownica[ 287  ]:= get_ui_id($gui_zalewski__numpad_6)
				%ui_id_rpn_krosownica[ 288  ]:= get_ui_id($gui_zalewski__numpad_7)
				%ui_id_rpn_krosownica[ 289  ]:= get_ui_id($gui_zalewski__numpad_8)
				%ui_id_rpn_krosownica[ 290  ]:= get_ui_id($gui_zalewski__numpad_9)
				%ui_id_rpn_krosownica[ 291  ]:= get_ui_id($gui_zalewski__var_a)
				%ui_id_rpn_krosownica[ 292  ]:= get_ui_id($gui_zalewski__var_b)
				%ui_id_rpn_krosownica[ 293  ]:= get_ui_id($gui_zalewski__var_c)
				%ui_id_rpn_krosownica[ 294  ]:= get_ui_id($knob__generator_interval_numerator)
				%ui_id_rpn_krosownica[ 295  ]:= get_ui_id($knob__generator_interval_denominator)
				%ui_id_rpn_krosownica[ 296  ]:= get_ui_id($knob__generator_interval_power_numerator)
				%ui_id_rpn_krosownica[ 297  ]:= get_ui_id($knob__generator_interval_power_denominator)
				%ui_id_rpn_krosownica[ 298  ]:= get_ui_id($knob__periodandgenerator__stack_up)
				%ui_id_rpn_krosownica[ 299  ]:= get_ui_id($knob__periodandgenerator__num_of_untempered_intervals)
				%ui_id_rpn_krosownica[ 300  ]:= get_ui_id($knob__periodandgenerator__stack_down)
				%ui_id_rpn_krosownica[ 301  ]:= get_ui_id($knob__comma_interval_numerator)
				%ui_id_rpn_krosownica[ 302  ]:= get_ui_id($knob__comma_interval_denominator)
				%ui_id_rpn_krosownica[ 303  ]:= get_ui_id($knob__comma_fraction_numerator)
				%ui_id_rpn_krosownica[ 304  ]:= get_ui_id($knob__comma_fraction_denominator)
				%ui_id_rpn_krosownica[ 305  ]:= get_ui_id($knob__epimoric_generators__gradus1)
				%ui_id_rpn_krosownica[ 306  ]:= get_ui_id($knob__epimoric_generators__modus1)
				%ui_id_rpn_krosownica[ 307  ]:= get_ui_id($epimoric_generators_utonal_switch_1)
				%ui_id_rpn_krosownica[ 308  ]:= get_ui_id($epimoric_generators_utonal_switch_2)
				%ui_id_rpn_krosownica[ 309  ]:= get_ui_id($knob__epimoric_generators__gradus2)
				%ui_id_rpn_krosownica[ 310  ]:= get_ui_id($knob__epimoric_generators__modus2)
				%ui_id_rpn_krosownica[ 311  ]:= get_ui_id($knob__edtuning_fracofequave_numerator)
				%ui_id_rpn_krosownica[ 312  ]:= get_ui_id($knob__edtuning_fracofequave_denominator)
				%ui_id_rpn_krosownica[ 313  ]:= get_ui_id($knob__edtuning_detune_step_by_cents)
				%ui_id_rpn_krosownica[ 314  ]:= get_ui_id($knob__edtuning_detune_step_by_centpercent)
				%ui_id_rpn_krosownica[ 315  ]:= get_ui_id($setup_module_visibility)
				%ui_id_rpn_krosownica[ 316  ]:= get_ui_id($scalesmithing_module_visibility)
				%ui_id_rpn_krosownica[ 317  ]:= get_ui_id($modulation_module_visibility)
				%ui_id_rpn_krosownica[ 318  ]:= get_ui_id($detune_module_visibility)
				%ui_id_rpn_krosownica[ 319  ]:= get_ui_id($pedaling_module_visibility)
				%ui_id_rpn_krosownica[ 320  ]:= get_ui_id($pedaling_module_tab_sus_visibility)
				%ui_id_rpn_krosownica[ 321  ]:= get_ui_id($pedaling_module_tab_harp_visibility)
				%ui_id_rpn_krosownica[ 322  ]:= get_ui_id($pedaling_module_tab_epimoric_visibility)
				%ui_id_rpn_krosownica[ 323  ]:= get_ui_id($modulation_module__transposition_common_note__visibility)
				%ui_id_rpn_krosownica[ 324  ]:= get_ui_id($modulation_module__transposition_epimoric__visibility)
				%ui_id_rpn_krosownica[ 325  ]:= get_ui_id($modulation_module__transposition_interval__visibility)
				%ui_id_rpn_krosownica[ 326  ]:= get_ui_id($modulation_module__transposition_whammy__visibility)
				%ui_id_rpn_krosownica[ 327  ]:= get_ui_id($modulation_module__monzo__visibility)
				%ui_id_rpn_krosownica[ 328  ]:= get_ui_id($uiswitch__suspedal_1)
				%ui_id_rpn_krosownica[ 329  ]:= get_ui_id($uiswitch__suspedal_2)
				%ui_id_rpn_krosownica[ 330  ]:= get_ui_id($uiswitch__suspedal_3)
				%ui_id_rpn_krosownica[ 331  ]:= get_ui_id($uiswitch__suspedal_4)
				%ui_id_rpn_krosownica[ 332  ]:= get_ui_id($uiswitch__suspedal_5)
				%ui_id_rpn_krosownica[ 333  ]:= get_ui_id($uiswitch__suspedal_6)
				%ui_id_rpn_krosownica[ 334  ]:= get_ui_id($uiswitch__suspedal_7)
				%ui_id_rpn_krosownica[ 335  ]:= get_ui_id($uiswitch__suspedal_8)
				%ui_id_rpn_krosownica[ 336  ]:= get_ui_id($uiswitch__suspedal_9)
				%ui_id_rpn_krosownica[ 337  ]:= get_ui_id($uiswitch__suspedal_10)
				%ui_id_rpn_krosownica[ 338  ]:= get_ui_id($uiswitch__suspedal_11)
				%ui_id_rpn_krosownica[ 339  ]:= get_ui_id($uiswitch__suspedal_12)
				%ui_id_rpn_krosownica[ 340  ]:= get_ui_id($knob__harppedal_1__d_sharp_numerator)
				%ui_id_rpn_krosownica[ 341  ]:= get_ui_id($knob__harppedal_1__d_sharp_denominator)
				%ui_id_rpn_krosownica[ 342  ]:= get_ui_id($knob__harppedal_2__c_sharp_numerator)
				%ui_id_rpn_krosownica[ 343  ]:= get_ui_id($knob__harppedal_2__c_sharp_denominator)
				%ui_id_rpn_krosownica[ 344  ]:= get_ui_id($knob__harppedal_3__b_sharp_numerator)
				%ui_id_rpn_krosownica[ 345  ]:= get_ui_id($knob__harppedal_3__b_sharp_denominator)
				%ui_id_rpn_krosownica[ 346  ]:= get_ui_id($knob__harppedal_4__e_sharp_numerator)
				%ui_id_rpn_krosownica[ 347  ]:= get_ui_id($knob__harppedal_4__e_sharp_denominator)
				%ui_id_rpn_krosownica[ 348  ]:= get_ui_id($knob__harppedal_5__f_sharp_numerator)
				%ui_id_rpn_krosownica[ 349  ]:= get_ui_id($knob__harppedal_5__f_sharp_denominator)
				%ui_id_rpn_krosownica[ 350  ]:= get_ui_id($knob__harppedal_6__g_sharp_numerator)
				%ui_id_rpn_krosownica[ 351  ]:= get_ui_id($knob__harppedal_6__g_sharp_denominator)
				%ui_id_rpn_krosownica[ 352  ]:= get_ui_id($knob__harppedal_7__a_sharp_numerator)
				%ui_id_rpn_krosownica[ 353  ]:= get_ui_id($knob__harppedal_7__a_sharp_denominator)
				%ui_id_rpn_krosownica[ 354  ]:= get_ui_id($knob__harppedal_1__d_flat_numerator)
				%ui_id_rpn_krosownica[ 355  ]:= get_ui_id($knob__harppedal_1__d_flat_denominator)
				%ui_id_rpn_krosownica[ 356  ]:= get_ui_id($knob__harppedal_2__c_flat_numerator)
				%ui_id_rpn_krosownica[ 357  ]:= get_ui_id($knob__harppedal_2__c_flat_denominator)
				%ui_id_rpn_krosownica[ 358  ]:= get_ui_id($knob__harppedal_3__b_flat_numerator)
				%ui_id_rpn_krosownica[ 359  ]:= get_ui_id($knob__harppedal_3__b_flat_denominator)
				%ui_id_rpn_krosownica[ 360  ]:= get_ui_id($knob__harppedal_4__e_flat_numerator)
				%ui_id_rpn_krosownica[ 361  ]:= get_ui_id($knob__harppedal_4__e_flat_denominator)
				%ui_id_rpn_krosownica[ 362  ]:= get_ui_id($knob__harppedal_5__f_flat_numerator)
				%ui_id_rpn_krosownica[ 363  ]:= get_ui_id($knob__harppedal_5__f_flat_denominator)
				%ui_id_rpn_krosownica[ 364  ]:= get_ui_id($knob__harppedal_6__g_flat_numerator)
				%ui_id_rpn_krosownica[ 365  ]:= get_ui_id($knob__harppedal_6__g_flat_denominator)
				%ui_id_rpn_krosownica[ 366  ]:= get_ui_id($knob__harppedal_7__a_flat_numerator)
				%ui_id_rpn_krosownica[ 367  ]:= get_ui_id($knob__harppedal_7__a_flat_denominator)
				%ui_id_rpn_krosownica[ 368  ]:= get_ui_id($switch__harppedal_1__d_sharp)
				%ui_id_rpn_krosownica[ 369  ]:= get_ui_id($switch__harppedal_2__c_sharp)
				%ui_id_rpn_krosownica[ 370  ]:= get_ui_id($switch__harppedal_3__b_sharp)
				%ui_id_rpn_krosownica[ 371  ]:= get_ui_id($switch__harppedal_4__e_sharp)
				%ui_id_rpn_krosownica[ 372  ]:= get_ui_id($switch__harppedal_5__f_sharp)
				%ui_id_rpn_krosownica[ 373  ]:= get_ui_id($switch__harppedal_6__g_sharp)
				%ui_id_rpn_krosownica[ 374  ]:= get_ui_id($switch__harppedal_7__a_sharp)
				%ui_id_rpn_krosownica[ 375  ]:= get_ui_id($switch__harppedal_1__d_flat)
				%ui_id_rpn_krosownica[ 376  ]:= get_ui_id($switch__harppedal_2__c_flat)
				%ui_id_rpn_krosownica[ 377  ]:= get_ui_id($switch__harppedal_3__b_flat)
				%ui_id_rpn_krosownica[ 378  ]:= get_ui_id($switch__harppedal_4__e_flat)
				%ui_id_rpn_krosownica[ 379  ]:= get_ui_id($switch__harppedal_5__f_flat)
				%ui_id_rpn_krosownica[ 380  ]:= get_ui_id($switch__harppedal_6__g_flat)
				%ui_id_rpn_krosownica[ 381  ]:= get_ui_id($switch__harppedal_7__a_flat)
				%ui_id_rpn_krosownica[ 382  ]:= get_ui_id($epimoric_bitonal_module_onoff)
				%ui_id_rpn_krosownica[ 383  ]:= get_ui_id($epimoric_bitonal_twinscale_module__switch1)
				%ui_id_rpn_krosownica[ 384  ]:= get_ui_id($epimoric_bitonal_twinscale_module__switch2)
				%ui_id_rpn_krosownica[ 385  ]:= get_ui_id($epimoric_bitonal_twinscale_module__switch3)
				%ui_id_rpn_krosownica[ 386  ]:= get_ui_id($epimoric_bitonal_twinscale_module__knob1)
				%ui_id_rpn_krosownica[ 387  ]:= get_ui_id($epimoric_bitonal_twinscale_module__knob2)
				%ui_id_rpn_krosownica[ 388  ]:= get_ui_id($epimoric_bitonal_twinscale_module___sort)
				%ui_id_rpn_krosownica[ 389  ]:= get_ui_id($knob__masterdetune_numerator)
				%ui_id_rpn_krosownica[ 390  ]:= get_ui_id($knob__masterdetune_denominator)
				%ui_id_rpn_krosownica[ 391  ]:= get_ui_id($knob__masterdetune_by_cents)
				%ui_id_rpn_krosownica[ 392  ]:= get_ui_id($knob__masterdetune_by_centpercents)
				%ui_id_rpn_krosownica[ 393  ]:= get_ui_id($knob__mastertransposition__equave)
				%ui_id_rpn_krosownica[ 394  ]:= get_ui_id($knob__mastertransposition__octave)
				%ui_id_rpn_krosownica[ 395  ]:= get_ui_id($knob__mastertransposition__steps)
				%ui_id_rpn_krosownica[ 396  ]:= get_ui_id($knob__mastertransposition_circleoffifths)
				%ui_id_rpn_krosownica[ 397  ]:= get_ui_id($switch__octave_stretching)
				%ui_id_rpn_krosownica[ 398  ]:= get_ui_id($turn_on_global_cent_mask)
				%ui_id_rpn_krosownica[ 399  ]:= get_ui_id($panel__detune_specific_key__navigate_left)
				%ui_id_rpn_krosownica[ 400  ]:= get_ui_id($panel__detune_specific_key__navigate_right)
				%ui_id_rpn_krosownica[ 401  ]:= get_ui_id($knob__interval_of_equivalence_numerator)
				%ui_id_rpn_krosownica[ 402  ]:= get_ui_id($knob__interval_of_equivalence_denominator)
				%ui_id_rpn_krosownica[ 403  ]:= get_ui_id($knob__interval_of_equivalence_power_numerator)
				%ui_id_rpn_krosownica[ 404  ]:= get_ui_id($knob__interval_of_equivalence_power_denominator)
				%ui_id_rpn_krosownica[ 405  ]:= get_ui_id($switch__stacking_method)
				%ui_id_rpn_krosownica[ 406  ]:= get_ui_id($switch__interval_reduction)
				%ui_id_rpn_krosownica[ 407  ]:= get_ui_id($switch__reduce_by_octave)
				%ui_id_rpn_krosownica[ 408  ]:= get_ui_id($switch__reduction_mode)
				%ui_id_rpn_krosownica[ 409  ]:= get_ui_id($switch__quantize_to_12edo)
				%ui_id_rpn_krosownica[ 410  ]:= get_ui_id($switch__adaptive_pure_tuning)
				%ui_id_rpn_krosownica[ 411  ]:= get_ui_id($switch__quantizebeatstobpm)
				%ui_id_rpn_krosownica[ 412  ]:= get_ui_id($switch_common_note_transposition_module)
				%ui_id_rpn_krosownica[ 413  ]:= get_ui_id($whammy_module_onoff)
					{relative ports from 415 are 421 reserved for concert pitch data chunks}
				%ui_id_rpn_krosownica[ 425  ]:= get_ui_id($dummy_knob_semitone)
				%ui_id_rpn_krosownica[ 426  ]:= get_ui_id($dummy_knob_velocity)
				%ui_id_rpn_krosownica[ 427  ]:= get_ui_id($dummy_knob_chroma)
				%ui_id_rpn_krosownica[ 428  ]:= get_ui_id($dummy_knob_detune_value_cents)
				%ui_id_rpn_krosownica[ 429  ]:= get_ui_id($dummy_knob_detune_value_cent_percentage)
				%ui_id_rpn_krosownica[ 430  ]:= get_ui_id($switch__ksp_mode_0changetune_1eventpartune)
				%ui_id_rpn_krosownica[ 431  ]:= get_ui_id($efg_remove_step_duplicates)

			end if
end on

function debug()
	exit
end function

function jm_rpn_send()
	if ($switch__rpn_connect = 0)
		exit
	end if
	set_rpn($rpn_connect__channel_num + $rpn_relative_port_index, get_control_par(%ui_id_rpn_krosownica[$rpn_relative_port_index], $CONTROL_PAR_VALUE) - get_control_par(%ui_id_rpn_krosownica[$rpn_relative_port_index], $CONTROL_PAR_MIN_VALUE))	
end function

function update__last_note_info_panel()
	{--> ui_panel $panel__last_note_info}
				{display frequency:}
				~display_frequency_of_the_note_relto69a440 := round( ~event_note_pitch_hz *1000.0)/1000.0 {display only 3 decimal places of the value}
				set_text ($label__last_freq,~display_frequency_of_the_note_relto69a440 & "Hz")

				{display detune amount:}
				{detune value (cents) from the played key}
				~display_detune_value_in_cents := int_to_real($detune_amount_milicents)/1000.0 {tune amount in cents}
				{~display_detune_value_in_cents := ~display_detune_value_in_cents + int_to_real((69+$key_shift-$target_key)*100)}
				set_text ($label__last_detune,~display_detune_value_in_cents & "c")

				{display midi note number:}
				if ($play_nearest_zone = 1)
					if ($target_key - $display_value_of_the_most_recent_event_note > 0)
						set_text ($label__last_midi_note,"" & $display_value_of_the_most_recent_event_note & "   + " & ($target_key-$display_value_of_the_most_recent_event_note) & "s" )
					else
						set_text ($label__last_midi_note,"" & $display_value_of_the_most_recent_event_note & "   - " & abs($target_key-$display_value_of_the_most_recent_event_note) & "s" )
					end if
				else
					{target_key is the same as the event_note; no key shifting applied}
					set_text ($label__last_midi_note,"" & $display_value_of_the_most_recent_event_note & "")
				end if
				
				if (in_range($target_key,0,128))
					$dummy_knob_semitone := $nearest_key
					set_knob_label ($dummy_knob_semitone, " " & $nearest_key)
				end if

				$dummy_knob_velocity := $target_velocity
					set_knob_label ($dummy_knob_velocity, " " & $target_velocity)
				$dummy_knob_chroma := $dummy_knob_semitone mod 12
					set_knob_label ($dummy_knob_chroma, "   " & !note_class[$dummy_knob_chroma])

				if ($play_nearest_zone = 1)
					$dummy_knobs_helper_var := ($detune_amount_milicents)
				end if
				if ($play_nearest_zone = 0)
					$dummy_knobs_helper_var := (($target_key-$nearest_key) * 100000) + $detune_amount_milicents
				end if

				$dummy_knob_detune_value_cents := $dummy_knobs_helper_var / 1000
					set_knob_label ($dummy_knob_detune_value_cents, " " & $dummy_knob_detune_value_cents)
				$dummy_knob_detune_value_cent_percentage := abs(($target_key-$nearest_key)*1000000 + ($detune_amount_milicents) / 10) mod 100
					set_knob_label ($dummy_knob_detune_value_cent_percentage, " " & $dummy_knob_detune_value_cent_percentage)
					
end function


function recalculate_concert_pitch()
	~__f1_ := int_to_real($ui_value_diapason_hz)/10000.0
	~__f2_ := pow(2.0 , int_to_real($concert_pitch__microtonal_detune)*log(9.0/8.0) / (1000000.0*log(2.0)))
	{
	~__f3_ := pow(2.0 , (69.0-int_to_real($concert_pitch_midi_key))/12.0)
	}
	~concert_pitch_freq := ~__f1_ * ~__f2_
	~concert_pitch_deviation_from_a440 := 1200.0*log(~concert_pitch_freq/440.0)/(log(2.0))
end function

function onuicontrol__ui_value_diapason_hz()
	call recalculate_concert_pitch

end function
on ui_control ($ui_value_diapason_hz)
{	if ( (~concert_pitch_freq-432.0) < 0.0001  and  (~concert_pitch_freq-432.) > -0.0001 )
		$ui_value_diapason_hz := 2137*10000
		~concert_pitch_freq := 2137.0
	end if}
	call onuicontrol__ui_value_diapason_hz

	if ($switch__rpn_connect = 1)
		%rpn_connect__chunk[6] := ($ui_value_diapason_hz / 128)
		%rpn_connect__chunk[5] := (%rpn_connect__chunk[6] / 128)
		%rpn_connect__chunk[4] := (%rpn_connect__chunk[5] / 128)
		%rpn_connect__chunk[3] := (%rpn_connect__chunk[4] / 128)
		%rpn_connect__chunk[2] := (%rpn_connect__chunk[3] / 128)
		%rpn_connect__chunk[1] := (%rpn_connect__chunk[2] / 128)
		%rpn_connect__chunk[0] := (%rpn_connect__chunk[1] / 128)
		%rpn_connect__chunk[6] := %rpn_connect__chunk[6] mod 128
		%rpn_connect__chunk[5] := %rpn_connect__chunk[5] mod 128
		%rpn_connect__chunk[4] := %rpn_connect__chunk[4] mod 128
		%rpn_connect__chunk[3] := %rpn_connect__chunk[3] mod 128
		%rpn_connect__chunk[2] := %rpn_connect__chunk[2] mod 128
		%rpn_connect__chunk[1] := %rpn_connect__chunk[1] mod 128
		%rpn_connect__chunk[0] := %rpn_connect__chunk[0] mod 128

		if(1=1)
			wait(1000)
			set_rpn($rpn_connect__channel_num + 415, %rpn_connect__chunk[0])
			wait(1000)
		end if
		wait(10000)
		if(1=1)
			wait(1000)
			set_rpn($rpn_connect__channel_num + 416, %rpn_connect__chunk[1])
			wait(1000)
		end if
		wait(10000)
		if(1=1)
			wait(1000)
			set_rpn($rpn_connect__channel_num + 417, %rpn_connect__chunk[2])
			wait(1000)
		end if
		wait(10000)
		if(1=1)
			wait(1000)
			set_rpn($rpn_connect__channel_num + 418, %rpn_connect__chunk[3])
			wait(1000)
		end if
		wait(10000)
		if(1=1)
			wait(1000)
			set_rpn($rpn_connect__channel_num + 419, %rpn_connect__chunk[4])
			wait(1000)
		end if
		wait(10000)
		if(1=1)
			wait(1000)
			set_rpn($rpn_connect__channel_num + 420, %rpn_connect__chunk[5])
			wait(1000)
		end if
		wait(10000)
		if(1=1)
			wait(1000)
			set_rpn($rpn_connect__channel_num + 421, %rpn_connect__chunk[6])
			wait(1000)
		end if
		wait(10000)

	$ui_value_diapason_hz := (%rpn_connect__chunk[6] * 128) + (%rpn_connect__chunk[5] * 128 * 128) + (%rpn_connect__chunk[4] * 128 * 128 * 128) + (%rpn_connect__chunk[3] * 128 * 128 * 128 * 128) + (%rpn_connect__chunk[2] * 128 * 128 * 128 * 128 * 128) + (%rpn_connect__chunk[1] * 128 * 128 * 128 * 128 * 128 * 128) + (%rpn_connect__chunk[0] * 128 * 128 * 128 * 128 * 128 * 128 * 128)

	end if
end on

function onuicontrol__knob__concert_pitch__midi_key()
	set_text($knob__concert_pitch__midi_key,"  " & !note_class[$knob__concert_pitch__midi_key mod 12])
	$concert_pitch_midi_key := $knob__concert_pitch__midi_key
	call recalculate_concert_pitch
end function


function onuicontrol__concert_pitch__microtonal_detune()
	call recalculate_concert_pitch
end function
on ui_control ($concert_pitch__microtonal_detune)
	call onuicontrol__concert_pitch__microtonal_detune
end on

function onuicontrol__switch__play_nearest_zone()
	select ($switch__play_nearest_zone)
		case 1
			set_control_par_str(get_ui_id($switch__play_nearest_zone), $CONTROL_PAR_TEXT, "[ Yes ]")
		case 0
			set_control_par_str(get_ui_id($switch__play_nearest_zone), $CONTROL_PAR_TEXT, "[ no ]")
	end select
	$play_nearest_zone := $switch__play_nearest_zone
end function
function onuicontrol__switch__play_new_id()
	select ($switch__play_new_id)
		case 1
			set_control_par_str(get_ui_id($switch__play_new_id), $CONTROL_PAR_TEXT, "[ Yes ]")
		case 0
			set_control_par_str(get_ui_id($switch__play_new_id), $CONTROL_PAR_TEXT, "[ no ]")
	end select
	$play_new_id := $switch__play_new_id
end function
function onuicontrol__switch__relative_event_tuning()
	select ($switch__relative_event_tuning)
		case 1
			set_control_par_str(get_ui_id($switch__relative_event_tuning), $CONTROL_PAR_TEXT, "[ Yes ]")
		case 0
			set_control_par_str(get_ui_id($switch__relative_event_tuning), $CONTROL_PAR_TEXT, "[ no ]")
	end select
	$relative_event_tuning := $switch__relative_event_tuning
end function
function onuicontrol__switch__ksp_mode_0changetune_1eventpartune()
	select ($switch__ksp_mode_0changetune_1eventpartune)
		case 1
			set_control_par_str(get_ui_id($switch__ksp_mode_0changetune_1eventpartune), $CONTROL_PAR_TEXT, "set_event_par()")
		case 0
			set_control_par_str(get_ui_id($switch__ksp_mode_0changetune_1eventpartune), $CONTROL_PAR_TEXT, "change_tune()")
	end select
	$ksp_0changetune_1eventpartune := $switch__ksp_mode_0changetune_1eventpartune
end function

function onuicontrol__switch__use_white_keys()
	select ($switch__use_white_keys)
		case 1
			set_control_par_str(get_ui_id($switch__use_white_keys), $CONTROL_PAR_TEXT, "[ Yes ]")
		case 0
			set_control_par_str(get_ui_id($switch__use_white_keys), $CONTROL_PAR_TEXT, "[ no ]")
	end select
	$monochrome_layout_mode := $switch__use_white_keys - $switch__use_black_keys
end function
function onuicontrol__switch__use_black_keys()
	select ($switch__use_black_keys)
		case 1
			set_control_par_str(get_ui_id($switch__use_black_keys), $CONTROL_PAR_TEXT, "[ Yes ]")
		case 0
			set_control_par_str(get_ui_id($switch__use_black_keys), $CONTROL_PAR_TEXT, "[ no ]")
	end select
	$monochrome_layout_mode := $switch__use_white_keys - $switch__use_black_keys
end function
function onuicontrol__switch__monochrome_behaviour()
	{$monochrome_behaviour; 0 - omit scripting coloured(w/b) notes; 1 - substitute keys for neighbouring pitches}
	select ($switch__monochrome_behaviour)
	case 0
		set_control_par_str(get_ui_id($switch__monochrome_behaviour), $CONTROL_PAR_TEXT, "[ no ]")
	case 1
		set_control_par_str(get_ui_id($switch__monochrome_behaviour), $CONTROL_PAR_TEXT, "[ Yes ]")
	end select
	$monochrome_behaviour := $switch__monochrome_behaviour
end function












function recalculate_common_transposition_module()
	~common_note_transposition_module_calculated_cents := 0.0
	$common_note_transposition_module_step_compensation := 0
	$common_note_transposition__previous_tonic_key := $concert_pitch_midi_key
	$counter1 := 0
	while ($counter1 < 6)
			{// modulo workaround for negative numbers: ((x mod y) + y) mod y}
		$common_note_transposition_module_step_compensation := $common_note_transposition_module_step_compensation - ((((%panel__common_note_transposition__origin_axis_values[$counter1] - $common_note_transposition__previous_tonic_key ) mod $number_of_pitch_classes) + $number_of_pitch_classes) mod $number_of_pitch_classes) 

		~common_note_transposition_module_calculated_cents := ~common_note_transposition_module_calculated_cents + ?tuning_table[((((%panel__common_note_transposition__origin_axis_values[$counter1] - $common_note_transposition__previous_tonic_key ) mod $number_of_pitch_classes) + $number_of_pitch_classes) mod $number_of_pitch_classes)]

		$common_note_transposition_module_step_compensation := $common_note_transposition_module_step_compensation + ((((%panel__common_note_transposition__target_axis_values[$counter1] - $common_note_transposition__previous_tonic_key ) mod $number_of_pitch_classes) + $number_of_pitch_classes) mod $number_of_pitch_classes)
		
		~common_note_transposition_module_calculated_cents := ~common_note_transposition_module_calculated_cents - ?tuning_table[((((%panel__common_note_transposition__target_axis_values[$counter1] - $common_note_transposition__previous_tonic_key ) mod $number_of_pitch_classes) + $number_of_pitch_classes) mod $number_of_pitch_classes)]

		$common_note_transposition__previous_tonic_key := $common_note_transposition__previous_tonic_key + %panel__common_note_transposition__origin_axis_values[$counter1] - %panel__common_note_transposition__target_axis_values[$counter1]
		inc($counter1)
	end while
end function
function onuicontrol__switch_common_note_transposition_module()
	select ($common_note_transposition_module_is_on)
		case 0
			set_control_par_str(get_ui_id($switch_common_note_transposition_module), $CONTROL_PAR_TEXT, "[ off ]")
		case 1
			set_control_par_str(get_ui_id($switch_common_note_transposition_module), $CONTROL_PAR_TEXT, "[ ON ]")
	end select
	$common_note_transposition_module_is_on := $switch_common_note_transposition_module
	call recalculate_common_transposition_module
end function
function onuicontrol__knob__common_note_transposition__origin_axis1()
	%panel__common_note_transposition__origin_axis_values[0] := $knob__common_note_transposition__origin_axis1
	call recalculate_common_transposition_module
end function
function onuicontrol__knob__common_note_transposition__target_axis1()
	%panel__common_note_transposition__target_axis_values[0] := $knob__common_note_transposition__target_axis1
	call recalculate_common_transposition_module
end function
function onuicontrol__knob__common_note_transposition__origin_axis2()
	%panel__common_note_transposition__origin_axis_values[1] := $knob__common_note_transposition__origin_axis2
	call recalculate_common_transposition_module
end function
function onuicontrol__knob__common_note_transposition__target_axis2()
	%panel__common_note_transposition__target_axis_values[1] := $knob__common_note_transposition__target_axis2
	call recalculate_common_transposition_module
end function
function onuicontrol__knob__common_note_transposition__origin_axis3()
	%panel__common_note_transposition__origin_axis_values[2] := $knob__common_note_transposition__origin_axis3
	call recalculate_common_transposition_module
end function
function onuicontrol__knob__common_note_transposition__target_axis3()
	%panel__common_note_transposition__target_axis_values[2] := $knob__common_note_transposition__target_axis3
	call recalculate_common_transposition_module
end function
function onuicontrol__knob__common_note_transposition__origin_axis4()
	%panel__common_note_transposition__origin_axis_values[3] := $knob__common_note_transposition__origin_axis4
	call recalculate_common_transposition_module
end function
function onuicontrol__knob__common_note_transposition__target_axis4()
	%panel__common_note_transposition__target_axis_values[3] := $knob__common_note_transposition__target_axis4
	call recalculate_common_transposition_module
end function
function onuicontrol__knob__common_note_transposition__origin_axis5()
	%panel__common_note_transposition__origin_axis_values[4] := $knob__common_note_transposition__origin_axis5
	call recalculate_common_transposition_module
end function
function onuicontrol__knob__common_note_transposition__target_axis5()
	%panel__common_note_transposition__target_axis_values[4] := $knob__common_note_transposition__target_axis5
	call recalculate_common_transposition_module
end function
function onuicontrol__knob__common_note_transposition__origin_axis6()
	%panel__common_note_transposition__origin_axis_values[5] := $knob__common_note_transposition__origin_axis6
	call recalculate_common_transposition_module
end function
function onuicontrol__knob__common_note_transposition__target_axis6()
	%panel__common_note_transposition__target_axis_values[5] := $knob__common_note_transposition__target_axis6
	call recalculate_common_transposition_module
end function









function func_epimoric_transposition()
	{function arguments (all of them shall be set before calling this function):
		$eF__gradus1
		$eF__gradus2
		$eF__xtimes
		$eF__ouroboros
		$eF__dying_battery
		$eF__polish_mirror
		$eF__inlet_mirror_flag
	return variables:
		$eF__step_compensation
		~eF__root_transposition_cents
		$eF__outlet_mirror_flag
	}
	{~__f1_ := int_to_real(0)}

		$eF__tuningContext_num_of_pitch_classes := $number_of_pitch_classes
		~eF__tuningContext_interval_of_equivalence := ~interval_of_equivalence

		{
		if ($eF__xtimes < 0)
			$eF__temp_int := $eF__gradus1
			$eF__gradus1 := $eF__gradus2
			$eF__gradus2 := $eF__temp_int
		end if
		}

		~eF__tuningContext_gradus1_above_root := ?tuning_table[$eF__gradus1]
		~eF__tuningContext_gradus2_above_root := ?tuning_table[$eF__gradus2]
		if ($eF__gradus1 = 0)
		 ~eF__tuningContext_gradus1_below_root := -?tuning_table[0]
		end if
		if ($eF__gradus1 # 0)
			~eF__tuningContext_gradus1_below_root := ~interval_of_equivalence - ?tuning_table[$number_of_pitch_classes-$eF__gradus1]
		end if
		if ($eF__gradus2 = 0)
		 ~eF__tuningContext_gradus2_below_root := -?tuning_table[0]
		end if
		if ($eF__gradus2 # 0)
			~eF__tuningContext_gradus2_below_root := ~interval_of_equivalence - ?tuning_table[$number_of_pitch_classes-$eF__gradus2]
		end if


		select($eF__ouroboros)
			case 0
				select($eF__dying_battery)
{*}					case 0 {itoi}
						select($eF__inlet_mirror_flag)
							case 0
								~eF__temp_float := ~eF__tuningContext_gradus1_above_root - ~eF__tuningContext_gradus2_above_root
							case 1
								~eF__temp_float := ~eF__tuningContext_gradus1_below_root - ~eF__tuningContext_gradus2_below_root
						end select
						~eF__root_transposition_cents := ~eF__temp_float * int_to_real($eF__xtimes)
						$eF__temp_int := $eF__gradus2 - $eF__gradus1
						$eF__step_compensation := $eF__temp_int  * $eF__xtimes

					case 1 {itoinvi;changeUtonal;}
						select($eF__inlet_mirror_flag)
							case 0
								~eF__temp_float := ~eF__tuningContext_gradus1_above_root + ~eF__tuningContext_gradus2_below_root
							case 1
								~eF__temp_float := ~eF__tuningContext_gradus1_below_root + ~eF__tuningContext_gradus2_above_root
						end select
						~eF__root_transposition_cents := ~eF__temp_float  * int_to_real($eF__xtimes)
						$eF__temp_int := -($eF__gradus2 + $eF__gradus1) 
						$eF__step_compensation := $eF__temp_int * $eF__xtimes
				end select
				$eF__outlet_mirror_flag := $eF__inlet_mirror_flag
			case 1
				select($eF__dying_battery)
					case 0 {itoinvi;}
						select($eF__inlet_mirror_flag)
							case 0
								select ($eF__polish_mirror)
									case 0
										~__f1_ := ~eF__tuningContext_gradus1_above_root
										~__f2_ := ~eF__tuningContext_gradus2_below_root
									case 1
										~__f1_ := ~eF__tuningContext_gradus1_above_root
										~__f2_ := ~eF__tuningContext_gradus2_below_root
								end select
							case 1
								select ($eF__polish_mirror)
									case 0
										~__f1_ := ~eF__tuningContext_gradus1_below_root
										~__f2_ := ~eF__tuningContext_gradus2_above_root
									case 1
				{sprawdzic}				~__f1_ := ~eF__tuningContext_gradus1_below_root
										~__f2_ := ~eF__tuningContext_gradus2_below_root
								end select
						end select
						~__f__ := ~__f1_ + ~__f2_
						~eF__even_root_transposition_cents := ~__f__ * int_to_real($eF__xtimes/2)
						$__i__ := -($eF__gradus2 + $eF__gradus1)
						$eF__even_step_compensation := $__i__ * ($eF__xtimes/2)

						~__f__ := -(~__f1_ + ~__f2_)
						~eF__odd_root_transposition_cents := ~__f__  * int_to_real($eF__xtimes-($eF__xtimes/2))
						$__i__ := -($eF__gradus2 + $eF__gradus1)
						$eF__odd_step_compensation := $__i__  * (($eF__xtimes/2)-$eF__xtimes)

						~eF__root_transposition_cents := ~eF__even_root_transposition_cents + ~eF__odd_root_transposition_cents
						$eF__step_compensation := ($eF__even_step_compensation + $eF__odd_step_compensation)
						$eF__outlet_mirror_flag := abs(($eF__inlet_mirror_flag + ($eF__xtimes mod 2)) mod 2) {bug modulo}
					case 1 {itoi;changeUtonal;}
						select($eF__inlet_mirror_flag)
							case 0
								select ($eF__polish_mirror)
									case 0
										~__f1_ := ~eF__tuningContext_gradus1_above_root
										~__f2_ := ~eF__tuningContext_gradus2_above_root
										~__f3_ := ~eF__tuningContext_gradus1_below_root
										~__f4_ := ~eF__tuningContext_gradus2_below_root
									case 1
										~__f1_ := ~eF__tuningContext_gradus1_above_root
										~__f2_ := ~eF__tuningContext_gradus2_above_root
										~__f3_ := ~eF__tuningContext_gradus1_above_root
										~__f4_ := ~eF__tuningContext_gradus2_above_root
								end select
								~__f__ := ~__f1_ - ~__f2_
								~eF__even_root_transposition_cents := ~__f__ * int_to_real($eF__xtimes/2)
								$__i__ := ($eF__gradus2 - $eF__gradus1)
								$eF__even_step_compensation := $__i__ * ($eF__xtimes/2)

								~__f__ := ~__f4_ - ~__f3_
								~eF__odd_root_transposition_cents := ~__f__ * int_to_real($eF__xtimes-($eF__xtimes/2))
								$__i__ := -($eF__gradus2 - $eF__gradus1)
								$eF__odd_step_compensation := $__i__ * ($eF__xtimes-($eF__xtimes/2))
							case 1
								select ($eF__polish_mirror)
									case 0
										~__f1_ := ~eF__tuningContext_gradus1_below_root
										~__f2_ := ~eF__tuningContext_gradus2_below_root
										~__f3_ := ~eF__tuningContext_gradus1_above_root
										~__f4_ := ~eF__tuningContext_gradus2_above_root
									case 1
										~__f1_ := ~eF__tuningContext_gradus1_above_root
										~__f2_ := ~eF__tuningContext_gradus2_above_root
										~__f3_ := ~interval_of_equivalence - ~eF__tuningContext_gradus1_above_root
										~__f4_ := ~interval_of_equivalence - ~eF__tuningContext_gradus2_above_root
								end select
								~__f__ := ~__f4_ - ~__f3_
								~eF__even_root_transposition_cents := ~__f__ * int_to_real($eF__xtimes/2)
								$__i__ := ($eF__gradus2 - $eF__gradus1)
								$eF__even_step_compensation := $__i__ * ($eF__xtimes/2)

								~__f__ := ~__f1_ - ~__f2_
								~eF__odd_root_transposition_cents := ~__f__ * int_to_real($eF__xtimes-($eF__xtimes/2))
								$__i__ := ($eF__gradus2 - $eF__gradus1)
								$eF__odd_step_compensation := $__i__ * ($eF__xtimes-($eF__xtimes/2))

						end select
				
						~eF__root_transposition_cents := ~eF__even_root_transposition_cents + ~eF__odd_root_transposition_cents
						$eF__step_compensation := $eF__even_step_compensation + $eF__odd_step_compensation
						$eF__outlet_mirror_flag := abs(($eF__inlet_mirror_flag + ($eF__xtimes mod 2)) mod 2) {bug modulo}
				end select
		end select


end function



function recalculate_epimoric_module()

			$epimoric_module_A___inlet_inv_scale_flag := 0 {configure later for connection with other modules}

				$eF__inlet_mirror_flag := $epimoric_module_A___inlet_inv_scale_flag
				$eF__gradus1 := $epimoric_module_A__arg1
				$eF__gradus2 := $epimoric_module_A__arg2
				$eF__xtimes :=  $epimoric_module_A__xtimes_forward - $epimoric_module_A__xtimes_backward
				$eF__ouroboros := $epimoric_module_A__ouroboros_transposition
				$eF__dying_battery := $epimoric_module_A__dying_battery
				$eF__polish_mirror := $epimoric_module_A__polish_mirror
		call func_epimoric_transposition()
				~epimoric_module_A___root_transposition_cents := ~eF__root_transposition_cents
				$epimoric_module_A___step_compensation := $eF__step_compensation
				$epimoric_module_A___outlet_inv_scale_flag := $eF__outlet_mirror_flag

			$epimoric_module_B___inlet_inv_scale_flag := $epimoric_module_A___outlet_inv_scale_flag


				$eF__inlet_mirror_flag := $epimoric_module_B___inlet_inv_scale_flag
				$eF__gradus1 := $epimoric_module_B__arg1
				$eF__gradus2 := $epimoric_module_B__arg2
				$eF__xtimes :=  $epimoric_module_B__xtimes_forward - $epimoric_module_B__xtimes_backward
				$eF__ouroboros := $epimoric_module_B__ouroboros_transposition
				$eF__dying_battery := $epimoric_module_B__dying_battery
				$eF__polish_mirror := $epimoric_module_B__polish_mirror
		call func_epimoric_transposition
				~epimoric_module_B___root_transposition_cents := ~eF__root_transposition_cents
				$epimoric_module_B___step_compensation := $eF__step_compensation
				$epimoric_module_B___outlet_inv_scale_flag := $eF__outlet_mirror_flag


			$epimoric_module_C___inlet_inv_scale_flag := $epimoric_module_B___outlet_inv_scale_flag

				$eF__inlet_mirror_flag := $epimoric_module_C___inlet_inv_scale_flag
				$eF__gradus1 := $epimoric_module_C__arg1
				$eF__gradus2 := $epimoric_module_C__arg2
				$eF__xtimes :=  $epimoric_module_C__xtimes_forward - $epimoric_module_C__xtimes_backward
				$eF__ouroboros := $epimoric_module_C__ouroboros_transposition
				$eF__dying_battery := $epimoric_module_C__dying_battery
				$eF__polish_mirror := $epimoric_module_C__polish_mirror
		call func_epimoric_transposition
				~epimoric_module_C___root_transposition_cents := ~eF__root_transposition_cents
				$epimoric_module_C___step_compensation := $eF__step_compensation
				$epimoric_module_C___outlet_inv_scale_flag := $eF__outlet_mirror_flag

		$epimoric_module__mirror_flag := $epimoric_module_C___outlet_inv_scale_flag

		~epimoric_module__transposition_cents := ~epimoric_module_A___root_transposition_cents + ~epimoric_module_B___root_transposition_cents + ~epimoric_module_C___root_transposition_cents
		$epimoric_module__step_compensation := $epimoric_module_A___step_compensation + $epimoric_module_B___step_compensation + $epimoric_module_C___step_compensation

		{~epimoric_module__transposition_cents := 0.0}
		{$epimoric_module__step_compensation := 0}

	call debug

end function

function onuicontrol__epimoric_module_onoff()
	select ($epimoric_module_onoff)
		case 0
			set_control_par_str(get_ui_id($epimoric_module_onoff), $CONTROL_PAR_TEXT, "[ off ]")
		case 1
			set_control_par_str(get_ui_id($epimoric_module_onoff), $CONTROL_PAR_TEXT, "[ ON ]")
	end select
	$epimoric_module_is_on := $epimoric_module_onoff
	call recalculate_epimoric_module
end function
{start copy from a:}
function onuicontrol__epimoric_module_A__switch1()
	select ($epimoric_module_A__switch1)
		case 0
			set_control_par_str(get_ui_id($epimoric_module_A__switch1), $CONTROL_PAR_TEXT, "[ progression ]")
		case 1
			set_control_par_str(get_ui_id($epimoric_module_A__switch1), $CONTROL_PAR_TEXT, "[ Ouroboros ]")
	end select
	$epimoric_module_A__ouroboros_transposition := $epimoric_module_A__switch1
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_module_A__switch2()
	select ($epimoric_module_A__switch2)
		case 0
			set_control_par_str(get_ui_id($epimoric_module_A__switch2), $CONTROL_PAR_TEXT, "( vanilla )")
		case 1
			set_control_par_str(get_ui_id($epimoric_module_A__switch2), $CONTROL_PAR_TEXT, "<  spicy  >")
	end select
	$epimoric_module_A__dying_battery := $epimoric_module_A__switch2
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_module_A__switch3()
	select ($epimoric_module_A__switch3)
		case 0
			set_control_par_str(get_ui_id($epimoric_module_A__switch3), $CONTROL_PAR_TEXT, "[ fake mirror ]")
		case 1
			set_control_par_str(get_ui_id($epimoric_module_A__switch3), $CONTROL_PAR_TEXT, "[ true mirror ]")
	end select
	$epimoric_module_A__polish_mirror := $epimoric_module_A__switch3
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_module_A__knob1()
	$epimoric_module_A__arg1 := ($epimoric_module_A__knob1 * $number_of_pitch_classes) / 128
	$epimoric_module_A__knob1_orientation := $epimoric_module_A__knob1
	set_knob_label($epimoric_module_A__knob1,$epimoric_module_A__arg1)
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_module_A__knob2()
	$epimoric_module_A__arg2 := ($epimoric_module_A__knob2 * $number_of_pitch_classes) / 128
	$epimoric_module_A__knob2_orientation := $epimoric_module_A__knob2
	set_knob_label($epimoric_module_A__knob2,$epimoric_module_A__arg2)
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_module_A__knob3()
	$epimoric_module_A__xtimes_backward := $epimoric_module_A__knob3
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_module_A__knob4()
	$epimoric_module_A__xtimes_forward := $epimoric_module_A__knob4
	call recalculate_epimoric_module
end function
{paste to b}
function onuicontrol__epimoric_module_B__switch1()
	$epimoric_module_B__ouroboros_transposition := $epimoric_module_B__switch1 
	select ($epimoric_module_B__switch1)
		case 0
			set_control_par_str(get_ui_id($epimoric_module_B__switch1), $CONTROL_PAR_TEXT, "[ progression ]")
		case 1
			set_control_par_str(get_ui_id($epimoric_module_B__switch1), $CONTROL_PAR_TEXT, "[ Ouroboros ]")
	end select
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_module_B__switch2()
	select ($epimoric_module_B__switch2)
		case 0
			set_control_par_str(get_ui_id($epimoric_module_B__switch2), $CONTROL_PAR_TEXT, "( vanilla )")
		case 1
			set_control_par_str(get_ui_id($epimoric_module_B__switch2), $CONTROL_PAR_TEXT, "<  spicy  >")
	end select
	$epimoric_module_B__dying_battery := $epimoric_module_B__switch2
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_module_B__switch3()
	select ($epimoric_module_B__switch3)
		case 0
			set_control_par_str(get_ui_id($epimoric_module_B__switch3), $CONTROL_PAR_TEXT, "[ fake mirror ]")
		case 1
			set_control_par_str(get_ui_id($epimoric_module_B__switch3), $CONTROL_PAR_TEXT, "[ true mirror ]")
	end select
	$epimoric_module_B__polish_mirror := $epimoric_module_B__switch3
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_module_B__knob1()
	$epimoric_module_B__arg1 := ($epimoric_module_B__knob1 * $number_of_pitch_classes) / 128
	$epimoric_module_B__knob1_orientation := $epimoric_module_B__knob1
	set_knob_label($epimoric_module_B__knob1,$epimoric_module_B__arg1)
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_module_B__knob2()
	$epimoric_module_B__arg2 := ($epimoric_module_B__knob2 * $number_of_pitch_classes) / 128
	$epimoric_module_B__knob2_orientation := $epimoric_module_B__knob2
	set_knob_label($epimoric_module_B__knob2,$epimoric_module_B__arg2)
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_module_B__knob3()
	$epimoric_module_B__xtimes_backward := $epimoric_module_B__knob3
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_module_B__knob4()
	$epimoric_module_B__xtimes_forward := $epimoric_module_B__knob4
	call recalculate_epimoric_module
end function
{paste to c:}
function onuicontrol__epimoric_module_C__switch1()
	select ($epimoric_module_C__switch1)
		case 0
			set_control_par_str(get_ui_id($epimoric_module_C__switch1), $CONTROL_PAR_TEXT, "[ progression ]")
		case 1
			set_control_par_str(get_ui_id($epimoric_module_C__switch1), $CONTROL_PAR_TEXT, "[ Ouroboros ]")
	end select
	$epimoric_module_C__ouroboros_transposition := $epimoric_module_C__switch1 
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_module_C__switch2()
	select ($epimoric_module_C__switch2)
		case 0
			set_control_par_str(get_ui_id($epimoric_module_C__switch2), $CONTROL_PAR_TEXT, "( vanilla )")
		case 1
			set_control_par_str(get_ui_id($epimoric_module_C__switch2), $CONTROL_PAR_TEXT, "<  spicy  >")
	end select
	$epimoric_module_C__dying_battery := $epimoric_module_C__switch2
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_module_C__switch3()
	select ($epimoric_module_C__switch3)
		case 0
			set_control_par_str(get_ui_id($epimoric_module_C__switch3), $CONTROL_PAR_TEXT, "[ fake mirror ]")
		case 1
			set_control_par_str(get_ui_id($epimoric_module_C__switch3), $CONTROL_PAR_TEXT, "[ true mirror ]")
	end select
	$epimoric_module_C__polish_mirror := $epimoric_module_C__switch3
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_module_C__knob1()
	$epimoric_module_C__arg1 := ($epimoric_module_C__knob1 * $number_of_pitch_classes) / 128
	$epimoric_module_C__knob1_orientation := $epimoric_module_C__knob1
	set_knob_label($epimoric_module_C__knob1,$epimoric_module_C__arg1)
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_module_C__knob2()
	$epimoric_module_C__arg2 := ($epimoric_module_C__knob2 * $number_of_pitch_classes) / 128
	$epimoric_module_C__knob2_orientation := $epimoric_module_C__knob2
	set_knob_label($epimoric_module_C__knob2,$epimoric_module_C__arg2)
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_module_C__knob3()
	$epimoric_module_C__xtimes_backward := $epimoric_module_C__knob3
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_module_C__knob4()
	$epimoric_module_C__xtimes_forward := $epimoric_module_C__knob4
	call recalculate_epimoric_module
end function
{end copy}




function recalculate_epimoric_bitonal_twinscale_module()
		if ($epimoric_bitonal_module_onoff = 0)
			exit
		end if

		~epimoric_bitonal_twinscale_module___root_transposition_cents := 0.0
		$epimoric_bitonal_twinscale_module___step_compensation := 0
		$epimoric_bitonal_twinscale_module___upsidedown_twin := 0

		$eF__inlet_mirror_flag := 0 {NOT IMPLEMENTED}

		select($epimoric_bitonal_twinscale_module__switch1)
			case 0
				select($epimoric_bitonal_twinscale_module__switch2)
					case 0 {itoi}
						~epimoric_bitonal_twinscale_module___root_transposition_cents := ?tuning_table[$epimoric_bitonal_twinscale_module__arg1] - ?tuning_table[$epimoric_bitonal_twinscale_module__arg2]
						$epimoric_bitonal_twinscale_module___step_compensation := $epimoric_bitonal_twinscale_module__arg2 - $epimoric_bitonal_twinscale_module__arg1
					case 1 {itoinvi;changeUtonal;}
						~epimoric_bitonal_twinscale_module___root_transposition_cents := ?tuning_table[$epimoric_bitonal_twinscale_module__arg1] + (~interval_of_equivalence - ?tuning_table[$number_of_pitch_classes-$epimoric_bitonal_twinscale_module__arg2])
						$epimoric_bitonal_twinscale_module___step_compensation := -($epimoric_bitonal_twinscale_module__arg2 + $epimoric_bitonal_twinscale_module__arg1)
				end select
				$epimoric_bitonal_twinscale_module___upsidedown_twin := 0
			case 1
				select($epimoric_bitonal_twinscale_module__switch2)
					case 0 {itoinvi;}
						select ($epimoric_bitonal_twinscale_module__switch3)
							case 0
								~__f1_ := ?tuning_table[$epimoric_bitonal_twinscale_module__arg1]
								~__f2_ := ~interval_of_equivalence - ?tuning_table[$number_of_pitch_classes-$epimoric_bitonal_twinscale_module__arg2]
							case 1
								~__f1_ := ?tuning_table[$epimoric_bitonal_twinscale_module__arg1]
								~__f2_ := ?tuning_table[$epimoric_bitonal_twinscale_module__arg2]
						end select	
						~epimoric_bitonal_twinscale_module___root_transposition_cents := -(~__f1_ + ~__f2_)
						$epimoric_bitonal_twinscale_module___step_compensation := -($epimoric_bitonal_twinscale_module__arg2 + $epimoric_bitonal_twinscale_module__arg1)
					case 1 {itoi;changeUtonal;}
						select ($epimoric_bitonal_twinscale_module__switch3)
							case 0
								~__f3_ := ~interval_of_equivalence - ?tuning_table[$number_of_pitch_classes-$epimoric_bitonal_twinscale_module__arg1]
								~__f4_ := ~interval_of_equivalence - ?tuning_table[$number_of_pitch_classes-$epimoric_bitonal_twinscale_module__arg2]
							case 1
								~__f3_ := ?tuning_table[$epimoric_bitonal_twinscale_module__arg1]
								~__f4_ := ?tuning_table[$epimoric_bitonal_twinscale_module__arg2]
						end select
						~epimoric_bitonal_twinscale_module___root_transposition_cents := ~__f4_ - ~__f3_
						$epimoric_bitonal_twinscale_module___step_compensation := -($epimoric_bitonal_twinscale_module__arg2 - $epimoric_bitonal_twinscale_module__arg1)
						$epimoric_bitonal_twinscale_module___upsidedown_twin := abs(($eF__inlet_mirror_flag + ($eF__xtimes mod 2)) mod 2) {bug modulo}
				end select
		end select
		$counter1 := 0
		while ($counter1 < $number_of_pitch_classes)
			select ($epimoric_bitonal_twinscale_module___upsidedown_twin)
				case 0
					?tuning_table[$number_of_pitch_classes + $counter1] := ~epimoric_bitonal_twinscale_module___root_transposition_cents + ?tuning_table[$counter1]
				case 1
					?tuning_table[$number_of_pitch_classes + $counter1] := ~epimoric_bitonal_twinscale_module___root_transposition_cents - ?tuning_table[$counter1]
			end select
			inc($counter1)
		end while
	$number_of_pitch_classes := $number_of_pitch_classes * 2 {achtung, reset num of pitch classes before calling again}


	       {octave reduction:}
	    select ($switch__reduce_by_octave)
	   		case 1
	   			~reduction_interval := 1200.0
	 	  	case 0
	 	  		~reduction_interval := ~interval_of_equivalence
	    end select
	    if (~reduction_interval = 0.0)
	    	~reduction_interval := 1200.0
	    end if
	    if ($switch__interval_reduction = 1 and ~interval_of_equivalence # 0.0)
	   		$counter1 := 0
			while ($counter1 < $number_of_pitch_classes)
				select($switch__reduction_mode)
					case 0
						while ( ?tuning_table[$counter1] >= ~interval_of_equivalence )
							?tuning_table[$counter1] := ?tuning_table[$counter1] - ~reduction_interval
						end while
						while (?tuning_table[$counter1] < 0.0)
							?tuning_table[$counter1] := ?tuning_table[$counter1] + ~reduction_interval
						end while
					case 1
						while ( (?tuning_table[$counter1] > ~interval_of_equivalence) or (?tuning_table[$counter1] < 0.0) )
							if (?tuning_table[$counter1] < 0.0)
								?tuning_table[$counter1] := -1.0 * ?tuning_table[$counter1]
							end if
							if (?tuning_table[$counter1] = ~reduction_interval)
								?tuning_table[$counter1] := 0.0
							end if
							if ( ?tuning_table[$counter1] > ~interval_of_equivalence )
								?tuning_table[$counter1] := ~reduction_interval - (?tuning_table[$counter1] - ~reduction_interval)
							end if
						end while
				end select
				inc($counter1)
			end while
        end if
	   {bubble sort:}
	   	if ($epimoric_bitonal_twinscale_module___sort = 1)
			$counter2 := 0
			while ($counter2 < $number_of_pitch_classes)
				$counter1 := 1
				while ($counter1 + $counter2 < $number_of_pitch_classes) 
					if (?tuning_table[$counter1] < ?tuning_table[$counter1 -1])
						~__f__ := ?tuning_table[$counter1]
						?tuning_table[$counter1] := ?tuning_table[$counter1 - 1]
						?tuning_table[$counter1 - 1] := ~__f__
					end if
					inc($counter1)
				end while
				inc($counter2)
			end while
		end if
		

end function





function recalculate_transposition_by_interval_panel()
	$transpositionbyinterval__compound_step_transposition := 0
	~transpositionbyinterval__compound_cent_transposition := 0.0
	~transpositionbyinterval__module_transposition := 1.0
	$counter1 := 0
	while ($counter1 < $panel__transpositionbyinterval__numofmodules)
		if (%panel__transpositionbyinterval__state[$counter1 * $panel__transpositionbyinterval__numoftemplatepars + 0] = 1)
				$transpositionbyinterval__compound_step_transposition := $transpositionbyinterval__compound_step_transposition + (%panel__transpositionbyinterval__state[$counter1 * $panel__transpositionbyinterval__numoftemplatepars + 1] * %panel__transpositionbyinterval__state[$counter1 * $panel__transpositionbyinterval__numoftemplatepars + 6])
				

				~transpositionbyinterval__module_transposition := 1200.0 * log( int_to_real(%panel__transpositionbyinterval__state[$counter1 * $panel__transpositionbyinterval__numoftemplatepars + 2]) / int_to_real(%panel__transpositionbyinterval__state[$counter1 * $panel__transpositionbyinterval__numoftemplatepars + 3]) ) / log(2.0)
			
				~transpositionbyinterval__module_transposition := ~transpositionbyinterval__module_transposition * int_to_real(%panel__transpositionbyinterval__state[$counter1 * $panel__transpositionbyinterval__numoftemplatepars + 4]) / int_to_real(%panel__transpositionbyinterval__state[$counter1 * $panel__transpositionbyinterval__numoftemplatepars + 5])
				~transpositionbyinterval__module_transposition := ~transpositionbyinterval__module_transposition * int_to_real(%panel__transpositionbyinterval__state[$counter1 * $panel__transpositionbyinterval__numoftemplatepars + 1])
			
				~transpositionbyinterval__compound_cent_transposition := ~transpositionbyinterval__compound_cent_transposition + ~transpositionbyinterval__module_transposition
		end if
		inc($counter1)
	end while
end function

function onuicontrol__switch__transpositionbyinterval_panel_A()
	$transpositionbyinterval_var_index := 0
	$transpositionbyinterval_panel_index := 0
	%panel__transpositionbyinterval__state[ $transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $switch__transpositionbyinterval_panel_A
	select (get_control_par(%ids_panel__transpositionbyinterval[$transpositionbyinterval_panel_index*($panel__transpositionbyinterval__numoftemplatepars+1)+1], $CONTROL_PAR_VALUE))
		case 0
			set_control_par_str(%ids_panel__transpositionbyinterval[ $transpositionbyinterval_panel_index *($panel__transpositionbyinterval__numoftemplatepars+1)+1],$CONTROL_PAR_TEXT, "[ off ]")
		case 1
			set_control_par_str(%ids_panel__transpositionbyinterval[ $transpositionbyinterval_panel_index *($panel__transpositionbyinterval__numoftemplatepars+1)+1],$CONTROL_PAR_TEXT, "[ ON ]")
	end select
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_A_iterations()
	$transpositionbyinterval_var_index := 1
	$transpositionbyinterval_panel_index := 0
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_A_iterations
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_A_numerator()
	$transpositionbyinterval_var_index := 2
	$transpositionbyinterval_panel_index := 0
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_A_numerator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_A_denominator()
	$transpositionbyinterval_var_index := 3
	$transpositionbyinterval_panel_index := 0
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_A_denominator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_A_power_numerator()
	$transpositionbyinterval_var_index := 4
	$transpositionbyinterval_panel_index := 0
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_A_power_numerator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_A_power_denominator()
	$transpositionbyinterval_var_index := 5
	$transpositionbyinterval_panel_index := 0
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_A_power_denominator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_A_step_compensation()
	$transpositionbyinterval_var_index := 6
	$transpositionbyinterval_panel_index := 0
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_A_step_compensation
	call recalculate_transposition_by_interval_panel
end function



function onuicontrol__switch__transpositionbyinterval_panel_B()
	$transpositionbyinterval_var_index := 0
	$transpositionbyinterval_panel_index := 1
	%panel__transpositionbyinterval__state[ $transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $switch__transpositionbyinterval_panel_B
	select (get_control_par(%ids_panel__transpositionbyinterval[$transpositionbyinterval_panel_index*($panel__transpositionbyinterval__numoftemplatepars+1)+1], $CONTROL_PAR_VALUE))
		case 0
			set_control_par_str(%ids_panel__transpositionbyinterval[ $transpositionbyinterval_panel_index *($panel__transpositionbyinterval__numoftemplatepars+1)+1],$CONTROL_PAR_TEXT, "[ off ]")
		case 1
			set_control_par_str(%ids_panel__transpositionbyinterval[ $transpositionbyinterval_panel_index *($panel__transpositionbyinterval__numoftemplatepars+1)+1],$CONTROL_PAR_TEXT, "[ ON ]")
	end select
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_B_iterations()
	$transpositionbyinterval_var_index := 1
	$transpositionbyinterval_panel_index := 1
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_B_iterations
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_B_numerator()
	$transpositionbyinterval_var_index := 2
	$transpositionbyinterval_panel_index := 1
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_B_numerator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_B_denominator()
	$transpositionbyinterval_var_index := 3
	$transpositionbyinterval_panel_index := 1
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_B_denominator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_B_power_numerator()
	$transpositionbyinterval_var_index := 4
	$transpositionbyinterval_panel_index := 1
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_B_power_numerator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_B_power_denominator()
	$transpositionbyinterval_var_index := 5
	$transpositionbyinterval_panel_index := 1
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_B_power_denominator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_B_step_compensation()
	$transpositionbyinterval_var_index := 6
	$transpositionbyinterval_panel_index := 1
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_B_step_compensation
	call recalculate_transposition_by_interval_panel
end function



function onuicontrol__switch__transpositionbyinterval_panel_C()
	$transpositionbyinterval_var_index := 0
	$transpositionbyinterval_panel_index := 2
	%panel__transpositionbyinterval__state[ $transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $switch__transpositionbyinterval_panel_C
	select (get_control_par(%ids_panel__transpositionbyinterval[$transpositionbyinterval_panel_index*($panel__transpositionbyinterval__numoftemplatepars+1)+1], $CONTROL_PAR_VALUE))
		case 0
			set_control_par_str(%ids_panel__transpositionbyinterval[ $transpositionbyinterval_panel_index *($panel__transpositionbyinterval__numoftemplatepars+1)+1],$CONTROL_PAR_TEXT, "[ off ]")
		case 1
			set_control_par_str(%ids_panel__transpositionbyinterval[ $transpositionbyinterval_panel_index *($panel__transpositionbyinterval__numoftemplatepars+1)+1],$CONTROL_PAR_TEXT, "[ ON ]")
	end select
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_C_iterations()
	$transpositionbyinterval_var_index := 1
	$transpositionbyinterval_panel_index := 2
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_C_iterations
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_C_numerator()
	$transpositionbyinterval_var_index := 2
	$transpositionbyinterval_panel_index := 2
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_C_numerator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_C_denominator()
	$transpositionbyinterval_var_index := 3
	$transpositionbyinterval_panel_index := 2
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_C_denominator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_C_power_numerator()
	$transpositionbyinterval_var_index := 4
	$transpositionbyinterval_panel_index := 2
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_C_power_numerator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_C_power_denominator()
	$transpositionbyinterval_var_index := 5
	$transpositionbyinterval_panel_index := 2
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_C_power_denominator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_C_step_compensation()
	$transpositionbyinterval_var_index := 6
	$transpositionbyinterval_panel_index := 2
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_C_step_compensation
	call recalculate_transposition_by_interval_panel
end function



function onuicontrol__switch__transpositionbyinterval_panel_D()
	$transpositionbyinterval_var_index := 0
	$transpositionbyinterval_panel_index := 3
	%panel__transpositionbyinterval__state[ $transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $switch__transpositionbyinterval_panel_D
	select (get_control_par(%ids_panel__transpositionbyinterval[$transpositionbyinterval_panel_index*($panel__transpositionbyinterval__numoftemplatepars+1)+1], $CONTROL_PAR_VALUE))
		case 0
			set_control_par_str(%ids_panel__transpositionbyinterval[ $transpositionbyinterval_panel_index *($panel__transpositionbyinterval__numoftemplatepars+1)+1],$CONTROL_PAR_TEXT, "[ off ]")
		case 1
			set_control_par_str(%ids_panel__transpositionbyinterval[ $transpositionbyinterval_panel_index *($panel__transpositionbyinterval__numoftemplatepars+1)+1],$CONTROL_PAR_TEXT, "[ ON ]")
	end select
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_D_iterations()
	$transpositionbyinterval_var_index := 1
	$transpositionbyinterval_panel_index := 3
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_D_iterations
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_D_numerator()
	$transpositionbyinterval_var_index := 2
	$transpositionbyinterval_panel_index := 3
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_D_numerator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_D_denominator()
	$transpositionbyinterval_var_index := 3
	$transpositionbyinterval_panel_index := 3
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_D_denominator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_D_power_numerator()
	$transpositionbyinterval_var_index := 4
	$transpositionbyinterval_panel_index := 3
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_D_power_numerator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_D_power_denominator()
	$transpositionbyinterval_var_index := 5
	$transpositionbyinterval_panel_index := 3
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_D_power_denominator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_D_step_compensation()
	$transpositionbyinterval_var_index := 6
	$transpositionbyinterval_panel_index := 3
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_D_step_compensation
	call recalculate_transposition_by_interval_panel
end function




function onuicontrol__switch__transpositionbyinterval_panel_E()
	$transpositionbyinterval_var_index := 0
	$transpositionbyinterval_panel_index := 4
	%panel__transpositionbyinterval__state[ $transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $switch__transpositionbyinterval_panel_E
	select (get_control_par(%ids_panel__transpositionbyinterval[$transpositionbyinterval_panel_index*($panel__transpositionbyinterval__numoftemplatepars+1)+1], $CONTROL_PAR_VALUE))
		case 0
			set_control_par_str(%ids_panel__transpositionbyinterval[ $transpositionbyinterval_panel_index *($panel__transpositionbyinterval__numoftemplatepars+1)+1],$CONTROL_PAR_TEXT, "[ off ]")
		case 1
			set_control_par_str(%ids_panel__transpositionbyinterval[ $transpositionbyinterval_panel_index *($panel__transpositionbyinterval__numoftemplatepars+1)+1],$CONTROL_PAR_TEXT, "[ ON ]")
	end select
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_E_iterations()
	$transpositionbyinterval_var_index := 1
	$transpositionbyinterval_panel_index := 4
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_E_iterations
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_E_numerator()
	$transpositionbyinterval_var_index := 2
	$transpositionbyinterval_panel_index := 4
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_E_numerator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_E_denominator()
	$transpositionbyinterval_var_index := 3
	$transpositionbyinterval_panel_index := 4
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_E_denominator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_E_power_numerator()
	$transpositionbyinterval_var_index := 4
	$transpositionbyinterval_panel_index := 4
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_E_power_numerator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_E_power_denominator()
	$transpositionbyinterval_var_index := 5
	$transpositionbyinterval_panel_index := 4
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_E_power_denominator
	call recalculate_transposition_by_interval_panel
end function
function onuicontrol__knob__transpositionbyinterval_panel_E_step_compensation()
	$transpositionbyinterval_var_index := 6
	$transpositionbyinterval_panel_index := 4
	%panel__transpositionbyinterval__state[$transpositionbyinterval_panel_index * $panel__transpositionbyinterval__numoftemplatepars + $transpositionbyinterval_var_index] := $knob__transpositionbyinterval_panel_E_step_compensation
	call recalculate_transposition_by_interval_panel
end function





function recalculate_whammy_panels()
	~whammy_module_compound_transposition_cents := 0.0
	$counter1 := 0
	while ($counter1 < $panel__whammy__numofmodules)
		~whammy_module_panel_transposition_cents := 1.0
		~whammy_module_panel_transposition_cents := int_to_real(%panel__whammy__state[ $counter1 * $panel__whammy__numofknobs + 0 ]) / int_to_real(%panel__whammy__state[ $counter1 * $panel__whammy__numofknobs + 1 ])

		~whammy_module_panel_transposition_cents := 1200.0 * log(~whammy_module_panel_transposition_cents) / log(2.0)

		~whammy_module_panel_transposition_cents := ~whammy_module_panel_transposition_cents *          ...
				(int_to_real(%panel__whammy__state[ $counter1 * $panel__whammy__numofknobs + 2 ]) /		...
				 int_to_real(%panel__whammy__state[ $counter1 * $panel__whammy__numofknobs + 3 ]) )	*	...
				(int_to_real(%panel__whammy__state[ $counter1 * $panel__whammy__numofknobs + 4 ]) /		...
				 int_to_real(%panel__whammy__state[ $counter1 * $panel__whammy__numofknobs + 5 ]) )

		~whammy_module_compound_transposition_cents := ~whammy_module_compound_transposition_cents + ~whammy_module_panel_transposition_cents
		 	
		inc($counter1)
	end while
	
end function

function onuicontrol__whammy_module_onoff
	select ($whammy_module_onoff)
		case 1
			set_control_par_str(get_ui_id($whammy_module_onoff), $CONTROL_PAR_TEXT, "[ ON ]")
		case 0
			set_control_par_str(get_ui_id($whammy_module_onoff), $CONTROL_PAR_TEXT, "[ off ]")
	end select
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_A_interval_numerator()
	%panel__whammy__state[ 0 * $panel__whammy__numofknobs + 0 ] := $knob__whammy_panel_A_interval_numerator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_A_interval_denominator()
	%panel__whammy__state[ 0 * $panel__whammy__numofknobs + 1 ] := $knob__whammy_panel_A_interval_denominator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_A_power_numerator()
	%panel__whammy__state[ 0 * $panel__whammy__numofknobs + 2 ] := $knob__whammy_panel_A_power_numerator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_A_power_denominator()
	%panel__whammy__state[ 0 * $panel__whammy__numofknobs + 3 ] := $knob__whammy_panel_A_power_denominator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_A_amount_interval_denominator()
	%panel__whammy__state[ 0 * $panel__whammy__numofknobs + 4 ] := $knob__whammy_panel_A_amount_interval_denominator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_A_amount_power_numerator()
	%panel__whammy__state[ 0 * $panel__whammy__numofknobs + 5 ] := $knob__whammy_panel_A_amount_power_numerator
	call recalculate_whammy_panels
end function

function onuicontrol__knob__whammy_panel_B_interval_numerator()
	%panel__whammy__state[ 1 * $panel__whammy__numofknobs + 0 ] := $knob__whammy_panel_B_interval_numerator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_B_interval_denominator()
	%panel__whammy__state[ 1 * $panel__whammy__numofknobs + 1 ] := $knob__whammy_panel_B_interval_denominator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_B_power_numerator()
	%panel__whammy__state[ 1 * $panel__whammy__numofknobs + 2 ] := $knob__whammy_panel_B_power_numerator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_B_power_denominator()
	%panel__whammy__state[ 1 * $panel__whammy__numofknobs + 3 ] := $knob__whammy_panel_B_power_denominator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_B_amount_interval_denominator()
	%panel__whammy__state[ 1 * $panel__whammy__numofknobs + 4 ] := $knob__whammy_panel_B_amount_interval_denominator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_B_amount_power_numerator()
	%panel__whammy__state[ 1 * $panel__whammy__numofknobs + 5 ] := $knob__whammy_panel_B_amount_power_numerator
	call recalculate_whammy_panels
end function

function onuicontrol__knob__whammy_panel_C_interval_numerator()
	%panel__whammy__state[ 2 * $panel__whammy__numofknobs + 0 ] := $knob__whammy_panel_C_interval_numerator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_C_interval_denominator()
	%panel__whammy__state[ 2 * $panel__whammy__numofknobs + 1 ] := $knob__whammy_panel_C_interval_denominator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_C_power_numerator()
	%panel__whammy__state[ 2 * $panel__whammy__numofknobs + 2 ] := $knob__whammy_panel_C_power_numerator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_C_power_denominator()
	%panel__whammy__state[ 2 * $panel__whammy__numofknobs + 3 ] := $knob__whammy_panel_C_power_denominator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_C_amount_interval_denominator()
	%panel__whammy__state[ 2 * $panel__whammy__numofknobs + 4 ] := $knob__whammy_panel_C_amount_interval_denominator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_C_amount_power_numerator()
	%panel__whammy__state[ 2 * $panel__whammy__numofknobs + 5 ] := $knob__whammy_panel_C_amount_power_numerator
	call recalculate_whammy_panels
end function


function onuicontrol__knob__whammy_panel_D_interval_numerator()
	%panel__whammy__state[ 3 * $panel__whammy__numofknobs + 0 ] := $knob__whammy_panel_D_interval_numerator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_D_interval_denominator()
	%panel__whammy__state[ 3 * $panel__whammy__numofknobs + 1 ] := $knob__whammy_panel_D_interval_denominator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_D_power_numerator()
	%panel__whammy__state[ 3 * $panel__whammy__numofknobs + 2 ] := $knob__whammy_panel_D_power_numerator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_D_power_denominator()
	%panel__whammy__state[ 3 * $panel__whammy__numofknobs + 3 ] := $knob__whammy_panel_D_power_denominator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_D_amount_interval_denominator()
	%panel__whammy__state[ 3 * $panel__whammy__numofknobs + 4 ] := $knob__whammy_panel_D_amount_interval_denominator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_D_amount_power_numerator()
	%panel__whammy__state[ 3 * $panel__whammy__numofknobs + 5 ] := $knob__whammy_panel_D_amount_power_numerator
	call recalculate_whammy_panels
end function


function onuicontrol__knob__whammy_panel_E_interval_numerator()
	%panel__whammy__state[ 4 * $panel__whammy__numofknobs + 0 ] := $knob__whammy_panel_E_interval_numerator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_E_interval_denominator()
	%panel__whammy__state[ 4 * $panel__whammy__numofknobs + 1 ] := $knob__whammy_panel_E_interval_denominator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_E_power_numerator()
	%panel__whammy__state[ 4 * $panel__whammy__numofknobs + 2 ] := $knob__whammy_panel_E_power_numerator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_E_power_denominator()
	%panel__whammy__state[ 4 * $panel__whammy__numofknobs + 3 ] := $knob__whammy_panel_E_power_denominator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_E_amount_interval_denominator()
	%panel__whammy__state[ 4 * $panel__whammy__numofknobs + 4 ] := $knob__whammy_panel_E_amount_interval_denominator
	call recalculate_whammy_panels
end function
function onuicontrol__knob__whammy_panel_E_amount_power_numerator()
	%panel__whammy__state[ 4 * $panel__whammy__numofknobs + 5 ] := $knob__whammy_panel_E_amount_power_numerator
	call recalculate_whammy_panels
end function




function recalculate_transposition_by_monzos()
	~monzo_module_compound_transposition_cents := 0.0
	$knob_number__transposition_by_monzo := 0
	while ($knob_number__transposition_by_monzo < $number_of_monzo_knobs)
		~monzo_module_compound_transposition_cents := ~monzo_module_compound_transposition_cents + (int_to_real(get_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE)) * log(int_to_real(%primes[$knob_number__transposition_by_monzo])))
		inc($knob_number__transposition_by_monzo)
	end while
	~monzo_module_compound_transposition_cents := exp(~monzo_module_compound_transposition_cents)
	~monzo_module_compound_transposition_cents := 1200.0 * log(~monzo_module_compound_transposition_cents)/log(2.0)
end function

function onuicontrol__switch_transposition_by_monzo()
	select ($switch_transposition_by_monzo)
		case 1
			set_control_par_str(get_ui_id($switch_transposition_by_monzo), $CONTROL_PAR_TEXT, "[ ON ]")
		case 0
			set_control_par_str(get_ui_id($switch_transposition_by_monzo), $CONTROL_PAR_TEXT, "[ off ]")
	end select
end function

function onuicontrol__knob___monzo_powers_of_2()
	$knob_number__transposition_by_monzo := 0
	%knobvalues_transposition_by_monzo[$knob_number__transposition_by_monzo] := get_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE)
	call recalculate_transposition_by_monzos
end function
function onuicontrol__knob___monzo_powers_of_3()
	$knob_number__transposition_by_monzo := 1
	%knobvalues_transposition_by_monzo[$knob_number__transposition_by_monzo] := get_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE)
	call recalculate_transposition_by_monzos
end function
function onuicontrol__knob___monzo_powers_of_5()
	$knob_number__transposition_by_monzo := 2
	%knobvalues_transposition_by_monzo[$knob_number__transposition_by_monzo] := get_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE)
	call recalculate_transposition_by_monzos
end function
function onuicontrol__knob___monzo_powers_of_7()
	$knob_number__transposition_by_monzo := 3
	%knobvalues_transposition_by_monzo[$knob_number__transposition_by_monzo] := get_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE)
	call recalculate_transposition_by_monzos
end function
function onuicontrol__knob___monzo_powers_of_11()
	$knob_number__transposition_by_monzo := 4
	%knobvalues_transposition_by_monzo[$knob_number__transposition_by_monzo] := get_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE)
	call recalculate_transposition_by_monzos
end function
function onuicontrol__knob___monzo_powers_of_13()
	$knob_number__transposition_by_monzo := 5
	%knobvalues_transposition_by_monzo[$knob_number__transposition_by_monzo] := get_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE)
	call recalculate_transposition_by_monzos
end function
function onuicontrol__knob___monzo_powers_of_17()
	$knob_number__transposition_by_monzo := 6
	%knobvalues_transposition_by_monzo[$knob_number__transposition_by_monzo] := get_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE)
	call recalculate_transposition_by_monzos
end function
function onuicontrol__knob___monzo_powers_of_19()
	$knob_number__transposition_by_monzo := 7
	%knobvalues_transposition_by_monzo[$knob_number__transposition_by_monzo] := get_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE)
	call recalculate_transposition_by_monzos
end function
function onuicontrol__knob___monzo_powers_of_23()
	$knob_number__transposition_by_monzo := 8
	%knobvalues_transposition_by_monzo[$knob_number__transposition_by_monzo] := get_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE)
	call recalculate_transposition_by_monzos
end function
function onuicontrol__knob___monzo_powers_of_29()
	$knob_number__transposition_by_monzo := 9
	%knobvalues_transposition_by_monzo[$knob_number__transposition_by_monzo] := get_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE)
	call recalculate_transposition_by_monzos
end function
function onuicontrol__knob___monzo_powers_of_31()
	$knob_number__transposition_by_monzo := 10
	%knobvalues_transposition_by_monzo[$knob_number__transposition_by_monzo] := get_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE)
	call recalculate_transposition_by_monzos
end function
function onuicontrol__knob___monzo_powers_of_37()
	$knob_number__transposition_by_monzo := 11
	%knobvalues_transposition_by_monzo[$knob_number__transposition_by_monzo] := get_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE)
	call recalculate_transposition_by_monzos
end function
function onuicontrol__knob___monzo_powers_of_41()
	$knob_number__transposition_by_monzo := 12
	%knobvalues_transposition_by_monzo[$knob_number__transposition_by_monzo] := get_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE)
	call recalculate_transposition_by_monzos
end function
function onuicontrol__knob___monzo_powers_of_43()
	$knob_number__transposition_by_monzo := 13
	%knobvalues_transposition_by_monzo[$knob_number__transposition_by_monzo] := get_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE)
	call recalculate_transposition_by_monzos
end function
function onuicontrol__knob___monzo_powers_of_47()
	$knob_number__transposition_by_monzo := 14
	%knobvalues_transposition_by_monzo[$knob_number__transposition_by_monzo] := get_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE)
	call recalculate_transposition_by_monzos
end function
function onuicontrol__knob___monzo_powers_of_53()
	$knob_number__transposition_by_monzo := 15
	%knobvalues_transposition_by_monzo[$knob_number__transposition_by_monzo] := get_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE)
	call recalculate_transposition_by_monzos
end function
function onuicontrol__knob___monzo_powers_of_59()
	$knob_number__transposition_by_monzo := 16
	%knobvalues_transposition_by_monzo[$knob_number__transposition_by_monzo] := get_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE)
	call recalculate_transposition_by_monzos
end function
function onuicontrol__knob___monzo_powers_of_61()
	$knob_number__transposition_by_monzo := 17
	%knobvalues_transposition_by_monzo[$knob_number__transposition_by_monzo] := get_control_par(%knobids_transposition_by_monzo[$knob_number__transposition_by_monzo], $CONTROL_PAR_VALUE)
	call recalculate_transposition_by_monzos
end function



function recalculate_tuning_dependend_transposition_modules()
	if ($epimoric_bitonal_module_onoff = 1)
		call recalculate_epimoric_bitonal_twinscale_module
	end if
	call recalculate_common_transposition_module
	call recalculate_epimoric_module
end function





{cent input - menu 801}
function recalculate_tuning_from_cent_uivalues()
	$number_of_pitch_classes := $knob__number_of_pitch_classes__tune_by_cents
	$counter1 := 0
	while ($counter1 < $knob__number_of_pitch_classes__tune_by_cents)
		?tuning_table[$counter1] := int_to_real(%panel_tune_by_cents__milicent_array[$counter1])/1000.0
		inc($counter1)
	end while

	if ($switch__stacking_method = 1)
		$counter1 := 1
		while ($counter1 < $knob__number_of_pitch_classes__tune_by_cents)
			?tuning_table[$counter1] := ?tuning_table[$counter1] + ?tuning_table[$counter1 - 1]
			inc($counter1)
		end while
	end if

	   {octave reduction:}
	    select ($switch__reduce_by_octave)
	   		case 1
	   			~reduction_interval := 1200.0
	 	  	case 0
	 	  		~reduction_interval := ~interval_of_equivalence
	    end select
	    if (~reduction_interval = 0.0)
	    	~reduction_interval := 1200.0
	    end if
	    if ($switch__interval_reduction = 1 and ~interval_of_equivalence # 0.0)
	   		$counter1 := 0
			while ($counter1 < $knob__number_of_pitch_classes__tune_by_cents)
				select($switch__reduction_mode)
					case 0
						while ( ?tuning_table[$counter1] >= ~interval_of_equivalence )
							?tuning_table[$counter1] := ?tuning_table[$counter1] - ~reduction_interval
						end while
						while (?tuning_table[$counter1] < 0.0)
							?tuning_table[$counter1] := ?tuning_table[$counter1] + ~reduction_interval
						end while
					case 1
						while ( (?tuning_table[$counter1] > ~interval_of_equivalence) or (?tuning_table[$counter1] < 0.0) )
							if (?tuning_table[$counter1] < 0.0)
								?tuning_table[$counter1] := -1.0 * ?tuning_table[$counter1]
							end if
							if (?tuning_table[$counter1] = ~reduction_interval)
								?tuning_table[$counter1] := 0.0
							end if
							if ( ?tuning_table[$counter1] > ~interval_of_equivalence )
								?tuning_table[$counter1] := ~reduction_interval - (?tuning_table[$counter1] - ~reduction_interval)
							end if
						end while
				end select
				inc($counter1)
			end while
	   end if

	{?tuning_table[$knob__number_of_pitch_classes__tune_by_cents] := ~interval_of_equivalence}
	
end function


function func_gui_tune_by_cents__stylise_uivalue_displays
				$counter1 := 0
				while ($counter1 < $panel__tune_by_cents__num_of_ui_values)
					set_control_par(%tune_by_cents__uivalue_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_BG)
					set_control_par(%tune_by_cents__uivalue_id[$counter1],$CONTROL_PAR_SHOW_ARROWS,0)
					inc($counter1)
				end while
end function

function update_panel_tune_by_cents__visibility()

				$counter1 := 0
				while ($counter1 < ($knob__number_of_pitch_classes__tune_by_cents-($panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter)) and $counter1 < $panel__tune_by_cents__num_of_ui_values)
					set_control_par(%tune_by_cents__uivalue_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					inc($counter1)
				end while
				while ($counter1 <  $panel__tune_by_cents__num_of_ui_values)
					set_control_par(%tune_by_cents__uivalue_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					inc($counter1)
				end while

end function

function panel_tune_by_cents_update_uivalues()
	$counter1 := 0
	while ($counter1 < $panel__tune_by_cents__num_of_ui_values)
			set_control_par(%tune_by_cents__uivalue_id[$counter1],$CONTROL_PAR_VALUE, %panel_tune_by_cents__milicent_array[$panel__tune_by_cents__num_of_ui_values * $panel__tune_by_cents__navigation_counter + $counter1])
			inc($counter1)
	end while
end function

function update_tune_by_cents_navigation_buttons()
	if ($panel__tune_by_cents__navigation_counter # 0)
		set_control_par(get_ui_id($panel__tune_by_cents__navigate_left),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	else
		set_control_par(get_ui_id($panel__tune_by_cents__navigate_left),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	end if
	
	if ($knob__number_of_pitch_classes__tune_by_cents > $panel__tune_by_cents__num_of_ui_values*($panel__tune_by_cents__navigation_counter+1))
		set_control_par(get_ui_id($panel__tune_by_cents__navigate_right),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	else
		set_control_par(get_ui_id($panel__tune_by_cents__navigate_right),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	end if
end function

function update_tune_by_cents__table_gui()
	while ($knob__number_of_pitch_classes__tune_by_cents <= $panel__tune_by_cents__navigation_counter * $panel__tune_by_cents__num_of_ui_values)
		dec($panel__tune_by_cents__navigation_counter)
	end while
	if ($panel__tune_by_cents__navigation_counter * $panel__tune_by_cents__num_of_ui_values > $knob__number_of_pitch_classes__tune_by_cents or $panel__tune_by_cents__navigation_counter < 0)
		$panel__tune_by_cents__navigation_counter := 0
	end if

	{......from v32}
	call update_tune_by_cents_navigation_buttons
	call panel_tune_by_cents_update_uivalues
	call update_panel_tune_by_cents__visibility
end function

function onuicontrol__knob__number_of_pitch_classes__tune_by_cents()
	$number_of_pitch_classes := $knob__number_of_pitch_classes__tune_by_cents
	call update_tune_by_cents__table_gui
	call recalculate_tuning_dependend_transposition_modules
end function

function onuicontrol__panel__tune_by_cents__navigate_left()
	$panel__tune_by_cents__navigate_left := 0
	dec($panel__tune_by_cents__navigation_counter)
	if ($panel__tune_by_cents__navigation_counter < 0)
		$panel__tune_by_cents__navigation_counter := 0
	end if
	call update_tune_by_cents__table_gui
end function

function onuicontrol__panel__tune_by_cents__navigate_right()
	$panel__tune_by_cents__navigate_right := 0
	if ($knob__number_of_pitch_classes__tune_by_cents > ($panel__tune_by_cents__navigation_counter+1)*$panel__tune_by_cents__num_of_ui_values)
		inc($panel__tune_by_cents__navigation_counter)
	end if
	call update_tune_by_cents__table_gui
end function

on ui_control($gui_cent_value_1)
	%panel_tune_by_cents__milicent_array[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter+ 0 ] := $gui_cent_value_1
	?tuning_table[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter + 0] := int_to_real(%panel_tune_by_cents__milicent_array[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter + 0])/1000.0
	call recalculate_tuning_from_cent_uivalues	
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_cent_value_2)
	%panel_tune_by_cents__milicent_array[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter+ 1 ] := $gui_cent_value_2
	?tuning_table[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter + 1] := int_to_real(%panel_tune_by_cents__milicent_array[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter + 1])/1000.0
	call recalculate_tuning_from_cent_uivalues	
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_cent_value_3)
	%panel_tune_by_cents__milicent_array[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter+ 2 ] := $gui_cent_value_3
	?tuning_table[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter + 2] := int_to_real(%panel_tune_by_cents__milicent_array[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter + 2])/1000.0
	call recalculate_tuning_from_cent_uivalues	
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_cent_value_4)
	%panel_tune_by_cents__milicent_array[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter+ 3 ] := $gui_cent_value_4
	?tuning_table[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter + 3] := int_to_real(%panel_tune_by_cents__milicent_array[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter + 3])/1000.0
	call recalculate_tuning_from_cent_uivalues	
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_cent_value_5)
	%panel_tune_by_cents__milicent_array[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter+ 4 ] := $gui_cent_value_5
	?tuning_table[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter + 4] := int_to_real(%panel_tune_by_cents__milicent_array[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter + 4])/1000.0
	call recalculate_tuning_from_cent_uivalues	
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_cent_value_6)
	%panel_tune_by_cents__milicent_array[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter+ 5 ] := $gui_cent_value_6
	?tuning_table[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter + 5] := int_to_real(%panel_tune_by_cents__milicent_array[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter + 5])/1000.0
	call recalculate_tuning_from_cent_uivalues	
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_cent_value_7)
	%panel_tune_by_cents__milicent_array[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter+ 6 ] := $gui_cent_value_7
	?tuning_table[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter + 6] := int_to_real(%panel_tune_by_cents__milicent_array[$panel__tune_by_cents__num_of_ui_values*$panel__tune_by_cents__navigation_counter + 6])/1000.0
	call recalculate_tuning_from_cent_uivalues	
	call recalculate_tuning_dependend_transposition_modules
end on


{panel jiknobs:}
function update_jiknobs_nav_button_txt()
	$panel__jiknobs_nav0 := 0
		set_text ($panel__jiknobs_nav0,"[1-6]")
	$panel__jiknobs_nav1 := 0
		set_text ($panel__jiknobs_nav1,"[7-12]")
	$panel__jiknobs_nav2 := 0
		set_text ($panel__jiknobs_nav2,"[13-18]")
	$panel__jiknobs_nav3 := 0
		set_text ($panel__jiknobs_nav3,"[19-24]")
	select ($jiknobs_panel__navigation_counter)
		case 0
			set_text ($panel__jiknobs_nav0,"[ 1 - 6 ]")
			$panel__jiknobs_nav0 := 1
		case 1
			set_text ($panel__jiknobs_nav1,"[ 7 - 12 ]")
			$panel__jiknobs_nav1 := 1
		case 2
			set_text ($panel__jiknobs_nav2,"[ 13 - 18 ]")
			$panel__jiknobs_nav2 := 1
		case 3
			set_text ($panel__jiknobs_nav3,"[ 19 - 24 ]")
			$panel__jiknobs_nav3 := 1
	end select
end function
function display_correct_knobs_in_jiknobs_panel()
	$counter1 := 0
	while ($counter1 < $knob__number_of_pitch_classes__jiknobs)
		set_control_par(%knobids__panel_jiknobs__numerators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(%knobids__panel_jiknobs__denominators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		inc ($counter1)
	end while
	while ($counter1 < num_elements(%knobids__panel_jiknobs__numerators))
		set_control_par(%knobids__panel_jiknobs__numerators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
		set_control_par(%knobids__panel_jiknobs__denominators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
		inc ($counter1)
	end while

	set_control_par(get_ui_id($panel__jiknobs_ratios_i_to_vi),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	set_control_par(get_ui_id($panel__jiknobs_ratios_vii_to_xii),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	set_control_par(get_ui_id($panel__jiknobs_ratios_xiii_to_xviii),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	set_control_par(get_ui_id($panel__jiknobs_ratios_xix_to_xxiv),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	select ($jiknobs_panel__navigation_counter)
		case 0
			set_control_par(get_ui_id($panel__jiknobs_ratios_i_to_vi),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		case 1
			set_control_par(get_ui_id($panel__jiknobs_ratios_vii_to_xii),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		case 2
			set_control_par(get_ui_id($panel__jiknobs_ratios_xiii_to_xviii),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		case 3
			set_control_par(get_ui_id($panel__jiknobs_ratios_xix_to_xxiv),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	end select
end function
function onuicontrol__panel__jiknobs_nav0()
	$jiknobs_panel__navigation_counter := 0
	call display_correct_knobs_in_jiknobs_panel
	call update_jiknobs_nav_button_txt
end function
function onuicontrol__panel__jiknobs_nav1()
	if ($knob__number_of_pitch_classes__jiknobs > 6)
		$jiknobs_panel__navigation_counter := 1
	else
		$jiknobs_panel__navigation_counter := 0
	end if
	call display_correct_knobs_in_jiknobs_panel
	call update_jiknobs_nav_button_txt
end function
function onuicontrol__panel__jiknobs_nav2()
	if ($knob__number_of_pitch_classes__jiknobs > 12)
		$jiknobs_panel__navigation_counter := 2
	else
		$jiknobs_panel__navigation_counter := 0
	end if
	call display_correct_knobs_in_jiknobs_panel
	call update_jiknobs_nav_button_txt
end function
function onuicontrol__panel__jiknobs_nav3()
	if ($knob__number_of_pitch_classes__jiknobs > 18)
		$jiknobs_panel__navigation_counter := 3
	else
		$jiknobs_panel__navigation_counter := 0
	end if
	call display_correct_knobs_in_jiknobs_panel
	call update_jiknobs_nav_button_txt
end function

function recalculate_ji_ratios_tuning_from_knobs()
	$number_of_pitch_classes := $knob__number_of_pitch_classes__jiknobs
	$counter1 := 0
	while ($counter1 < $knob__number_of_pitch_classes__jiknobs)
		?jiknobs_tuning_cents[$counter1] := 1200.0 * log (	...
					int_to_real(get_control_par(%knobids__panel_jiknobs__numerators[$counter1],$CONTROL_PAR_VALUE))	  ...
					/				...
					int_to_real(get_control_par(%knobids__panel_jiknobs__denominators[$counter1],$CONTROL_PAR_VALUE)) ...
					) / log(2.0)
		inc($counter1)
	end while
	if ($switch__stacking_method = 1)
		$counter1 := 1
		while ($counter1 < $knob__number_of_pitch_classes__jiknobs)
			?jiknobs_tuning_cents[$counter1] := ?jiknobs_tuning_cents[$counter1] + ?jiknobs_tuning_cents[$counter1 - 1]
			inc($counter1)
		end while
	end if

	   {octave reduction:}
	    select ($switch__reduce_by_octave)
	   		case 1
	   			~reduction_interval := 1200.0
	 	  	case 0
	 	  		~reduction_interval := ~interval_of_equivalence
	    end select
	    if (~reduction_interval = 0.0)
	    	~reduction_interval := 1200.0
	    end if
	    if ($switch__interval_reduction = 1 and ~interval_of_equivalence # 0.0)
	   		$counter1 := 0
			while ($counter1 < $knob__number_of_pitch_classes__jiknobs)
				select($switch__reduction_mode)
					case 0
						while ( ?jiknobs_tuning_cents[$counter1] >= ~interval_of_equivalence )
							?jiknobs_tuning_cents[$counter1] := ?jiknobs_tuning_cents[$counter1] - ~reduction_interval
						end while
						while (?jiknobs_tuning_cents[$counter1] < 0.0)
							?jiknobs_tuning_cents[$counter1] := ?jiknobs_tuning_cents[$counter1] + ~reduction_interval
						end while
					case 1
						while ( (?jiknobs_tuning_cents[$counter1] > ~interval_of_equivalence) or (?jiknobs_tuning_cents[$counter1] < 0.0) )
							if (?jiknobs_tuning_cents[$counter1] < 0.0)
								?jiknobs_tuning_cents[$counter1] := -1.0 * ?jiknobs_tuning_cents[$counter1]
							end if
							if (?jiknobs_tuning_cents[$counter1] = ~reduction_interval)
								?jiknobs_tuning_cents[$counter1] := 0.0
							end if
							if ( ?jiknobs_tuning_cents[$counter1] > ~interval_of_equivalence )
								?jiknobs_tuning_cents[$counter1] := ~reduction_interval - (?jiknobs_tuning_cents[$counter1] - ~reduction_interval)
							end if
						end while
						
				end select
				inc($counter1)
			end while
	   end if

	   {bubble sort:}
	  {
		$counter2 := 0
		while ($counter2 < $knob__number_of_pitch_classes__jiknobs)
			$counter1 := 1
			while ($counter1 + $counter2 < $knob__number_of_pitch_classes__jiknobs) 
				if (?jiknobs_tuning_cents[$counter1] < ?jiknobs_tuning_cents[$counter1 -1])
					~jiknobs__helper_float := ?jiknobs_tuning_cents[$counter1]
					?jiknobs_tuning_cents[$counter1] := ?jiknobs_tuning_cents[$counter1 - 1]
					?jiknobs_tuning_cents[$counter1 - 1] := ~jiknobs__helper_float
				end if
				inc($counter1)
			end while
			inc($counter2)
		end while
	}
	{apply tuning}
	$counter1 := 0
	
	while ($counter1 < $knob__number_of_pitch_classes__jiknobs)
		?tuning_table[$counter1] := ?jiknobs_tuning_cents[$counter1]
		inc($counter1)
	end while
	
end function
function update_jiknobs_gui()
	{todo}
end function

function onuicontrol__knob__number_of_pitch_classes__jiknobs()
		while ($counter1 < num_elements(%knobids__panel_jiknobs__numerators))
			set_control_par_str (%knobids__panel_jiknobs__numerators[$counter1],$CONTROL_PAR_TEXT,"")
			set_control_par_str (%knobids__panel_jiknobs__denominators[$counter1],$CONTROL_PAR_TEXT,"")
			set_control_par(%knobids__panel_jiknobs__numerators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
			set_control_par(%knobids__panel_jiknobs__denominators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
			inc ($counter1)
		end while

		$counter1 := 0
		while ($counter1 < $knob__number_of_pitch_classes__jiknobs)
			set_control_par_str (%knobids__panel_jiknobs__denominators[$counter1],$CONTROL_PAR_TEXT,"   /")
			set_control_par(%knobids__panel_jiknobs__numerators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par(%knobids__panel_jiknobs__denominators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par_str (%knobids__panel_jiknobs__numerators[$counter1],$CONTROL_PAR_TEXT,"   " & !cyfry_rzymskie[$counter1+1])
			inc($counter1)
		end while
	if ( $jiknobs_panel__navigation_counter * 6 >= $knob__number_of_pitch_classes__jiknobs)
		$jiknobs_panel__navigation_counter := $knob__number_of_pitch_classes__jiknobs / 6
		call display_correct_knobs_in_jiknobs_panel
		call update_jiknobs_nav_button_txt
	end if
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function


function onuicontrol__knob_jiknobs__numerator1()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator2()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator3()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator4()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator5()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator6()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator7()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator8()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator9()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator10()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator11()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator12()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator13()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator14()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator15()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator16()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator17()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator18()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator19()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator20()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator21()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator22()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator23()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__numerator24()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function

function onuicontrol__knob_jiknobs__denominator1()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator2()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator3()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator4()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator5()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator6()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator7()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator8()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator9()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator10()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator11()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator12()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator13()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator14()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator15()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator16()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator17()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator18()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator19()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator20()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator21()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator22()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator23()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_jiknobs__denominator24()
	call recalculate_ji_ratios_tuning_from_knobs
	call recalculate_tuning_dependend_transposition_modules
end function




{expknobs:}
function update_expknobs_nav_button_txt()
	$panel__expknobs_nav0 := 0
		set_text ($panel__expknobs_nav0,"[1-6]")
	$panel__expknobs_nav1 := 0
		set_text ($panel__expknobs_nav1,"[7-12]")
	$panel__expknobs_nav2 := 0
		set_text ($panel__expknobs_nav2,"[13-18]")
	$panel__expknobs_nav3 := 0
		set_text ($panel__expknobs_nav3,"[19-24]")
	select ($expknobs_panel__navigation_counter)
		case 0
			set_text ($panel__expknobs_nav0,"[ 1 - 6 ]")
			$panel__expknobs_nav0 := 1
		case 1
			set_text ($panel__expknobs_nav1,"[ 7 - 12 ]")
			$panel__expknobs_nav1 := 1
		case 2
			set_text ($panel__expknobs_nav2,"[ 13 - 18 ]")
			$panel__expknobs_nav2 := 1
		case 3
			set_text ($panel__expknobs_nav3,"[ 19 - 24 ]")
			$panel__expknobs_nav3 := 1
	end select
end function
function display_correct_knobs_in_expknobs_panel()
	$counter1 := 0
	while ($counter1 < $knob__number_of_pitch_classes__expknobs)
		set_control_par(%knobids__panel_expknobs__numerators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(%knobids__panel_expknobs__denominators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		inc ($counter1)
	end while
	while ($counter1 < num_elements(%knobids__panel_expknobs__numerators))
		set_control_par(%knobids__panel_expknobs__numerators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
		set_control_par(%knobids__panel_expknobs__denominators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
		inc ($counter1)
	end while
	set_control_par(get_ui_id($panel__expknobs_ratios_i_to_vi),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	set_control_par(get_ui_id($panel__expknobs_ratios_vii_to_xii),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	set_control_par(get_ui_id($panel__expknobs_ratios_xiii_to_xviii),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	set_control_par(get_ui_id($panel__expknobs_ratios_xix_to_xxiv),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	select ($expknobs_panel__navigation_counter)
		case 0
			set_control_par(get_ui_id($panel__expknobs_ratios_i_to_vi),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		case 1
			set_control_par(get_ui_id($panel__expknobs_ratios_vii_to_xii),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		case 2
			set_control_par(get_ui_id($panel__expknobs_ratios_xiii_to_xviii),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		case 3
			set_control_par(get_ui_id($panel__expknobs_ratios_xix_to_xxiv),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	end select
end function
function onuicontrol__knob__number_of_pitch_classes__expknobs()
	while ($counter1 < num_elements(%knobids__panel_expknobs__numerators))
		set_control_par_str (%knobids__panel_expknobs__numerators[$counter1],$CONTROL_PAR_TEXT,"")
		set_control_par_str (%knobids__panel_expknobs__denominators[$counter1],$CONTROL_PAR_TEXT,"")
		set_control_par(%knobids__panel_expknobs__numerators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
		set_control_par(%knobids__panel_expknobs__denominators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_MOD_LIGHT)
		inc ($counter1)
	end while

	$counter1 := 0
	while ($counter1 < $knob__number_of_pitch_classes__expknobs)
		set_control_par_str (%knobids__panel_expknobs__denominators[$counter1],$CONTROL_PAR_TEXT,"   /")
		set_control_par(%knobids__panel_expknobs__numerators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par(%knobids__panel_expknobs__denominators[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		set_control_par_str (%knobids__panel_expknobs__numerators[$counter1],$CONTROL_PAR_TEXT,"   " & !cyfry_rzymskie[$counter1+1])
		inc($counter1)
	end while
	if ( $expknobs_panel__navigation_counter * 6 >= $knob__number_of_pitch_classes__expknobs)
		$expknobs_panel__navigation_counter := $knob__number_of_pitch_classes__expknobs / 6
		call display_correct_knobs_in_expknobs_panel
		call update_expknobs_nav_button_txt
	end if
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__panel__expknobs_nav0()
	$expknobs_panel__navigation_counter := 0
	call display_correct_knobs_in_expknobs_panel
	call update_expknobs_nav_button_txt
end function
function onuicontrol__panel__expknobs_nav1()
	if ($knob__number_of_pitch_classes__expknobs > 6)
		$expknobs_panel__navigation_counter := 1
	else
		$expknobs_panel__navigation_counter := 0
	end if
	call display_correct_knobs_in_expknobs_panel
	call update_expknobs_nav_button_txt
end function
function onuicontrol__panel__expknobs_nav2()
	if ($knob__number_of_pitch_classes__expknobs > 12)
		$expknobs_panel__navigation_counter := 2
	else
		$expknobs_panel__navigation_counter := 0
	end if
	call display_correct_knobs_in_expknobs_panel
	call update_expknobs_nav_button_txt
end function
function onuicontrol__panel__expknobs_nav3()
	if ($knob__number_of_pitch_classes__expknobs > 18)
		$expknobs_panel__navigation_counter := 3
	else
		$expknobs_panel__navigation_counter := 0
	end if
	call display_correct_knobs_in_expknobs_panel
	call update_expknobs_nav_button_txt
end function

function recalculate_tuning_from_expknobs()
	$counter1 := 0
	while ($counter1 < $knob__number_of_pitch_classes__expknobs)
		
	?expknobs_tuning_cents[$counter1] :=  ~interval_of_equivalence	 *	...
										int_to_real(get_control_par(%knobids__panel_expknobs__numerators[$counter1],$CONTROL_PAR_VALUE)) /  ...
										int_to_real(get_control_par(%knobids__panel_expknobs__denominators[$counter1],$CONTROL_PAR_VALUE)) 
		inc($counter1)
	end while

	if ($switch__stacking_method = 1)
		$counter1 := 1
		while ($counter1 < $knob__number_of_pitch_classes__expknobs)
			?expknobs_tuning_cents[$counter1] := ?expknobs_tuning_cents[$counter1] + ?expknobs_tuning_cents[$counter1 - 1]
			inc($counter1)
		end while
	end if

   {octave reduction:}
    select ($switch__reduce_by_octave)
   		case 1
   			~reduction_interval := 1200.0
 	  	case 0
 	  		~reduction_interval := ~interval_of_equivalence
    end select
    if (~reduction_interval = 0.0)
    	~reduction_interval := 1200.0
    end if
    if ($switch__interval_reduction = 1 and ~interval_of_equivalence # 0.0)
   		$counter1 := 0
		while ($counter1 < $knob__number_of_pitch_classes__expknobs)
			select($switch__reduction_mode)
				case 0
					while ( ?expknobs_tuning_cents[$counter1] >= ~interval_of_equivalence )
						?expknobs_tuning_cents[$counter1] := ?expknobs_tuning_cents[$counter1] - ~reduction_interval
					end while
					while (?expknobs_tuning_cents[$counter1] < 0.0)
						?expknobs_tuning_cents[$counter1] := ?expknobs_tuning_cents[$counter1] + ~reduction_interval
					end while
				case 1
					while ( (?expknobs_tuning_cents[$counter1] > ~interval_of_equivalence) or (?expknobs_tuning_cents[$counter1] < 0.0) )
						if (?expknobs_tuning_cents[$counter1] < 0.0)
							?expknobs_tuning_cents[$counter1] := -1.0 * ?expknobs_tuning_cents[$counter1]
						end if
						if (?expknobs_tuning_cents[$counter1] = ~reduction_interval)
							?expknobs_tuning_cents[$counter1] := 0.0
						end if
						if ( ?expknobs_tuning_cents[$counter1] > ~interval_of_equivalence )
							?expknobs_tuning_cents[$counter1] := ~reduction_interval - (?expknobs_tuning_cents[$counter1] - ~reduction_interval)
						end if
					end while
					
			end select
			inc($counter1)
		end while
   end if

	{apply tuning}
	$counter1 := 0
	while ($counter1 < $knob__number_of_pitch_classes__expknobs)
		?tuning_table[$counter1] := ?expknobs_tuning_cents[$counter1]
		inc($counter1)
	end while
end function
function update_expknobs_gui()
	{todo}
end function


function onuicontrol__knob_expknobs__numerator1()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator2()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator3()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator4()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator5()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator6()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator7()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator8()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator9()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator10()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator11()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator12()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator13()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator14()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator15()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator16()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator17()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator18()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator19()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator20()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator21()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator22()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator23()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__numerator24()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function

function onuicontrol__knob_expknobs__denominator1()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator2()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator3()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator4()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator5()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator6()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator7()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator8()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator9()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator10()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator11()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator12()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator13()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator14()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator15()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator16()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator17()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator18()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator19()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator20()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator21()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator22()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator23()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_expknobs__denominator24()
	call recalculate_tuning_from_expknobs
	call recalculate_tuning_dependend_transposition_modules
end function




function func_calculate_euler_fokker_genus
 	$efg_degree := 0
	$counter1 := 0
	if ($efg_generator_1 > 0)
		?efg_generators[$counter1] := int_to_real($efg_generator_1)
		inc($efg_degree)
		inc($counter1)
	end if
	if ($efg_generator_2 > 0)
		?efg_generators[$counter1] := int_to_real($efg_generator_2)
		inc($efg_degree)
		inc($counter1)
	end if
	if ($efg_generator_3 > 0)
		?efg_generators[$counter1] := int_to_real($efg_generator_3)
		inc($efg_degree)
		inc($counter1)
	end if
	if ($efg_generator_4 > 0)
		?efg_generators[$counter1] := int_to_real($efg_generator_4)
		inc($efg_degree)
		inc($counter1)
	end if
	if ($efg_generator_5 > 0)
		?efg_generators[$counter1] := int_to_real($efg_generator_5)
		inc($efg_degree)
		inc($counter1)
	end if

	if ($efg_degree = 0)
		$number_of_pitch_classes := 1
	end if
	{sort(?efg_generators,1)}
	{
	$counter1 := 1
	while ( $counter1 < num_elements(?efg_generators) )
		if (?efg_generators[$counter1] > ?efg_generators[$counter1 - 1])
			~efg_liczba_w_pamieci := ?efg_generators[$counter1 - 1]
			?efg_generators[$counter1 - 1] := ?efg_generators[$counter1]
			?efg_generators[$counter1] := ~efg_liczba_w_pamieci
		end if
		inc($counter1)
	end while
	}
	
	{reset efg_calc_array}
	$counter1 := 0
	while ($counter1 < num_elements(?efg_calc_array))
		?efg_calc_array[$counter1] := 1.0
		inc($counter1)
	end while

	
	{init $efg_iter to 2^(n-1) which is the total number of possible combinations minus 1}
	$efg_iter := 1
	$counter1 := 0
	while ($counter1 < $efg_degree)
		$efg_iter := $efg_iter * 2
		inc($counter1)
	end while
	$efg_iter := $efg_iter - 1

	{read $efg_iter as a binary representation of combination, e.g. 110 is a combination of two elements out of three}
	$efg_number_of_pitch_classes := 0
	while ($efg_iter >= 0)
		$counter1 := $efg_degree
		inc($efg_number_of_pitch_classes)
		while ($counter1 > 0)
			if ( (sh_right($efg_iter, $counter1 - 1) mod 2) = 1 )
				?efg_calc_array[$efg_number_of_pitch_classes] := ?efg_calc_array[$efg_number_of_pitch_classes] * ?efg_generators[$counter1 - 1]
			end if
			dec($counter1)
		end while
		dec($efg_iter)
	end while

{
	select ($efg_degree)
		case 1
			$efg_number_of_pitch_classes := 1
			?efg_calc_array[0] := ?efg_generators[0]
		case 2
			$efg_number_of_pitch_classes := 3
			?efg_calc_array[0] := ?efg_generators[0] 
			?efg_calc_array[1] := ?efg_generators[1]
			?efg_calc_array[2] := ?efg_generators[0]*?efg_generators[1]
		case 3
			$efg_number_of_pitch_classes := 7
			?efg_calc_array[0] := ?efg_generators[0]
			?efg_calc_array[1] := ?efg_generators[1]
			?efg_calc_array[2] := ?efg_generators[2]
			?efg_calc_array[3] := ?efg_generators[0]*?efg_generators[1]
			?efg_calc_array[4] := ?efg_generators[0]*?efg_generators[2]
			?efg_calc_array[5] := ?efg_generators[1]*?efg_generators[2]
			?efg_calc_array[6] := ?efg_generators[0]*?efg_generators[1]*?efg_generators[2]
		case 4
			$efg_number_of_pitch_classes := 15
			?efg_calc_array[0] := ?efg_generators[0]
			?efg_calc_array[1] := ?efg_generators[1]
			?efg_calc_array[2] := ?efg_generators[2]
			?efg_calc_array[3] := ?efg_generators[3]
			?efg_calc_array[4] := ?efg_generators[0]*?efg_generators[1]
			?efg_calc_array[5] := ?efg_generators[0]*?efg_generators[2]
			?efg_calc_array[6] := ?efg_generators[0]*?efg_generators[3]
			?efg_calc_array[7] := ?efg_generators[1]*?efg_generators[2]
			?efg_calc_array[8] := ?efg_generators[1]*?efg_generators[3]
			?efg_calc_array[9] := ?efg_generators[2]*?efg_generators[3]
			?efg_calc_array[10] := ?efg_generators[0]*?efg_generators[1]*?efg_generators[2]
			?efg_calc_array[11] := ?efg_generators[0]*?efg_generators[1]*?efg_generators[3]
			?efg_calc_array[12] := ?efg_generators[0]*?efg_generators[2]*?efg_generators[3]
			?efg_calc_array[13] := ?efg_generators[1]*?efg_generators[2]*?efg_generators[3]
			?efg_calc_array[14] := ?efg_generators[0]*?efg_generators[1]*?efg_generators[2]*?efg_generators[3]
		case 5
			$efg_number_of_pitch_classes := 26
			?efg_calc_array[0] := ?efg_generators[0]
			?efg_calc_array[1] := ?efg_generators[1]
			?efg_calc_array[2] := ?efg_generators[2]
			?efg_calc_array[3] := ?efg_generators[3]
			?efg_calc_array[4] := ?efg_generators[4]
			?efg_calc_array[5] := ?efg_generators[0]*?efg_generators[1]
			?efg_calc_array[6] := ?efg_generators[0]*?efg_generators[2]
			?efg_calc_array[7] := ?efg_generators[0]*?efg_generators[3]
			?efg_calc_array[8] := ?efg_generators[0]*?efg_generators[4]
			?efg_calc_array[9] := ?efg_generators[1]*?efg_generators[2]
			?efg_calc_array[10] := ?efg_generators[1]*?efg_generators[3]
			?efg_calc_array[11] := ?efg_generators[1]*?efg_generators[4]
			?efg_calc_array[12] := ?efg_generators[2]*?efg_generators[3]
			?efg_calc_array[13] := ?efg_generators[2]*?efg_generators[4]
			?efg_calc_array[14] := ?efg_generators[3]*?efg_generators[4]
			?efg_calc_array[15] := ?efg_generators[0]*?efg_generators[1]*?efg_generators[2]
			?efg_calc_array[16] := ?efg_generators[0]*?efg_generators[1]*?efg_generators[3]
			?efg_calc_array[17] := ?efg_generators[0]*?efg_generators[1]*?efg_generators[4]
			?efg_calc_array[18] := ?efg_generators[1]*?efg_generators[2]*?efg_generators[3]
			?efg_calc_array[19] := ?efg_generators[1]*?efg_generators[2]*?efg_generators[4]
			?efg_calc_array[20] := ?efg_generators[2]*?efg_generators[3]*?efg_generators[4]
			?efg_calc_array[21] := ?efg_generators[0]*?efg_generators[1]*?efg_generators[2]*?efg_generators[3]
			?efg_calc_array[22] := ?efg_generators[0]*?efg_generators[1]*?efg_generators[2]*?efg_generators[4]
			?efg_calc_array[23] := ?efg_generators[0]*?efg_generators[1]*?efg_generators[3]*?efg_generators[4]
			?efg_calc_array[24] := ?efg_generators[0]*?efg_generators[2]*?efg_generators[3]*?efg_generators[4]
			?efg_calc_array[25] := ?efg_generators[0]*?efg_generators[1]*?efg_generators[2]*?efg_generators[3]*?efg_generators[4]
	end select
}

	{development, debug}
	if ( 1 = 0 )
		?efg_calc_array[0] := 2.0
		?efg_calc_array[1] := 6.0
		?efg_calc_array[2] := 10.0
		$efg_number_of_pitch_classes := 3
	end if

	{Transpose to the same octave (or other interval of equivalence):}
	{
		~efg_interval_of_equivalence_ratio := 2.0

		$counter1 := 0
		while ($counter1 < num_elements(?efg_calc_array))
			if (?efg_calc_array[$counter1] # 0.0)
				while (?efg_calc_array[$counter1] > ~efg_interval_of_equivalence_ratio)
					?efg_calc_array[$counter1] := ?efg_calc_array[$counter1] * 1.0 / ~efg_interval_of_equivalence_ratio
				end while
			end if
			inc($counter1)
		end while
	}

	{convert to cents}
	$counter1 := 0
	while ($counter1 < $efg_number_of_pitch_classes)
		?efg_calc_array[$counter1] := 1200.0*log(?efg_calc_array[$counter1])/log(2.0)
		inc($counter1)
	end while

	{assign efg_calc_array to the ?tuning_table array}
		?tuning_table[0] := 0.0
		$number_of_pitch_classes := 1
		$counter1 := 0
		while ($counter1 < $efg_number_of_pitch_classes)
			?tuning_table[$counter1+0] := ?efg_calc_array[$counter1]
			inc($counter1)
		end while
		$number_of_pitch_classes := $efg_number_of_pitch_classes

	if ($number_of_pitch_classes < 1)
		$number_of_pitch_classes := 1
		?tuning_table[0] := 0.0
	end if

    {octave reduction:}

	    select ($switch__reduce_by_octave)
	   		case 1
	   			~reduction_interval := 1200.0
	 	  	case 0
	 	  		~reduction_interval := ~interval_of_equivalence
	    end select
	    if (~reduction_interval = 0.0)
	    	~reduction_interval := 1200.0
	    end if
	    if ($switch__interval_reduction = 1 and ~interval_of_equivalence # 0.0)
	   		$counter1 := 0
			while ($counter1 < $number_of_pitch_classes)
				select($switch__reduction_mode)
					case 0
						while ( ?tuning_table[$counter1] >= ~interval_of_equivalence )
							?tuning_table[$counter1] := ?tuning_table[$counter1] - ~reduction_interval
						end while
						while (?tuning_table[$counter1] < 0.0)
							?tuning_table[$counter1] := ?tuning_table[$counter1] + ~reduction_interval
						end while
					case 1
						while ( (?tuning_table[$counter1] > ~interval_of_equivalence) or (?tuning_table[$counter1] < 0.0) )
							if (?tuning_table[$counter1] < 0.0)
								?tuning_table[$counter1] := -1.0 * ?tuning_table[$counter1]
							end if
							if (?tuning_table[$counter1] = ~reduction_interval)
								?tuning_table[$counter1] := 0.0
							end if
							if ( ?tuning_table[$counter1] > ~interval_of_equivalence )
								?tuning_table[$counter1] := ~reduction_interval - (?tuning_table[$counter1] - ~reduction_interval)
							end if
						end while
				end select
				inc($counter1)
			end while
        end if

	{sort(?efg_calc_array,1)} {od najwiekszej do najmniejszej wartosci}
	{
	$counter1 := 1
	while ( $counter1 < num_elements(?efg_calc_array) )
		if (?efg_calc_array[$counter1] > ?efg_calc_array[$counter1 - 1])
			~efg_liczba_w_pamieci := ?efg_calc_array[$counter1 - 1]
			?efg_calc_array[$counter1 - 1] := ?efg_calc_array[$counter1]
			?efg_calc_array[$counter1] := ~efg_liczba_w_pamieci
		end if
		inc($counter1)
	end while
	}


	{bubble sort}
		$counter2 := 0
		while ($counter2 < $number_of_pitch_classes)
			$counter1 := 1
			while ($counter1 + $counter2 < $number_of_pitch_classes) 
				if (?tuning_table[$counter1] < ?tuning_table[$counter1 -1])
					~__f__ := ?tuning_table[$counter1]
					?tuning_table[$counter1] := ?tuning_table[$counter1 - 1]
					?tuning_table[$counter1 - 1] := ~__f__
				end if
				inc($counter1)
			end while
			inc($counter2)
		end while



	{ under dev. - remove duplicate steps}
		if ($efg_remove_step_duplicates = 1)
			$counter1 := 0
			while ($counter1 < $number_of_pitch_classes - 1)
				if (?tuning_table[$counter1] > ?tuning_table[$counter1 + 1] - 1.0 and ?tuning_table[$counter1] < ?tuning_table[$counter1 + 1]  + 1.0)
					$counter2 := $counter1 + 1
					while ($counter2 < $number_of_pitch_classes)
						?tuning_table[$counter2] := ?tuning_table[$counter2 + 1]
						inc($counter2)
					end while
					dec($number_of_pitch_classes)
					dec($counter1) {without this dec() only 1 element would be removed from each duplicate}
				end if
				inc($counter1)
			end while
		end if

	{test}
	if ( 1 = 0 )
		message("Number of pitch classes: " & $number_of_pitch_classes & " " & "Tuning table: " & ?tuning_table[0] & " "  & ?tuning_table[1] & " " & ?tuning_table[2] & " " & ?tuning_table[3] & " " & ?tuning_table[4] & " " & ?tuning_table[5] & " " & ?tuning_table[6])
	end if
	{call debug}

	{interval of equivalence is set as additional last step of the scale (wont be used)}
		?tuning_table[$number_of_pitch_classes+1] := ~interval_of_equivalence

		{for debugging (set a 100c scale)}
		if (1 = 0)
			$number_of_pitch_classes := 1
			?tuning_table[0] := 0.0
			~interval_of_equivalence := 100.0
		end if
end function


function onuicontrol__efg_generator_1()
	call func_calculate_euler_fokker_genus
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__efg_generator_2()
	call func_calculate_euler_fokker_genus
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__efg_generator_3()
	call func_calculate_euler_fokker_genus
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__efg_generator_4()
	call func_calculate_euler_fokker_genus
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__efg_generator_5()
	call func_calculate_euler_fokker_genus
	call recalculate_tuning_dependend_transposition_modules
end function

function cps_panel_update_label()
	select ($cps_combi_count)
		case 1
			set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  m o n a n y")
		case 2
			set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  d y a n y")
		case 3
			set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  t r i a n y")
		case 4
			set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  t e t r a n y")
		case 5
			set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  p e n t a n y")
		case 6
			set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  h e x a n y")
		case 7
			set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  s e p t a n y")
		case 8
			set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  o c t a n y")
		case 15
			set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  p e n t a - d e k a n y")
		case 20
			set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  e i k o s a n y")
		case 35
			set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  t r i a k o n t a p e n t a n y")
		case 70
			set_text ($label_cps_setting," "& $cps_k__num_of_elem_in_combination & " ) " & $cps_n__generator_set_size & " " & "  h e n d o m e k o n t a n y")
	end select
end function

function recalculate_combination_product_set()
{$cps_n__generator_set_size := 4
$cps_k__num_of_elem_in_combination := 2}

{
	while ($cps_counter < num_elements(?cps_tuning_table_cents))
		?cps_tuning_table_cents[$cps_counter] := 0.0
	end while
	}
	
	{calculate products:}
	$cps_iteration_limit := 1
	$cps_counter := 0
	while ($cps_counter < $cps_n__generator_set_size)
		$cps_iteration_limit := $cps_iteration_limit * 2
		inc($cps_counter)
	end while
	$cps_combi_count := 0
	$cps_counter := 0
	while ($cps_counter < $cps_iteration_limit)
		$cps_condition := 0
		$cps_el_pointer := 0
		while ($cps_el_pointer < $cps_n__generator_set_size) {count  ones in binary}
			$cps_condition := $cps_condition + (sh_right($cps_counter, $cps_el_pointer) mod 2)
			inc($cps_el_pointer)
		end while
		if ($cps_condition = $cps_k__num_of_elem_in_combination) {counter corresponds in binary to positions of the elements which products are taken}
			{$cps_condition := 1}
			$cps_el_pointer := 0
			~cps_combination := 1.0
			while ($cps_el_pointer < $cps_n__generator_set_size)
				if (sh_right($cps_counter, $cps_el_pointer) mod 2 = 1)
					~cps_combination := ~cps_combination * ?cps_generators[$cps_el_pointer]
				end if
				inc($cps_el_pointer)
			end while
			?cps_product_table[$cps_combi_count] := ~cps_combination
			inc($cps_combi_count)
		end if
		inc($cps_counter)
	end while

	{update cps_identity}
	set_knob_label ($cps_identity, "    " & !cyfry_rzymskie[((($cps_identity mod $cps_combi_count)+1))] )

	{order products:}
	$cps_counter := 0
	while ($cps_counter < $cps_combi_count)
		{convert to cents}
			?cps_tuning_table_cents[$cps_counter] := 1200.0 * log(?cps_product_table[$cps_counter]) / log(2.0)
		inc($cps_counter)
	end while

	$cps_counter := 0
	while ($cps_counter < $cps_combi_count)
		{divide each product by an identity (one of the products)}
			?cps_tuning_table_cents[$cps_counter] := ?cps_tuning_table_cents[$cps_counter] - ?cps_tuning_table_cents[$cps_identity mod $cps_combi_count]
		inc($cps_counter)
	end while



	{reduce through the interval of equivalence}
	{
	$cps_counter := 0
	while ($cps_counter < $cps_combi_count)
			while (?cps_tuning_table_cents[$cps_counter] >= ~interval_of_equivalence)
				?cps_tuning_table_cents[$cps_counter] := ?cps_tuning_table_cents[$cps_counter] - ~interval_of_equivalence
			end while
			while (?cps_tuning_table_cents[$cps_counter] < 0.0)
				?cps_tuning_table_cents[$cps_counter] := ?cps_tuning_table_cents[$cps_counter] + ~interval_of_equivalence
			end while
		inc($cps_counter)
	end while
	}

	{octave reduction:}
	    select ($switch__reduce_by_octave)
	   		case 1
	   			~reduction_interval := 1200.0
	 	  	case 0
	 	  		~reduction_interval := ~interval_of_equivalence
	    end select
	    if (~reduction_interval = 0.0)
	    	~reduction_interval := 1200.0
	    end if
	    if ($switch__interval_reduction = 1 and ~interval_of_equivalence # 0.0)
	   		$counter1 := 0
			while ($counter1 < $cps_combi_count)
				select($switch__reduction_mode)
					case 0
						while ( ?cps_tuning_table_cents[$counter1] >= ~interval_of_equivalence )
							?cps_tuning_table_cents[$counter1] := ?cps_tuning_table_cents[$counter1] - ~reduction_interval
						end while
						while (?cps_tuning_table_cents[$counter1] < 0.0)
							?cps_tuning_table_cents[$counter1] := ?cps_tuning_table_cents[$counter1] + ~reduction_interval
						end while
					case 1
						while ( (?cps_tuning_table_cents[$counter1] > ~interval_of_equivalence) or (?cps_tuning_table_cents[$counter1] < 0.0) )
							if (?cps_tuning_table_cents[$counter1] < 0.0)
								?cps_tuning_table_cents[$counter1] := -1.0 * ?cps_tuning_table_cents[$counter1]
							end if
							if (?cps_tuning_table_cents[$counter1] = ~reduction_interval)
								?cps_tuning_table_cents[$counter1] := 0.0
							end if
							if ( ?cps_tuning_table_cents[$counter1] >= ~interval_of_equivalence )
								?cps_tuning_table_cents[$counter1] := ~reduction_interval - (?cps_tuning_table_cents[$counter1] - ~reduction_interval)
							end if
						end while
						
				end select
				inc($counter1)
			end while
	   end if

	{bubble sort}
	$cps_counter_2 := 0
	while ($cps_counter_2 < $cps_combi_count)
		$cps_counter := 1
		while ($cps_counter + $cps_counter_2 < $cps_combi_count) 
			if (?cps_tuning_table_cents[$cps_counter] < ?cps_tuning_table_cents[$cps_counter -1])
				~cps_combination := ?cps_tuning_table_cents[$cps_counter]
				?cps_tuning_table_cents[$cps_counter] := ?cps_tuning_table_cents[$cps_counter - 1]
				?cps_tuning_table_cents[$cps_counter - 1] := ~cps_combination
			end if
			inc($cps_counter)
		end while
		inc($cps_counter_2)
	end while
	
	?cps_tuning_table_cents[$cps_combi_count] := ~interval_of_equivalence

	{assign calculated cps to the tuning array}
	?cps_tuning_table_cents[$cps_combi_count] := ~interval_of_equivalence
	?tuning_table[0] := 0.0
	$cps_counter := 0
	while ($cps_counter <= $cps_combi_count)
		?tuning_table[$cps_counter] := ?cps_tuning_table_cents[$cps_counter]
		inc($cps_counter)
		wait(1)
	end while
	$number_of_pitch_classes := $cps_combi_count
end function

function func_display_correct_number_of_cps_generators()
				set_control_par(get_ui_id($knob_cps_generator_1),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				set_control_par(get_ui_id($knob_cps_generator_2),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				set_control_par(get_ui_id($knob_cps_generator_3),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				set_control_par(get_ui_id($knob_cps_generator_4),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				set_control_par(get_ui_id($knob_cps_generator_5),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
				set_control_par(get_ui_id($knob_cps_generator_6),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)

				if ($cps_n__generator_set_size >= 1)
					set_control_par(get_ui_id($knob_cps_generator_1),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				end if
				if ($cps_n__generator_set_size >= 2)
					set_control_par(get_ui_id($knob_cps_generator_2),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				end if
				if ($cps_n__generator_set_size >= 3)
					set_control_par(get_ui_id($knob_cps_generator_3),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				end if
				if ($cps_n__generator_set_size >= 4)
					set_control_par(get_ui_id($knob_cps_generator_4),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				end if
				if ($cps_n__generator_set_size >= 5)
					set_control_par(get_ui_id($knob_cps_generator_5),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				end if
				if ($cps_n__generator_set_size >= 6)
					set_control_par(get_ui_id($knob_cps_generator_6),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
				end if
end function

function onuicontrol__knob_cps_n__generator_set_size()
	$cps_n__generator_set_size := $knob_cps_n__generator_set_size
	if ($cps_n__generator_set_size < $cps_k__num_of_elem_in_combination)
		$cps_k__num_of_elem_in_combination := $cps_n__generator_set_size
		set_control_par(get_ui_id($knob_cps_k__num_of_elem_in_combination),$CONTROL_PAR_VALUE,$cps_k__num_of_elem_in_combination)
	end if
	call recalculate_combination_product_set
	call cps_panel_update_label
	call func_display_correct_number_of_cps_generators
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_cps_k__num_of_elem_in_combination()
	$cps_k__num_of_elem_in_combination := $knob_cps_k__num_of_elem_in_combination
	if ($cps_k__num_of_elem_in_combination > $cps_n__generator_set_size)
		$cps_n__generator_set_size := $cps_k__num_of_elem_in_combination
		set_control_par(get_ui_id($knob_cps_n__generator_set_size),$CONTROL_PAR_VALUE,$cps_n__generator_set_size)
	end if
	call recalculate_combination_product_set
	call cps_panel_update_label
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__cps_identity()
	set_knob_label ($cps_identity, "   " & (($cps_identity mod $cps_combi_count)+1) )
	call recalculate_combination_product_set
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_cps_generator_1()
	?cps_generators[0] := int_to_real($knob_cps_generator_1)
	call recalculate_combination_product_set
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_cps_generator_2()
	?cps_generators[1] := int_to_real($knob_cps_generator_2)
	call recalculate_combination_product_set
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_cps_generator_3()
	?cps_generators[2] := int_to_real($knob_cps_generator_3)
	call recalculate_combination_product_set
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_cps_generator_4()
	?cps_generators[3] := int_to_real($knob_cps_generator_4)
	call recalculate_combination_product_set
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_cps_generator_5()
	?cps_generators[4] := int_to_real($knob_cps_generator_5)
	call recalculate_combination_product_set
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob_cps_generator_6()
	?cps_generators[5] := int_to_real($knob_cps_generator_6)
	call recalculate_combination_product_set
	call recalculate_tuning_dependend_transposition_modules
end function



function recalculate_tuning_from_temperament_units()
	{1TU= 1/720th of pythagorean comma}
	$number_of_pitch_classes := 12
	~interval_of_equivalence := 1200.0
	?tuning_table[ 0 ] := 0.0
	$counter1 := 1
	while ($counter1 < $number_of_pitch_classes)
		?tuning_table[ ( 0 + ( $counter1 * 7 ) ) mod 12] := ?tuning_table[ ( 0 + ( ($counter1 - 1) * 7 ) ) mod 12] + (1200.0 * log(3.0/2.0)/log(2.0))
		if (?tuning_table[ ( 0 + ( $counter1 * 7 ) ) mod 12] >= ~interval_of_equivalence)
			?tuning_table[ ( 0 + ( $counter1 * 7 ) ) mod 12] := ?tuning_table[ ( 0 + ( $counter1 * 7 ) ) mod 12] - ~interval_of_equivalence
		end if
		inc($counter1)
	end while
	$counter1 := 1
	
	while ($counter1 < $number_of_pitch_classes)
		?tuning_table[ ( 0 + ( $counter1 * 7 ) ) mod 12] := ?tuning_table[ ( 0 + ( $counter1 * 7 ) ) mod 12] - (((int_to_real(%tuning_temperament_units[(4 + ($counter1-1)) mod 12]))/720.0) * 1200.0 * log( exp(12.0*log(3.0/2.0)) / exp(7.0*log(2.0)))/log(2.0))
		
		inc($counter1)
	end while
	
end function
function reevaluate_number_of_temperament_units()
	$counter1 := 0
	$temperament_units_sum := 0
	while ($counter1 < 12)
		$temperament_units_sum := $temperament_units_sum + %tuning_temperament_units[$counter1]
		inc($counter1)
	end while
	$counter1 := 1
	while ($temperament_units_sum > 720 and $counter1 <= 12)
		if ( %tuning_temperament_units[($last_touched_temperament_unit_uivalue + $counter1) mod 12] > 0 )
			dec(%tuning_temperament_units[($last_touched_temperament_unit_uivalue + $counter1) mod 12])
			dec($temperament_units_sum)
		else
			inc($counter1)
		end if
	end while
	$counter1 := 1
	while ($temperament_units_sum < 720 and $counter1 <= 12)
		if ( %tuning_temperament_units[($last_touched_temperament_unit_uivalue + $counter1) mod 12] < 720 )
			inc(%tuning_temperament_units[($last_touched_temperament_unit_uivalue + $counter1) mod 12])
			inc($temperament_units_sum)
		else
			inc($counter1)
		end if
	end while
	$counter1 := 0
	while ($counter1 < 12)
		set_control_par(%temperament_unit_uivalue_id[$counter1], $CONTROL_PAR_VALUE, %tuning_temperament_units[$counter1])
		inc($counter1)
	end while
end function
on ui_control ($gui_temperament_unit_1_fc)
	%tuning_temperament_units[0] := $gui_temperament_unit_1_fc
	$last_touched_temperament_unit_uivalue := 0
	call reevaluate_number_of_temperament_units
	call recalculate_tuning_from_temperament_units
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control ($gui_temperament_unit_2_cg)
	%tuning_temperament_units[1] := $gui_temperament_unit_2_cg
	$last_touched_temperament_unit_uivalue := 1
	call reevaluate_number_of_temperament_units
	call recalculate_tuning_from_temperament_units
	call recalculate_tuning_dependend_transposition_modules
end on	
on ui_control ($gui_temperament_unit_3_gd)
	%tuning_temperament_units[2] := $gui_temperament_unit_3_gd
	$last_touched_temperament_unit_uivalue := 2
	call reevaluate_number_of_temperament_units
	call recalculate_tuning_from_temperament_units
	call recalculate_tuning_dependend_transposition_modules
end on	
on ui_control ($gui_temperament_unit_4_da)
	%tuning_temperament_units[3] := $gui_temperament_unit_4_da
	$last_touched_temperament_unit_uivalue := 3
	call reevaluate_number_of_temperament_units
	call recalculate_tuning_from_temperament_units
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control ($gui_temperament_unit_5_ae)
	%tuning_temperament_units[4] := $gui_temperament_unit_5_ae
	$last_touched_temperament_unit_uivalue := 4
	call reevaluate_number_of_temperament_units
	call recalculate_tuning_from_temperament_units
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control ($gui_temperament_unit_6_eh)
	%tuning_temperament_units[5] := $gui_temperament_unit_6_eh
	$last_touched_temperament_unit_uivalue := 5
	call reevaluate_number_of_temperament_units
	call recalculate_tuning_from_temperament_units
	call recalculate_tuning_dependend_transposition_modules
end on	
on ui_control ($gui_temperament_unit_7_hfis)
	%tuning_temperament_units[6] := $gui_temperament_unit_7_hfis
	$last_touched_temperament_unit_uivalue := 6
	call reevaluate_number_of_temperament_units
	call recalculate_tuning_from_temperament_units
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control ($gui_temperament_unit_8_fiscis)
	%tuning_temperament_units[7] := $gui_temperament_unit_8_fiscis
	$last_touched_temperament_unit_uivalue := 7
	call reevaluate_number_of_temperament_units
	call recalculate_tuning_from_temperament_units
	call recalculate_tuning_dependend_transposition_modules
end on	
on ui_control ($gui_temperament_unit_9_cisgis)
	%tuning_temperament_units[8] := $gui_temperament_unit_9_cisgis
	$last_touched_temperament_unit_uivalue := 8
	call reevaluate_number_of_temperament_units
	call recalculate_tuning_from_temperament_units
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control ($gui_temperament_unit_10_ases)
	%tuning_temperament_units[9] := $gui_temperament_unit_10_ases
	$last_touched_temperament_unit_uivalue := 9
	call reevaluate_number_of_temperament_units
	call recalculate_tuning_from_temperament_units
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control ($gui_temperament_unit_11_esb)
	%tuning_temperament_units[10] := $gui_temperament_unit_11_esb
	$last_touched_temperament_unit_uivalue := 10
	call reevaluate_number_of_temperament_units
	call recalculate_tuning_from_temperament_units
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control ($gui_temperament_unit_12_bf)
	%tuning_temperament_units[11] := $gui_temperament_unit_12_bf
	$last_touched_temperament_unit_uivalue := 11
	call reevaluate_number_of_temperament_units
	call recalculate_tuning_from_temperament_units
	call recalculate_tuning_dependend_transposition_modules
end on












function onuicontrol__knob__script_min()
	$script_min := $knob__script_min
end function
function onuicontrol__knob__script_max()
	$script_max := $knob__script_max
end function




{JI RATIOS 800}
function recalculate_tuning_from_ji_ratios()
	$counter1 := 0
	while ($counter1 < $number_of_pitch_classes-1)
		?tuning_table[$counter1+1] := 1200.0*log(int_to_real(%ji_ratio_numerators[$counter1])/int_to_real(%ji_ratio_denominators[$counter1]))/log(2.0)
		inc($counter1)
	end while

	if ($switch__stacking_method = 1)
		$counter1 := 1
		while ($counter1 < $knob__number_of_pitch_classes__jiknobs)
			?tuning_table[$counter1] := ?tuning_table[$counter1] + ?tuning_table[$counter1 - 1]
			inc($counter1)
		end while
	end if

	   {octave reduction:}
	    select ($switch__reduce_by_octave)
	   		case 1
	   			~reduction_interval := 1200.0
	 	  	case 0
	 	  		~reduction_interval := ~interval_of_equivalence
	    end select
	    if (~reduction_interval = 0.0)
	    	~reduction_interval := 1200.0
	    end if
	    if ($switch__interval_reduction = 1 and ~interval_of_equivalence # 0.0)
	   		$counter1 := 0
			while ($counter1 < $knob__number_of_pitch_classes__tune_by_ji_ratios_precise)
				select($switch__reduction_mode)
					case 0
						while ( ?tuning_table[$counter1] >= ~interval_of_equivalence )
							?tuning_table[$counter1] := ?tuning_table[$counter1] - ~reduction_interval
						end while
						while (?tuning_table[$counter1] < 0.0)
							?tuning_table[$counter1] := ?tuning_table[$counter1] + ~reduction_interval
						end while
					case 1
						while ( (?tuning_table[$counter1] > ~interval_of_equivalence) or (?tuning_table[$counter1] < 0.0) )
							if (?tuning_table[$counter1] < 0.0)
								?tuning_table[$counter1] := -1.0 * ?tuning_table[$counter1]
							end if
							if (?tuning_table[$counter1] = ~reduction_interval)
								?tuning_table[$counter1] := 0.0
							end if
							if ( ?tuning_table[$counter1] >= ~interval_of_equivalence )
								?tuning_table[$counter1] := ~reduction_interval - (?tuning_table[$counter1] - ~reduction_interval)
							end if
						end while
						
				end select
				inc($counter1)
			end while
	   end if
	$number_of_pitch_classes := $knob__number_of_pitch_classes__tune_by_ji_ratios_precise
	?tuning_table[$number_of_pitch_classes] := ~interval_of_equivalence
end function


function func_stylise_gui_ji_ratio_displays
				$counter1 := 0
				while ($counter1 < $panel__tune_by_ji_ratios_precise__num_of_uivalues)
					set_control_par(%tune_by_ji_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_BG)
					set_control_par(%tune_by_ji_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_SHOW_ARROWS,0)
					set_control_par(%tune_by_ji_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_BG)
					set_control_par(%tune_by_ji_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_SHOW_ARROWS,0)
					inc($counter1)
				end while
end function

function update_ji_ratio_visibility()
				$counter1 := 0
				while (($panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter) + $counter1 < $knob__number_of_pitch_classes__tune_by_ji_ratios_precise and $counter1 < $panel__tune_by_exponent_ratios__num_of_uivalues)
					set_control_par(%tune_by_ji_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par(%tune_by_ji_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					inc($counter1)
				end while

				while ($counter1 <  $panel__tune_by_exponent_ratios__num_of_uivalues)
					set_control_par(%tune_by_ji_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					set_control_par(%tune_by_ji_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					inc($counter1)
				end while
end function

function update_ji_ratio_tuning_values()
	$counter1 := 0
	while ($counter1 < $panel__tune_by_ji_ratios_precise__num_of_uivalues)
			set_control_par(%tune_by_ji_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_VALUE, %ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter + $counter1])
			set_control_par(%tune_by_ji_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_VALUE, %ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter + $counter1])
			inc($counter1)
	end while
end function

function update_ji_ratio_navigation_buttons()
	if ($panel__tune_by_ji_ratios_precise__navigation_counter # 0)
		set_control_par(get_ui_id($panel__tune_by_ji_ratios_precise__navigate_left),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	else
		set_control_par(get_ui_id($panel__tune_by_ji_ratios_precise__navigate_left),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	end if
	
	if ($number_of_pitch_classes > $panel__tune_by_ji_ratios_precise__num_of_uivalues*($panel__tune_by_ji_ratios_precise__navigation_counter+1))
		set_control_par(get_ui_id($panel__tune_by_ji_ratios_precise__navigate_right),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	else
		set_control_par(get_ui_id($panel__tune_by_ji_ratios_precise__navigate_right),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	end if
end function

function update_ji_ratio_table_gui()
	while ($number_of_pitch_classes <= $panel__tune_by_ji_ratios_precise__navigation_counter * $panel__tune_by_ji_ratios_precise__num_of_uivalues)
		dec($panel__tune_by_ji_ratios_precise__navigation_counter)
	end while
	if ($panel__tune_by_ji_ratios_precise__navigation_counter * $panel__tune_by_ji_ratios_precise__num_of_uivalues > $number_of_pitch_classes or $panel__tune_by_ji_ratios_precise__navigation_counter < 0)
		$panel__tune_by_ji_ratios_precise__navigation_counter := 0
	end if

	{......from v32}
	call update_ji_ratio_navigation_buttons
	call update_ji_ratio_tuning_values
	call update_ji_ratio_visibility
end function

function onuicontrol__knob__number_of_pitch_classes__tune_by_ji_ratios_precise()
	$number_of_pitch_classes := $knob__number_of_pitch_classes__tune_by_ji_ratios_precise
	call update_ji_ratio_table_gui
	call recalculate_tuning_dependend_transposition_modules
end function

function onuicontrol__panel__tune_by_ji_ratios_precise__navigate_left()
	$panel__tune_by_ji_ratios_precise__navigate_left := 0
	dec($panel__tune_by_ji_ratios_precise__navigation_counter)
	if ($panel__tune_by_ji_ratios_precise__navigation_counter < 0)
		$panel__tune_by_ji_ratios_precise__navigation_counter := 0
	end if
	call update_ji_ratio_table_gui
end function

function onuicontrol__panel__tune_by_ji_ratios_precise__navigate_right()
	$panel__tune_by_ji_ratios_precise__navigate_right := 0
	if ($number_of_pitch_classes > ($panel__tune_by_ji_ratios_precise__navigation_counter+1)*$panel__tune_by_exponent_ratios__num_of_uivalues)
		inc($panel__tune_by_ji_ratios_precise__navigation_counter)
	end if
	call update_ji_ratio_table_gui
end function

on ui_control($gui_ji_ratio1_numerator)
	%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+0] := $gui_ji_ratio1_numerator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+0] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+0])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+0]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio1_denominator)
	%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+0] := $gui_ji_ratio1_denominator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+0] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+0])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+0]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio2_numerator)
	%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+1] := $gui_ji_ratio2_numerator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+1] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+1])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+1]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio2_denominator)
	%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+1] := $gui_ji_ratio2_denominator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+1] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+1])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+1]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio3_numerator)
	%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+2] := $gui_ji_ratio3_numerator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+2] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+2])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+2]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio3_denominator)
	%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+2] := $gui_ji_ratio3_denominator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+2] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+2])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+2]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio4_numerator)
	%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+3] := $gui_ji_ratio4_numerator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+3] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+3])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+3]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio4_denominator)
	%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+3] := $gui_ji_ratio4_denominator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+3] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+3])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+3]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio5_numerator)
	%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+4] := $gui_ji_ratio5_numerator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+4] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+4])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+4]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio5_denominator)
	%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+4] := $gui_ji_ratio5_denominator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+4] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+4])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+4]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio6_numerator)
	%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+5] := $gui_ji_ratio6_numerator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+5] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+5])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+5]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio6_denominator)
	%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+5] := $gui_ji_ratio6_denominator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+5] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+5])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+5]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio7_numerator)
	%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+6] := $gui_ji_ratio7_numerator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+6] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+6])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+6]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio7_denominator)
	%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+6] := $gui_ji_ratio7_denominator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+6] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+6])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+6]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio8_numerator)
	%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+7] := $gui_ji_ratio8_numerator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+7] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+7])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+7]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio8_denominator)
	%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+7] := $gui_ji_ratio8_denominator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+7] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+7])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+7]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio9_numerator)
	%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+8] := $gui_ji_ratio9_numerator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+8] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+8])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+8]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio9_denominator)
	%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+8] := $gui_ji_ratio9_denominator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+8] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+8])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+8]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio10_numerator)
	%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+9] := $gui_ji_ratio10_numerator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+9] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+9])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+9]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio10_denominator)
	%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+9] := $gui_ji_ratio10_denominator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+9] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+9])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+9]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio11_numerator)
	%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+10] := $gui_ji_ratio11_numerator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+10] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+10])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+10]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio11_denominator)
	%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+10] := $gui_ji_ratio11_denominator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+10] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+10])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+10]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio12_numerator)
	%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+11] := $gui_ji_ratio12_numerator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+11] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+11])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+11]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_ji_ratio12_denominator)
	%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+11] := $gui_ji_ratio12_denominator
	?tuning_table[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+11] := 1200.0*log(int_to_real(%ji_ratio_numerators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+11])/int_to_real(%ji_ratio_denominators[$panel__tune_by_ji_ratios_precise__num_of_uivalues*$panel__tune_by_ji_ratios_precise__navigation_counter+11]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on









function recalculate_tuning_from_exponent_ratios()
	$counter1 := 0
	while ($counter1 < $knob__number_of_pitch_classes__tune_by_exp_ratios)
		?tuning_table[$counter1+1] := 1200.0*log(int_to_real(%exponent_ratio_numerators[$counter1])/int_to_real(%exponent_ratio_denominators[$counter1]))/log(2.0)
		inc($counter1)
	end while
	?tuning_table[$knob__number_of_pitch_classes__tune_by_exp_ratios] := ~interval_of_equivalence

	if ($switch__stacking_method = 1)
		$counter1 := 1
		while ($counter1 < $knob__number_of_pitch_classes__tune_by_exp_ratios)
			?tuning_table[$counter1] := ?tuning_table[$counter1] + ?tuning_table[$counter1 - 1]
			inc($counter1)
		end while
	end if
	
	   {octave reduction:}
	    select ($switch__reduce_by_octave)
	   		case 1
	   			~reduction_interval := 1200.0
	 	  	case 0
	 	  		~reduction_interval := ~interval_of_equivalence
	    end select
	    if (~reduction_interval = 0.0)
	    	~reduction_interval := 1200.0
	    end if
	    if ($switch__interval_reduction = 1 and ~interval_of_equivalence # 0.0)
	   		$counter1 := 0
			while ($counter1 < $knob__number_of_pitch_classes__tune_by_exp_ratios)
				select($switch__reduction_mode)
					case 0
						while ( ?tuning_table[$counter1] >= ~interval_of_equivalence )
							?tuning_table[$counter1] := ?tuning_table[$counter1] - ~reduction_interval
						end while
						while (?tuning_table[$counter1] < 0.0)
							?tuning_table[$counter1] := ?tuning_table[$counter1] + ~reduction_interval
						end while
					case 1
						while ( (?tuning_table[$counter1] > ~interval_of_equivalence) or (?tuning_table[$counter1] < 0.0) )
							if (?tuning_table[$counter1] < 0.0)
								?tuning_table[$counter1] := -1.0 * ?tuning_table[$counter1]
							end if
							if (?tuning_table[$counter1] = ~reduction_interval)
								?tuning_table[$counter1] := 0.0
							end if
							if ( ?tuning_table[$counter1] >= ~interval_of_equivalence )
								?tuning_table[$counter1] := ~reduction_interval - (?tuning_table[$counter1] - ~reduction_interval)
							end if
						end while
						
				end select
				inc($counter1)
			end while
	   end if


	$number_of_pitch_classes := $knob__number_of_pitch_classes__tune_by_exp_ratios
end function

function func_stylise_gui_exponent_ratio_displays
				$counter1 := 0
				while ($counter1 < 12)
					set_control_par(%tune_by_exponent_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_BG)
					set_control_par(%tune_by_exponent_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_SHOW_ARROWS,0)
					set_control_par(%tune_by_exponent_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_BG)
					set_control_par(%tune_by_exponent_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_SHOW_ARROWS,0)
					inc($counter1)
				end while
end function

function update_exponent_ratio_visibility()
			
				$counter1 := 0
				while (($panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter) + $counter1 < $number_of_pitch_classes and $counter1 < $panel__tune_by_exponent_ratios__num_of_uivalues)
					set_control_par(%tune_by_exponent_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par(%tune_by_exponent_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					inc($counter1)
				end while

				while ($counter1 <  $panel__tune_by_exponent_ratios__num_of_uivalues)
					set_control_par(%tune_by_exponent_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					set_control_par(%tune_by_exponent_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					inc($counter1)
				end while


end function

function update_exponent_ratio_tuning_values()
	$counter1 := 0
	while ($counter1 < $panel__tune_by_exponent_ratios__num_of_uivalues)
			set_control_par(%tune_by_exponent_ratios__ui_numerator_id[$counter1],$CONTROL_PAR_VALUE, %exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter + $counter1])
			set_control_par(%tune_by_exponent_ratios__ui_denominator_id[$counter1],$CONTROL_PAR_VALUE, %exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter + $counter1])
			inc($counter1)
	end while
end function

function update_exponent_ratio_navigation_buttons()
	if ($panel__tune_by_exponent_ratios__navigation_counter # 0)
		set_control_par(get_ui_id($panel__tune_by_exponent_ratios__navigate_left),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	else
		set_control_par(get_ui_id($panel__tune_by_exponent_ratios__navigate_left),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	end if
	
	if ($knob__number_of_pitch_classes__tune_by_exp_ratios > $panel__tune_by_exponent_ratios__num_of_uivalues*($panel__tune_by_exponent_ratios__navigation_counter+1))
		set_control_par(get_ui_id($panel__tune_by_exponent_ratios__navigate_right),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	else
		set_control_par(get_ui_id($panel__tune_by_exponent_ratios__navigate_right),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	end if
end function

function update_exponent_ratio_label()
{ASDF}
		if ($knob__number_of_pitch_classes__tune_by_exp_ratios mod $panel__tune_by_exponent_ratios__num_of_uivalues = 0 or $knob__number_of_pitch_classes__tune_by_exp_ratios > ($panel__tune_by_exponent_ratios__navigation_counter+1)*$panel__tune_by_exponent_ratios__num_of_uivalues)
			set_text ($label_exponent_ratios_table,"Numerators and denominators of steps " & ($panel__tune_by_exponent_ratios__navigation_counter*$panel__tune_by_exponent_ratios__num_of_uivalues)+1 & " to " & ($panel__tune_by_exponent_ratios__navigation_counter*$panel__tune_by_exponent_ratios__num_of_uivalues)+$panel__tune_by_exponent_ratios__num_of_uivalues & ":")
		else
			if ($knob__number_of_pitch_classes__tune_by_exp_ratios-($panel__tune_by_exponent_ratios__navigation_counter*$panel__tune_by_exponent_ratios__num_of_uivalues) = 2)
				set_text ($label_exponent_ratios_table,"Numerators and denominators of steps " & ($panel__tune_by_exponent_ratios__navigation_counter*12)+1 & " & " & ($panel__tune_by_exponent_ratios__navigation_counter*$panel__tune_by_exponent_ratios__num_of_uivalues)+2 & ":")
			else
				if ($knob__number_of_pitch_classes__tune_by_exp_ratios = 1)
					set_text ($label_exponent_ratios_table," e q u a l - s t e p   t u n i n g")
				else
					if ($knob__number_of_pitch_classes__tune_by_exp_ratios-($panel__tune_by_exponent_ratios__navigation_counter*$panel__tune_by_exponent_ratios__num_of_uivalues) = 1)
						set_text ($label_exponent_ratios_table,"Numerator and denominator of step " & ($panel__tune_by_exponent_ratios__navigation_counter*$panel__tune_by_exponent_ratios__num_of_uivalues)+1 & ":")
					else
						set_text ($label_exponent_ratios_table,"Numerators and denominators of steps " & ($panel__tune_by_exponent_ratios__navigation_counter*$panel__tune_by_exponent_ratios__num_of_uivalues)+1 & " to " & $knob__number_of_pitch_classes__tune_by_exp_ratios & ":")
					end if
				end if
			end if
		end if
end function

function update_exponent_ratio_table_gui()
	while ($knob__number_of_pitch_classes__tune_by_exp_ratios <= $panel__tune_by_exponent_ratios__navigation_counter * 12)
		dec($panel__tune_by_exponent_ratios__navigation_counter)
	end while
	if ($panel__tune_by_exponent_ratios__navigation_counter * $panel__tune_by_exponent_ratios__num_of_uivalues > $knob__number_of_pitch_classes__tune_by_exp_ratios or $panel__tune_by_exponent_ratios__navigation_counter < 0)
		$panel__tune_by_exponent_ratios__navigation_counter := 0
	end if

	{......from v32}
	call update_exponent_ratio_label
	call update_exponent_ratio_navigation_buttons
	call update_exponent_ratio_tuning_values
	call update_exponent_ratio_visibility
end function

function onuicontrol__knob__number_of_pitch_classes__tune_by_exp_ratios()
	$number_of_pitch_classes := $knob__number_of_pitch_classes__tune_by_exp_ratios
	call update_exponent_ratio_table_gui
	call recalculate_tuning_dependend_transposition_modules
end function

function onuicontrol__panel__tune_by_exponent_ratios__navigate_left()
	$panel__tune_by_exponent_ratios__navigate_left := 0
	dec($panel__tune_by_exponent_ratios__navigation_counter)
	if ($panel__tune_by_exponent_ratios__navigation_counter < 0)
		$panel__tune_by_exponent_ratios__navigation_counter := 0
	end if
	call update_exponent_ratio_table_gui
end function

function onuicontrol__panel__tune_by_exponent_ratios__navigate_right()
	$panel__tune_by_exponent_ratios__navigate_right := 0
	if ($number_of_pitch_classes > ($panel__tune_by_exponent_ratios__navigation_counter+1)*12)
		inc($panel__tune_by_exponent_ratios__navigation_counter)
	end if
	call update_exponent_ratio_table_gui
end function

on ui_control($gui_exponent_ratio1_numerator)
	%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+0] := $gui_exponent_ratio1_numerator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+0] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+0]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+0])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio1_denominator)
	%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+0] := $gui_exponent_ratio1_denominator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+0] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+0]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+0])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio2_numerator)
	%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+1] := $gui_exponent_ratio2_numerator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+1] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+1]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+1])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio2_denominator)
	%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+1] := $gui_exponent_ratio2_denominator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+1] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+1]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+1])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio3_numerator)
	%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+2] := $gui_exponent_ratio3_numerator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+2] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+2]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+2])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio3_denominator)
	%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+2] := $gui_exponent_ratio3_denominator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+2] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+2]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+2])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio4_numerator)
	%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+3] := $gui_exponent_ratio4_numerator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+3] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+3]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+3])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio4_denominator)
	%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+3] := $gui_exponent_ratio4_denominator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+3] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+3]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+3])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio5_numerator)
	%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+4] := $gui_exponent_ratio5_numerator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+4] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+4]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+4])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio5_denominator)
	%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+4] := $gui_exponent_ratio5_denominator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+4] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+4]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+4])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio6_numerator)
	%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+5] := $gui_exponent_ratio6_numerator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+5] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+5]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+5])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio6_denominator)
	%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+5] := $gui_exponent_ratio6_denominator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+5] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+5]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+5])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio7_numerator)
	%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+6] := $gui_exponent_ratio7_numerator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+6] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+6]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+6])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio7_denominator)
	%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+6] := $gui_exponent_ratio7_denominator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+6] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+6]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+6])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio8_numerator)
	%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+7] := $gui_exponent_ratio8_numerator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+7] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+7]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+7])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio8_denominator)
	%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+7] := $gui_exponent_ratio8_denominator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+7] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+7]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+7])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio9_numerator)
	%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+8] := $gui_exponent_ratio9_numerator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+8] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+8]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+8])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio9_denominator)
	%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+8] := $gui_exponent_ratio9_denominator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+8] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+8]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+8])
end on
on ui_control($gui_exponent_ratio10_numerator)
	%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+9] := $gui_exponent_ratio1_numerator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+9] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+9]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+9])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio10_denominator)
	%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+9] := $gui_exponent_ratio10_denominator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+9] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+9]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+9])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio11_numerator)
	%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+10] := $gui_exponent_ratio11_numerator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+10] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+10]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+10])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio11_denominator)
	%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+10] := $gui_exponent_ratio11_denominator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+10] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+10]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+10])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio12_numerator)
	%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+11] := $gui_exponent_ratio12_numerator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+11] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+11]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+11])
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_exponent_ratio12_denominator)
	%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+11] := $gui_exponent_ratio12_denominator
	?tuning_table[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+11] := ~interval_of_equivalence * int_to_real(%exponent_ratio_numerators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+11]) / int_to_real(%exponent_ratio_denominators[$panel__tune_by_exponent_ratios__num_of_uivalues*$panel__tune_by_exponent_ratios__navigation_counter+11])
	call recalculate_tuning_dependend_transposition_modules
end on





{Hertz ratios - freqratio paradigm menu 1935}

	function recalculate_tuning_from_freq_ratios()
		while ($counter1 < $knob__number_of_pitch_classes__freqratio-1)
			?tuning_table[$counter1] := 1200.0*log(int_to_real(%panel_freqratio__milihertz_array_numerators[$counter1])/int_to_real(%panel_freqratio__milihertz_array_denominators[$counter1]))/log(2.0)
			inc($counter1)
		end while
		?tuning_table[$knob__number_of_pitch_classes__freqratio] := ~interval_of_equivalence
		$number_of_pitch_classes := $knob__number_of_pitch_classes__freqratio
	end function


	function func_stylise_gui_freqratio_displays
		$counter1 := 0
		while ($counter1 < $panel__freqratio__num_of_ui_values)
			set_control_par(%freqratio__uivalue_numerators_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_BG)
			set_control_par(%freqratio__uivalue_numerators_id[$counter1],$CONTROL_PAR_SHOW_ARROWS,0)
			set_control_par(%freqratio__uivalue_denominators_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_BG)
			set_control_par(%freqratio__uivalue_denominators_id[$counter1],$CONTROL_PAR_SHOW_ARROWS,0)
			inc($counter1)
		end while
	end function

	function update_freqratio_visibility()
		$counter1 := 0
		while (($panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter) + $counter1 < $knob__number_of_pitch_classes__freqratio and $counter1 < $panel__freqratio__num_of_ui_values)
			set_control_par(%freqratio__uivalue_numerators_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			set_control_par(%freqratio__uivalue_denominators_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
			inc($counter1)
		end while

		while ($counter1 <  $panel__freqratio__num_of_ui_values)
			set_control_par(%freqratio__uivalue_numerators_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			set_control_par(%freqratio__uivalue_denominators_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
			inc($counter1)
		end while
	end function

	function update_freqratio_tuning_uivalues()
		$counter1 := 0
		while ($counter1 < $panel__freqratio__num_of_ui_values)
				set_control_par(%freqratio__uivalue_numerators_id[$counter1],$CONTROL_PAR_VALUE, %panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter + $counter1])
				set_control_par(%freqratio__uivalue_denominators_id[$counter1],$CONTROL_PAR_VALUE, %panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter + $counter1])
				inc($counter1)
		end while
	end function

	function update_freqratio_navigation_buttons()
		if ($panel__freqratio__navigation_counter # 0)
			set_control_par(get_ui_id($panel__freqratio__navigate_left),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		else
			set_control_par(get_ui_id($panel__freqratio__navigate_left),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		end if
		
		if ($knob__number_of_pitch_classes__freqratio > $panel__freqratio__num_of_ui_values*($panel__freqratio__navigation_counter+1))
			set_control_par(get_ui_id($panel__freqratio__navigate_right),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
		else
			set_control_par(get_ui_id($panel__freqratio__navigate_right),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
		end if
	end function

	function update_freqratio_table_gui()
		while ($knob__number_of_pitch_classes__freqratio <= $panel__freqratio__navigation_counter * $panel__freqratio__num_of_ui_values)
			dec($panel__freqratio__navigation_counter)
		end while
		if ($panel__freqratio__navigation_counter * $panel__freqratio__num_of_ui_values > $knob__number_of_pitch_classes__freqratio or $panel__freqratio__navigation_counter < 0)
			$panel__freqratio__navigation_counter := 0
		end if

		{......from v32}
		call update_freqratio_navigation_buttons
		call update_freqratio_tuning_uivalues
		call update_freqratio_visibility
	end function

function onuicontrol__knob__number_of_pitch_classes__freqratio()
	$knob__number_of_pitch_classes__freqratio := $knob__number_of_pitch_classes__freqratio
	call update_freqratio_table_gui
	call recalculate_tuning_from_freq_ratios
	call recalculate_tuning_dependend_transposition_modules
end function

function onuicontrol__panel__freqratio__navigate_left()
	$panel__freqratio__navigate_left := 0
	dec($panel__freqratio__navigation_counter)
	if ($panel__freqratio__navigation_counter < 0)
		$panel__freqratio__navigation_counter := 0
	end if
	call update_freqratio_table_gui
end function

function onuicontrol__panel__freqratio__navigate_right()
	$panel__freqratio__navigate_right := 0
	if ($knob__number_of_pitch_classes__freqratio > ($panel__freqratio__navigation_counter+1)*$panel__freqratio__num_of_ui_values)
		inc($panel__freqratio__navigation_counter)
	end if
	call update_freqratio_table_gui
end function

on ui_control($gui_miliherz_value_1_numerator)
	%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+0] := $gui_miliherz_value_1_numerator
	?tuning_table[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+0] := 1200.0*log(int_to_real(%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+0])/int_to_real(%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+0]))/log(2.0)
end on
on ui_control($gui_miliherz_value_1_denominator)
	%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+0] := $gui_miliherz_value_1_denominator
	?tuning_table[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+0] := 1200.0*log(int_to_real(%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+0])/int_to_real(%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+0]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_miliherz_value_2_numerator)
	%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+1] := $gui_miliherz_value_2_numerator
	?tuning_table[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+1] := 1200.0*log(int_to_real(%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+1])/int_to_real(%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+1]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_miliherz_value_2_denominator)
	%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+1] := $gui_miliherz_value_2_denominator
	?tuning_table[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+1] := 1200.0*log(int_to_real(%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+1])/int_to_real(%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+1]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_miliherz_value_3_numerator)
	%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+2] := $gui_miliherz_value_3_numerator
	?tuning_table[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+2] := 1200.0*log(int_to_real(%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+2])/int_to_real(%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+2]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_miliherz_value_3_denominator)
	%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+2] := $gui_miliherz_value_3_denominator
	?tuning_table[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+2] := 1200.0*log(int_to_real(%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+2])/int_to_real(%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+2]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_miliherz_value_4_numerator)
	%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+3] := $gui_miliherz_value_4_numerator
	?tuning_table[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+3] := 1200.0*log(int_to_real(%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+3])/int_to_real(%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+3]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_miliherz_value_4_denominator)
	%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+3] := $gui_miliherz_value_4_denominator
	?tuning_table[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+3] := 1200.0*log(int_to_real(%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+3])/int_to_real(%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+3]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_miliherz_value_5_numerator)
	%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+4] := $gui_miliherz_value_5_numerator
	?tuning_table[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+4] := 1200.0*log(int_to_real(%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+4])/int_to_real(%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+4]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_miliherz_value_5_denominator)
	%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+4] := $gui_miliherz_value_5_denominator
	?tuning_table[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+4] := 1200.0*log(int_to_real(%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+4])/int_to_real(%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+4]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_miliherz_value_6_numerator)
	%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+5] := $gui_miliherz_value_6_numerator
	?tuning_table[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+5] := 1200.0*log(int_to_real(%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+5])/int_to_real(%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+5]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_miliherz_value_6_denominator)
	%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+5] := $gui_miliherz_value_6_denominator
	?tuning_table[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+5] := 1200.0*log(int_to_real(%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+5])/int_to_real(%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+5]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_miliherz_value_7_numerator)
	%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+6] := $gui_miliherz_value_7_numerator
	?tuning_table[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+6] := 1200.0*log(int_to_real(%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+6])/int_to_real(%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+6]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on
on ui_control($gui_miliherz_value_7_denominator)
	%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+6] := $gui_miliherz_value_7_denominator
	?tuning_table[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+6] := 1200.0*log(int_to_real(%panel_freqratio__milihertz_array_numerators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+6])/int_to_real(%panel_freqratio__milihertz_array_denominators[$panel__freqratio__num_of_ui_values*$panel__freqratio__navigation_counter+6]))/log(2.0)
	call recalculate_tuning_dependend_transposition_modules
end on





function update_zalewski_qnz_label()
	if ($knob__zalewski_qnz_order = 1)
		set_text ($label_zalewski_qnz_ctrls," q  ( n , z )")
	else
		set_text ($label_zalewski_qnz_ctrls," q  ( n , z )  =  " & $knob__zalewski_qnz_order-1 & "s " & floor(100.0*~qnz_small_step_cents)/100.0 & "c  1L " & floor(100.0*~qnz_large_step_cents)/100.0 & "c")
	end if
end function
function recalculate_zalewski_qnz()
	~__f1_ := int_to_real(1 * $knob__zalewski_qnz_deformation_denominator - $knob__zalewski_qnz_deformation_numerator) / int_to_real($knob__zalewski_qnz_order*$knob__zalewski_qnz_deformation_denominator)
	~qnz_small_step_cents := 1200.0 * log ( pow ( pow ( 2.0, ~zalewski_qnz__interval_of_equivalence/1200.0 ) , ~__f1_ ) ) / log(2.0)
	~qnz_large_step_cents := ~zalewski_qnz__interval_of_equivalence-(~qnz_small_step_cents*int_to_real($knob__zalewski_qnz_order-1))
	$counter1 := 1
	while ($counter1 < $knob__zalewski_qnz_order-1)
		?tuning_table[$counter1] := ~qnz_small_step_cents * int_to_real($counter1)
		inc($counter1)
	end while
	?tuning_table[$counter1] := ?tuning_table[$counter1-1] + ~qnz_large_step_cents
	$number_of_pitch_classes := $knob__zalewski_qnz_order
	call update_zalewski_qnz_label
end function
function onuicontrol__knob__zalewski_qnz_deformation_numerator()
	call recalculate_zalewski_qnz
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob__zalewski_qnz_deformation_denominator()
	call recalculate_zalewski_qnz
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob__zalewski_qnz_order()
	call recalculate_zalewski_qnz
	call recalculate_tuning_dependend_transposition_modules
end function



{gui Zalewski's structures}
function display_zalewskis_structure_in_cents()
	@zalewskis_structure__cent_string := " "
	$counter1 := 0
	while ($counter1 < $zalewski_rzad and $counter1 < 8)
		@zalewskis_structure__cent_string := @zalewskis_structure__cent_string & round(?tuning_table[$counter1]*100.0)/100.0 & "c "
		inc($counter1)
	end while
		set_text ($label_zalewski__tuning_display, @zalewskis_structure__cent_string)
end function

function recalculate_zalewskis_harmonic_structure()

	~zalewski_suma_czastkowa := 0.0
	~zalewski_produkt_czastkowy := 0.0
	~zalewski_liczba_w_pamieci := 0.0
	$zalewski_rzad := 0
	$zalewski_warunek := 0
	$zalewski_sgn := 1
	~zalewski_iloczyn := 0.0
	~zalewski_iloraz := 0.0
	~zalewski_suma := 0.0
	~zalewski_roznica := 0.0
	~zalewski_zasada := 0.0


	{init stack register:}
	$counter1 := 0
	while ($counter1 < $zalewski_max_stack_length)
		?zalewski_number_stack[$counter1] := 0.0
		%zalewski_operator_stack[$counter1] := 0
		inc($counter1)
	end while

	$zalewski_rzad := 0
	$zalewski_number_stack_length := 0
	$zalewski_operator_stack_length := 0
	$zalewski_operational_index := 0
	$zalewski_operational_index_reading_offset := 0
	while ($zalewski_operational_index < $zalewski_max_stack_length)
		select (%zalewski_script[$zalewski_operational_index])
			{select operators:}
			case 42{ "*"}
				%zalewski_operator_stack[$zalewski_operator_stack_length] := %zalewski_script[$zalewski_operational_index]
				inc($zalewski_operator_stack_length)
			case 43 { "+"}
				%zalewski_operator_stack[$zalewski_operator_stack_length] := %zalewski_script[$zalewski_operational_index]
				inc($zalewski_operator_stack_length)
			case 45 { "-" aka add (-1)*}
				%zalewski_operator_stack[$zalewski_operator_stack_length] := 43 {"+"}
				inc($zalewski_operator_stack_length)
				%zalewski_operator_stack[$zalewski_operator_stack_length] := 42 {"*"}
				?zalewski_number_stack[$zalewski_number_stack_length] := -1.0
				inc($zalewski_number_stack_length)
			case 47 { "/"}
				%zalewski_operator_stack[$zalewski_operator_stack_length] := %zalewski_script[$zalewski_operational_index]
				inc($zalewski_operator_stack_length)
			{select numbers:}
			case 46 { "."}
				$zalewski_wartosc_po_przecinku := 1
				$counter1 := 1
				while (in_range(%zalewski_script[$zalewski_operational_index+$counter1],48,57))
					?zalewski_number_stack[$zalewski_number_stack_length-1] := ?zalewski_number_stack[$zalewski_number_stack_length-1] + pow (10.0,-int_to_real($counter1)) * int_to_real(%zalewski_script[$zalewski_operational_index]-48)
					inc ($counter1)
				end while
				$zalewski_operational_index := $zalewski_operational_index + $counter1 - 1
			case 48 to 57 {"0-9"}
				?zalewski_number_stack[$zalewski_number_stack_length] := int_to_real(%zalewski_script[$zalewski_operational_index]-48)
				$counter1 := 1
				$zalewski_warunek := 1
				while ($zalewski_warunek = 1)
					if (in_range(%zalewski_script[$zalewski_operational_index + $counter1],48,57))
						?zalewski_number_stack[$zalewski_number_stack_length] := ?zalewski_number_stack[$zalewski_number_stack_length] * 10.0 + int_to_real(%zalewski_script[$zalewski_operational_index+$counter1]-48)
						inc ($counter1)
					else
						$zalewski_warunek := 0
					end if
				end while
				$zalewski_operational_index := $zalewski_operational_index + $counter1 - 1
				inc($zalewski_number_stack_length)
			case 36{ "$"}
				?zalewski_number_stack[$zalewski_number_stack_length] := int_to_real($knob__zalewski__template_ratio_numerator)/int_to_real($knob__zalewski__template_ratio_denominator)
				inc($zalewski_number_stack_length)
			case 97{ "a"}
				?zalewski_number_stack[$zalewski_number_stack_length] := int_to_real($knob__zalewski__var_a)
				inc($zalewski_number_stack_length)
			case 98{ "b"}
				?zalewski_number_stack[$zalewski_number_stack_length] := int_to_real($knob__zalewski__var_b)
				inc($zalewski_number_stack_length)
			case 99{ "c"}
				?zalewski_number_stack[$zalewski_number_stack_length] := int_to_real($knob__zalewski__var_c)
				inc($zalewski_number_stack_length)
		end select
		if (%zalewski_script[$zalewski_operational_index] = 44 or $zalewski_operational_index = $zalewski_max_stack_length-1)
			{'compile' calculate step from stack:}


			{do maths}

{vvvvvvvvvvvvvvvv}
			{
			$counter1 := 0
			~zalewski_suma_czastkowa := 0.0
			~zalewski_produkt_czastkowy := 0.0
			while ($counter1 < $zalewski_operator_stack_length)
				
				if (%zalewski_operator_stack[$counter1] = 42 or %zalewski_operator_stack[$counter1] = 47)
					~zalewski_produkt_czastkowy := ?zalewski_number_stack[$counter1]
					while ((%zalewski_operator_stack[$counter1] = 42 or %zalewski_operator_stack[$counter1] = 47) and $counter1 < $zalewski_operator_stack_length-1) 
						select (%zalewski_operator_stack[$counter1])
							case 42
							 	~zalewski_produkt_czastkowy := ~zalewski_produkt_czastkowy * ?zalewski_number_stack[$counter1+1]
							case 47
							 	~zalewski_produkt_czastkowy := ~zalewski_produkt_czastkowy / ?zalewski_number_stack[$counter1+1]
						end select
						inc($counter1)
					end while
					$counter1 := $counter1 + $counter2 + 1
					~zalewski_suma_czastkowa := ~zalewski_suma_czastkowa + ~zalewski_produkt_czastkowy
				else
					select (%zalewski_operator_stack[$counter1])
						case 43
							~zalewski_suma_czastkowa := ~zalewski_suma_czastkowa + ~zalewski_produkt_czastkowy
							~zalewski_produkt_czastkowy := 0.0
					end select
					inc($counter1)
				end if
			end while
			?harmonic_structure[$zalewski_rzad] := ~zalewski_suma_czastkowa 
			}


{^^^^^^^^^^^^^^^}


			~zalewski_produkt_czastkowy := ?zalewski_number_stack[0]
			$zalewski_operational_index_reading_offset := 0
			while ($zalewski_operational_index_reading_offset < $zalewski_operator_stack_length)
				select (%zalewski_operator_stack[$zalewski_operational_index_reading_offset])
					case 43
						~zalewski_produkt_czastkowy := ~zalewski_produkt_czastkowy + ?zalewski_number_stack[$zalewski_operational_index_reading_offset + 1]
					case 45 
						~zalewski_produkt_czastkowy := ~zalewski_produkt_czastkowy - ?zalewski_number_stack[$zalewski_operational_index_reading_offset + 1]
					case 42 
						~zalewski_produkt_czastkowy := ~zalewski_produkt_czastkowy * ?zalewski_number_stack[$zalewski_operational_index_reading_offset + 1]
					case 47 
						~zalewski_produkt_czastkowy := ~zalewski_produkt_czastkowy / ?zalewski_number_stack[$zalewski_operational_index_reading_offset + 1]
						{todo: handle error of div by zero}
				end select
				inc($zalewski_operational_index_reading_offset)
			end while
			
			

			?harmonic_structure[$zalewski_rzad] := ~zalewski_produkt_czastkowy

			~zalewski_suma_czastkowa := 0.0
			~zalewski_produkt_czastkowy := 0.0
			inc($zalewski_rzad)

			{reset stack}
			$counter1 := 0
			while ($counter1 < $zalewski_max_stack_length)
				?zalewski_number_stack[$counter1] := 0.0
				%zalewski_operator_stack[$counter1] := 0
				inc($counter1)
			end while
			$zalewski_number_stack_length := 0
			$zalewski_operator_stack_length := 0
		end if
		inc($zalewski_operational_index)
	end while

{:)}
	$number_of_pitch_classes := $zalewski_rzad
	
call debug

{ponizej dziala}
	{oblicz zasade struktury}
	~zalewski_zasada := 0.0
	$counter1 := 0
	while ($counter1 < $zalewski_rzad)
		~zalewski_zasada := ~zalewski_zasada + ?harmonic_structure[$counter1]
		 inc($counter1)
	end while
	if (~zalewski_zasada = 0.0)
		~zalewski_zasada := 12.0
	end if

{call debug}
	$counter1 := 0
	while ($counter1 < $zalewski_rzad)
	{edit marker}		{
		 ?harmonic_structure[$counter1] :=  exp ( (?harmonic_structure[$counter1] / ~zalewski_zasada) * log (int_to_real($knob__zalewski__equave_numerator) /int_to_real($knob__zalewski__equave_denominator) ) )
		 ?harmonic_structure[$counter1] :=  1200.0 * log (?harmonic_structure[$counter1]) / log(2.0)
		 }

		 ?harmonic_structure[$counter1] :=  (?harmonic_structure[$counter1] / ~zalewski_zasada) * ~interval_of_equivalence
		inc($counter1)
	end while



	{use reversed/reflected scale variants (struktury przeciwne i odbite, atm nie pamietam jakie tlumaczenie anglosaskie proponowano)}
	$counter1 := 0
	?tuning_table[0] := 0.0
	while ($counter1 < $zalewski_rzad)
		if ($gui_zalewski__struktura_przeciwna = 0)
			?tuning_table[$counter1+1] := ?tuning_table[$counter1] + ?harmonic_structure[$counter1]
		else
			?tuning_table[$counter1+1] := ?tuning_table[$counter1] + ?harmonic_structure[$zalewski_rzad-1-$counter1]
		end if
		if ($gui_zalewski__struktura_odbita = 1)
			?tuning_table[$counter1] := (2.0 * ~zalewski__interval_of_equivalence / int_to_real($zalewski_rzad) ) - ?tuning_table[$counter1]
		end if
		inc($counter1)
	end while

	call display_zalewskis_structure_in_cents
end function


function update_zalewskis_script_gui()
			wait(1)
			$counter1 := 0
			while ($counter1 < num_elements(%zalewski_script))
				!zalewski_script_characters[$counter1] := ""
				select (%zalewski_script[$counter1])
					case 8
						if ($counter1 > 0)
							!zalewski_script_characters[$counter1 - 1] := " "
						end if
					case 32
						!zalewski_script_characters[$counter1] := " "
					case 36
						!zalewski_script_characters[$counter1] := "$"
					case 42
						!zalewski_script_characters[$counter1] := "*"
					case 43
						!zalewski_script_characters[$counter1] := "+"
					case 44
						!zalewski_script_characters[$counter1] := ","
					case 45
						!zalewski_script_characters[$counter1] := "-"
					case 46
						!zalewski_script_characters[$counter1] := "."
					case 47
						!zalewski_script_characters[$counter1] := "/"
					case 48
						!zalewski_script_characters[$counter1] := "0"
					case 49
						!zalewski_script_characters[$counter1] := "1"
					case 50
						!zalewski_script_characters[$counter1] := "2"
					case 51
						!zalewski_script_characters[$counter1] := "3"
					case 52
						!zalewski_script_characters[$counter1] := "4"
					case 53
						!zalewski_script_characters[$counter1] := "5"
					case 54
						!zalewski_script_characters[$counter1] := "6"
					case 55
						!zalewski_script_characters[$counter1] := "7"
					case 56
						!zalewski_script_characters[$counter1] := "8"
					case 57
						!zalewski_script_characters[$counter1] := "9"
					case 64
						!zalewski_script_characters[$counter1] := "@"
					case 97
						!zalewski_script_characters[$counter1] := "a"
					case 98
						!zalewski_script_characters[$counter1] := "b"
					case 99
						!zalewski_script_characters[$counter1] := "c"
					case 107
						!zalewski_script_characters[$counter1] := "k"
					case 127 {DEL}
						$counter2 := 0
						while ($counter2 <= $counter1)
							!zalewski_script_characters[$counter2] := " "
							inc($counter2)
						end while
				end select
				inc($counter1)
			end while
			$counter1 := 0
			@zalewski_script_display_string := ""
			select ($gui_zalewski__struktura_przeciwna)
				case 0
					@zalewski_script_display_string := @zalewski_script_display_string & "    (  "
				case 1
					@zalewski_script_display_string := @zalewski_script_display_string & "  - (  "
			end select
			while ($counter1 < num_elements(!zalewski_script_characters))
				if ($counter1 = $knob__zalewski__cursor_position)
					@zalewski_script_display_string := @zalewski_script_display_string & "@"
				end if
				@zalewski_script_display_string := @zalewski_script_display_string & !zalewski_script_characters[$counter1]
				inc($counter1)
			end while
			select ($gui_zalewski__struktura_odbita)
				case 0
					@zalewski_script_display_string := @zalewski_script_display_string & "  )  "
				case 1
					@zalewski_script_display_string := @zalewski_script_display_string & "  ) *"
			end select

	set_text ($label_zalewski_structure_module,@zalewski_script_display_string)
end function
function onuicontrol__knob__zalewski__cursor_position()
	if (%zalewski_script[$knob__zalewski__cursor_position] = 0 and $knob__zalewski__cursor_position < 32)
		%zalewski_script[$knob__zalewski__cursor_position] := 32
	end if
	$num_chars_typed_from_cursor_pos := 0
	call update_zalewskis_script_gui
end function
function onuicontrol__knob__zalewski__var_a()
	call recalculate_zalewskis_harmonic_structure
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob__zalewski__var_b()
	call recalculate_zalewskis_harmonic_structure
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob__zalewski__var_c()
	call recalculate_zalewskis_harmonic_structure
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob__zalewski__template_ratio_numerator()
	call recalculate_zalewskis_harmonic_structure
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob__zalewski__template_ratio_denominator()
	call recalculate_zalewskis_harmonic_structure
	call recalculate_tuning_dependend_transposition_modules
end function


function edit_zalewskis_script__type_character()
	if ($zalewski_last_pressed_button = 8 or $zalewski_last_pressed_button = 127)
		select ($zalewski_last_pressed_button)
			case 8 {ascii backspace}
				if ($knob__zalewski__cursor_position = 0 and $num_chars_typed_from_cursor_pos = 0)
					%zalewski_script[0] := 32
				else
					%zalewski_script[$knob__zalewski__cursor_position + $num_chars_typed_from_cursor_pos - 1] := 32
				end if
				
				{
				$counter1 := $knob__zalewski__cursor_position + $num_chars_typed_from_cursor_pos - 1
				while ($counter1 < num_elements(%zalewski_script) - 1)
					%zalewski_script[$counter1] := %zalewski_script[$counter1 + 1]
					inc($counter1)
				end while
				%zalewski_script[$counter1] := 32
				}
				if ($num_chars_typed_from_cursor_pos = 0 and $knob__zalewski__cursor_position > 0)
					$knob__zalewski__cursor_position := $knob__zalewski__cursor_position - 1
				end if
				if ($num_chars_typed_from_cursor_pos # 0)
					dec ($num_chars_typed_from_cursor_pos)
				end if
			case 127 {ascii DEL}
				$counter1 := 0
				while ($counter1 < 32)
					%zalewski_script[$counter1] := 32 {init with white space}
					inc($counter1)
				end while
				while ($counter1 < num_elements(%zalewski_script) - 1)
					%zalewski_script[$counter1] := 0 {leave leftovers empty}
					inc($counter1)
				end while
				$num_chars_typed_from_cursor_pos := 0
		end select
	else
		if (%zalewski_script[$knob__zalewski__cursor_position + $num_chars_typed_from_cursor_pos] # 0 and %zalewski_script[$knob__zalewski__cursor_position + $num_chars_typed_from_cursor_pos] # 32)
			{if character is non empty, shift everything to make place for insert}
			{$counterA := 0
			while (num_elements(%zalewski_script) - $counterA > $knob__zalewski__cursor_position + $num_chars_typed_from_cursor_pos)
				%zalewski_script[num_elements(%zalewski_script)-$counterA] := %zalewski_script[num_elements(%zalewski_script)-$counterA-1]
				inc($counterA)
			end while}
			$counter1 := num_elements(%zalewski_script)-1
			while ($counter1 > ($knob__zalewski__cursor_position + $num_chars_typed_from_cursor_pos))
				%zalewski_script[$counter1] := %zalewski_script[$counter1 - 1]
				dec($counter1)
			end while	
		end if
		%zalewski_script[$knob__zalewski__cursor_position + $num_chars_typed_from_cursor_pos] := $zalewski_last_pressed_button
		inc($num_chars_typed_from_cursor_pos)
	end if
	call update_zalewskis_script_gui
	call recalculate_zalewskis_harmonic_structure
	call recalculate_tuning_dependend_transposition_modules
end function


function onuicontrol__gui_zalewski__struktura_odbita()
	call update_zalewskis_script_gui
	call recalculate_zalewskis_harmonic_structure
	call display_zalewskis_structure_in_cents
end function
function onuicontrol__gui_zalewski__struktura_przeciwna()
	call update_zalewskis_script_gui
	call recalculate_zalewskis_harmonic_structure
	call display_zalewskis_structure_in_cents
end function

function onuicontrol__gui_zalewski__clear_all()
	if ($gui_zalewski__clear_all = 1)
		$zalewski_last_pressed_button := 127
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__clear_all := 0}
end function
function onuicontrol__gui_zalewski__backspace()
	if ($gui_zalewski__backspace = 1)
		$zalewski_last_pressed_button := 8
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__backspace := 0}
end function
function onuicontrol__gui_zalewski__spacja()
	if ($gui_zalewski__spacja = 1)
		$zalewski_last_pressed_button := 32
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__spacja := 0}
end function
function onuicontrol__gui_zalewski__template_ratio()
	if ($gui_zalewski__template_ratio = 1)
		$zalewski_last_pressed_button := 36
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__template_ratio := 0}
end function
function onuicontrol__gui_zalewski__plus()
	if ($gui_zalewski__plus = 1)
		$zalewski_last_pressed_button := 43
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__plus := 0}
end function
function onuicontrol__gui_zalewski__minus()
	if ($gui_zalewski__minus = 1)
		$zalewski_last_pressed_button := 45
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__minus := 0}
end function
function onuicontrol__gui_zalewski__razy()
	if ($gui_zalewski__razy = 1)
		$zalewski_last_pressed_button := 42
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__razy := 0}
end function
function onuicontrol__gui_zalewski__przecinek()
	if ($gui_zalewski__przecinek = 1)
		$zalewski_last_pressed_button := 44
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__przecinek := 0}
end function
function onuicontrol__gui_zalewski__decimal_places_separator()
	if ($gui_zalewski__decimal_places_separator = 1)
		$zalewski_last_pressed_button := 46
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__decimal_places_separator := 0}
end function
function onuicontrol__gui_zalewski__podzielic()
	if ($gui_zalewski__podzielic = 1)
		$zalewski_last_pressed_button := 47
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__podzielic := 0}
end function
function onuicontrol__gui_zalewski__numpad_0()
	if ($gui_zalewski__numpad_0 = 1)
		$zalewski_last_pressed_button := 48
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__numpad_0 := 0}
end function
function onuicontrol__gui_zalewski__numpad_1()
	if ($gui_zalewski__numpad_1 = 1)
		$zalewski_last_pressed_button := 49
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__numpad_1 := 0}
end function
function onuicontrol__gui_zalewski__numpad_2()
	if ($gui_zalewski__numpad_2 = 1)
		$zalewski_last_pressed_button := 50
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__numpad_2 := 0}
end function
function onuicontrol__gui_zalewski__numpad_3()
	if ($gui_zalewski__numpad_3 = 1)
		$zalewski_last_pressed_button := 51
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__numpad_3 := 0}
end function
function onuicontrol__gui_zalewski__numpad_4()
	if ($gui_zalewski__numpad_4 = 1)
		$zalewski_last_pressed_button := 52
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__numpad_4 := 0}
end function
function onuicontrol__gui_zalewski__numpad_5()
	if ($gui_zalewski__numpad_5 = 1)
		$zalewski_last_pressed_button := 53
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__numpad_5 := 0}
end function
function onuicontrol__gui_zalewski__numpad_6()
	if ($gui_zalewski__numpad_6 = 1)
		$zalewski_last_pressed_button := 54
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__numpad_6 := 0}
end function
function onuicontrol__gui_zalewski__numpad_7()
	if ($gui_zalewski__numpad_7 = 1)
		$zalewski_last_pressed_button := 55
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__numpad_7 := 0}
end function
function onuicontrol__gui_zalewski__numpad_8()
	if ($gui_zalewski__numpad_8 = 1)
		$zalewski_last_pressed_button := 56
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__numpad_8 := 0}
end function
function onuicontrol__gui_zalewski__numpad_9()
	if ($gui_zalewski__numpad_9 = 1)
		$zalewski_last_pressed_button := 57
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__numpad_9 := 0}
end function
function onuicontrol__gui_zalewski__var_a()
	if ($gui_zalewski__var_a = 1)
		$zalewski_last_pressed_button := 97
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__var_a := 0}
end function
function onuicontrol__gui_zalewski__var_b()
	if ($gui_zalewski__var_b = 1)
		$zalewski_last_pressed_button := 98
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__var_b := 0}
end function
function onuicontrol__gui_zalewski__var_c()
	if ($gui_zalewski__var_c = 1)
		$zalewski_last_pressed_button := 99
		call edit_zalewskis_script__type_character
	end if
	{$gui_zalewski__var_c := 0}
end function



function recalculate_tuning_from_periodandgenerator_panel()
		?tuning_table[$counter1] := 0.0
	if($number_of_pitch_classes > 1)
		$counter1 := 1
		while ($counter1 <= $knob__periodandgenerator__num_of_untempered_intervals)
			?tuning_table[$counter1] := ?tuning_table[$counter1 - 1] + ~tuning_generator_interval_cents
			inc($counter1)
		end while
		if (($knob__periodandgenerator__stack_up + $knob__periodandgenerator__stack_down) # 0)
			while ($counter1 <= $knob__periodandgenerator__num_of_untempered_intervals + $knob__periodandgenerator__stack_up)
				?tuning_table[$counter1] := ?tuning_table[$counter1 - 1] + ~tuning_generator_interval_cents - (~tuning_comma_to_temper_cents / int_to_real($knob__periodandgenerator__stack_up + $knob__periodandgenerator__stack_down))
				inc($counter1)
			end while
			?tuning_table[$counter1] := - ~tuning_generator_interval_cents + (~tuning_comma_to_temper_cents / int_to_real($knob__periodandgenerator__stack_up + $knob__periodandgenerator__stack_down))
			inc($counter1)
			while ($counter1 < $number_of_pitch_classes)
				?tuning_table[$counter1] := ?tuning_table[$counter1 - 1] - ~tuning_generator_interval_cents + (~tuning_comma_to_temper_cents / int_to_real($knob__periodandgenerator__stack_up + $knob__periodandgenerator__stack_down))
				inc($counter1)
			end while
		end if

	    {octave reduction:}
	    select ($switch__reduce_by_octave)
	   		case 1
	   			~reduction_interval := 1200.0
	 	  	case 0
	 	  		~reduction_interval := ~interval_of_equivalence
	    end select
	    if (~reduction_interval = 0.0)
	    	~reduction_interval := 1200.0
	    end if
	    if ($switch__interval_reduction = 1 and ~interval_of_equivalence # 0.0)
	   		$counter1 := 0
			while ($counter1 < $number_of_pitch_classes)
				select($switch__reduction_mode)
					case 0
						while ( ?tuning_table[$counter1] >= ~interval_of_equivalence )
							?tuning_table[$counter1] := ?tuning_table[$counter1] - ~reduction_interval
						end while
						while (?tuning_table[$counter1] < 0.0)
							?tuning_table[$counter1] := ?tuning_table[$counter1] + ~reduction_interval
						end while
					case 1
						while ( (?tuning_table[$counter1] > ~interval_of_equivalence) or (?tuning_table[$counter1] < 0.0) )
							if (?tuning_table[$counter1] < 0.0)
								?tuning_table[$counter1] := -1.0 * ?tuning_table[$counter1]
							end if
							if (?tuning_table[$counter1] = ~reduction_interval)
								?tuning_table[$counter1] := 0.0
							end if
							if ( ?tuning_table[$counter1] > ~interval_of_equivalence )
								?tuning_table[$counter1] := ~reduction_interval - (?tuning_table[$counter1] - ~reduction_interval)
							end if
						end while
				end select
				inc($counter1)
			end while
        end if



		{bubble sort}
	
		$counter2 := 0
		while ($counter2 < $number_of_pitch_classes)
			$counter1 := 1
			while ($counter1 + $counter2 < $number_of_pitch_classes) 
				if (?tuning_table[$counter1] < ?tuning_table[$counter1 -1])
					~periodandgenerator__helper_float := ?tuning_table[$counter1]
					?tuning_table[$counter1] := ?tuning_table[$counter1 - 1]
					?tuning_table[$counter1 - 1] := ~periodandgenerator__helper_float
				end if
				inc($counter1)
			end while
			inc($counter2)
		end while
	end if
end function


function update_generator_in_periodandgenerator_panel()
	{update value:}
		~tuning_generator_interval_cents := 1200.0*log( exp((int_to_real($knob__generator_interval_power_numerator)/int_to_real($knob__generator_interval_power_denominator)) * log(int_to_real($knob__generator_interval_numerator)/int_to_real($knob__generator_interval_denominator))) )/log(2.0)
	{update label:}
		set_text ($label_generator_interval,"g e n e r a t o r   i n t e r v a l   =   ( " & $knob__generator_interval_numerator & " / " & $knob__generator_interval_denominator & " ) ^ ( " & $knob__generator_interval_power_numerator & " / " & $knob__generator_interval_power_denominator & " ) " & " =  " & floor(~tuning_generator_interval_cents*100.0)/100.0 & "c")
end function
function onuicontrol__knob__generator_interval_numerator()
	call update_generator_in_periodandgenerator_panel
	call recalculate_tuning_from_periodandgenerator_panel
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob__generator_interval_denominator()
	call update_generator_in_periodandgenerator_panel
	call recalculate_tuning_from_periodandgenerator_panel
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob__generator_interval_power_numerator()
	call update_generator_in_periodandgenerator_panel
	call recalculate_tuning_from_periodandgenerator_panel
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob__generator_interval_power_denominator()
	call update_generator_in_periodandgenerator_panel
	call recalculate_tuning_from_periodandgenerator_panel
	call recalculate_tuning_dependend_transposition_modules
end function

function update_numofcats_in_periodgenerator_panel()
	{update value:}
		$number_of_pitch_classes := $knob__periodandgenerator__stack_up + $knob__periodandgenerator__num_of_untempered_intervals + $knob__periodandgenerator__stack_down + 1
	{update label:}
		set_text ($label__periodandgenerator_total_num_of_cats, "total:  " & $number_of_pitch_classes)
end function
function onuicontrol__knob__periodandgenerator__stack_up()
	call update_numofcats_in_periodgenerator_panel
	call recalculate_tuning_from_periodandgenerator_panel
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob__periodandgenerator__num_of_untempered_intervals()
	call update_numofcats_in_periodgenerator_panel
	call recalculate_tuning_from_periodandgenerator_panel
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob__periodandgenerator__stack_down()
	call update_numofcats_in_periodgenerator_panel
	call recalculate_tuning_from_periodandgenerator_panel
	call recalculate_tuning_dependend_transposition_modules
end function

function update_comma_in_periodandgenerator_panel()
	{update value:}
		~tuning_comma_to_temper_cents := (int_to_real($knob__comma_fraction_numerator)/int_to_real($knob__comma_fraction_denominator)) * 1200.0 * log(int_to_real($knob__comma_interval_numerator)/int_to_real($knob__comma_interval_denominator) )/log(2.0)
	{update label:}
		set_text ($label_comma_to_temper,"i n t e r v a l  t o  t e m p e r = (" & $knob__comma_fraction_numerator & "/" & $knob__comma_fraction_denominator & ")*1200*log(" & $knob__comma_interval_numerator & "/" & $knob__comma_interval_denominator & ")/log(2)" & " = " & floor(~tuning_comma_to_temper_cents*100.0)/100.0 & "c")
end function
function onuicontrol__knob__comma_interval_numerator()
	call update_comma_in_periodandgenerator_panel
	call recalculate_tuning_from_periodandgenerator_panel
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob__comma_interval_denominator()
	call update_comma_in_periodandgenerator_panel
	call recalculate_tuning_from_periodandgenerator_panel
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob__comma_fraction_numerator()
	call update_comma_in_periodandgenerator_panel
	call recalculate_tuning_from_periodandgenerator_panel
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob__comma_fraction_denominator()
	call update_comma_in_periodandgenerator_panel
	call recalculate_tuning_from_periodandgenerator_panel
	call recalculate_tuning_dependend_transposition_modules
end function





function calculate_epimoric_tuning()
		$number_of_pitch_classes := $knob__epimoric_generators__modus1 + $knob__epimoric_generators__modus2
		{basic epimoric segment of the harmonic/subharmonic series:}
		$counter1 := 0
		while ($counter1 < $knob__epimoric_generators__modus1)
			select ($epimoric_generators_utonal_switch_1)
				case 0
					?epimoric_scales__calc_array[$counter1] := int_to_real($knob__epimoric_generators__modus1 + ($counter1 mod $number_of_pitch_classes)) / int_to_real($knob__epimoric_generators__modus1)
				case 1
					?epimoric_scales__calc_array[$counter1] := int_to_real($knob__epimoric_generators__modus1) / int_to_real($knob__epimoric_generators__modus1 + ($counter1 mod $number_of_pitch_classes) )
			end select
			?epimoric_scales__calc_array[$counter1] := 1200.0 * log(?epimoric_scales__calc_array[$counter1]) / log(2.0)

			{utonal should be octave higher to compensate:}
			select ($epimoric_generators_utonal_switch_1)
				case 1
					?epimoric_scales__calc_array[$counter1] := ?epimoric_scales__calc_array[$counter1] + ~interval_of_equivalence
			end select
			inc($counter1)
		end while

	if ($knob__epimoric_generators__modus2 # 0)
		{calculate relative root shift of the twin scale structure}
		select ($epimoric_generators_utonal_switch_1)
			case 0
				~epimoric_scales__twin_structure_offset := int_to_real($knob__epimoric_generators__modus1 + ($knob__epimoric_generators__gradus1 mod $number_of_pitch_classes)) / int_to_real($knob__epimoric_generators__modus1)
			case 1
				~epimoric_scales__twin_structure_offset := int_to_real($knob__epimoric_generators__modus1) / int_to_real($knob__epimoric_generators__modus1 + ($knob__epimoric_generators__gradus1 mod $number_of_pitch_classes))
		end select
		select ($epimoric_generators_utonal_switch_2)
			case 0
				~epimoric_scales__twin_structure_offset := ~epimoric_scales__twin_structure_offset * int_to_real($knob__epimoric_generators__modus2) / int_to_real($knob__epimoric_generators__modus2 + ($knob__epimoric_generators__gradus2 mod $number_of_pitch_classes))
			case 1
				~epimoric_scales__twin_structure_offset := ~epimoric_scales__twin_structure_offset * (int_to_real($knob__epimoric_generators__modus2 + ($knob__epimoric_generators__gradus2 mod $number_of_pitch_classes)) / int_to_real($knob__epimoric_generators__modus2))
		end select
			~epimoric_scales__twin_structure_offset := 1200.0 * log(~epimoric_scales__twin_structure_offset) / log(2.0)
		{populate twins structure:}

		$counter1 := 0
		while ($counter1 < $knob__epimoric_generators__modus2)
		
			select ($epimoric_generators_utonal_switch_2)
				case 0
				?epimoric_scales__calc_array[$knob__epimoric_generators__modus1+$counter1] := int_to_real($knob__epimoric_generators__modus2 + ($counter1 mod $number_of_pitch_classes) ) / int_to_real($knob__epimoric_generators__modus2)
				case 1
				?epimoric_scales__calc_array[$knob__epimoric_generators__modus1+$counter1] := int_to_real($knob__epimoric_generators__modus2) / int_to_real($knob__epimoric_generators__modus2 + ($counter1 mod $number_of_pitch_classes ))
			end select

			?epimoric_scales__calc_array[$knob__epimoric_generators__modus1+$counter1] := (1200.0 * log (?epimoric_scales__calc_array[$knob__epimoric_generators__modus1+$counter1]) / log(2.0)) + ~epimoric_scales__twin_structure_offset
		
			inc($counter1)
		end while

	end if

	    {octave reduction:}
		    select ($switch__reduce_by_octave)
		   		case 1
		   			~reduction_interval := 1200.0
		 	  	case 0
		 	  		~reduction_interval := ~interval_of_equivalence
		    end select
		    if (~reduction_interval = 0.0)
		    	~reduction_interval := 1200.0
		    end if
		    if ($switch__interval_reduction = 1 and ~interval_of_equivalence # 0.0)
		   		$counter1 := 0
				while ($counter1 < $number_of_pitch_classes)
					select($switch__reduction_mode)
						case 0
							while ( ?tuning_table[$counter1] >= ~interval_of_equivalence )
								?tuning_table[$counter1] := ?tuning_table[$counter1] - ~reduction_interval
							end while
							while (?tuning_table[$counter1] < 0.0)
								?tuning_table[$counter1] := ?tuning_table[$counter1] + ~reduction_interval
							end while
						case 1
							while ( (?tuning_table[$counter1] > ~interval_of_equivalence) or (?tuning_table[$counter1] < 0.0) )
								if (?tuning_table[$counter1] < 0.0)
									?tuning_table[$counter1] := -1.0 * ?tuning_table[$counter1]
								end if
								if (?tuning_table[$counter1] = ~reduction_interval)
									?tuning_table[$counter1] := 0.0
								end if
								if ( ?tuning_table[$counter1] > ~interval_of_equivalence )
									?tuning_table[$counter1] := ~reduction_interval - (?tuning_table[$counter1] - ~reduction_interval)
								end if
							end while
					end select
					inc($counter1)
				end while
	        end if

		{bubble sort:}

		$counter2 := 0
		while ($counter2 < $number_of_pitch_classes)
			$counter1 := 1
			while ($counter1 + $counter2 < $number_of_pitch_classes) 
				if (?epimoric_scales__calc_array[$counter1] < ?epimoric_scales__calc_array[$counter1 -1])
					~epimoric_scales__helper_float := ?epimoric_scales__calc_array[$counter1]
					?epimoric_scales__calc_array[$counter1] := ?epimoric_scales__calc_array[$counter1 - 1]
					?epimoric_scales__calc_array[$counter1 - 1] := ~epimoric_scales__helper_float
				end if
				inc($counter1)
			end while
			inc($counter2)
		end while

	   {assign tuning:}

		$counter1 := 0
		while ($counter1 < $number_of_pitch_classes)
			?tuning_table[$counter1] := ?epimoric_scales__calc_array[$counter1]
			inc($counter1)
		end while

end function
function onuicontrol__knob__epimoric_generators__gradus1()
	if ($knob__epimoric_generators__modus1 # 0)
		set_knob_label($knob__epimoric_generators__gradus1, "  " & ($knob__epimoric_generators__gradus1 mod $knob__epimoric_generators__modus1))
	else
		set_knob_label($knob__epimoric_generators__gradus1, "  " & 0)
	end if
	call calculate_epimoric_tuning
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob__epimoric_generators__modus1()
	call calculate_epimoric_tuning
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__epimoric_generators_utonal_switch_1()
	select ($epimoric_generators_utonal_switch_1)
		case 0
			set_control_par_str(get_ui_id($epimoric_generators_utonal_switch_1), $CONTROL_PAR_TEXT, "[ H M ]")
		case 1
			set_control_par_str(get_ui_id($epimoric_generators_utonal_switch_1), $CONTROL_PAR_TEXT, "[ A M ]")
	end select
	call calculate_epimoric_tuning
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__epimoric_generators_utonal_switch_2()
	select ($epimoric_generators_utonal_switch_2)
		case 0
			set_control_par_str(get_ui_id($epimoric_generators_utonal_switch_2), $CONTROL_PAR_TEXT, "[ H M ]")
		case 1
			set_control_par_str(get_ui_id($epimoric_generators_utonal_switch_2), $CONTROL_PAR_TEXT, "[ A M ]")
	end select
	call calculate_epimoric_tuning
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob__epimoric_generators__gradus2()
	if ($knob__epimoric_generators__modus2 # 0)
		set_knob_label($knob__epimoric_generators__gradus2, "  " & ($knob__epimoric_generators__gradus2 mod $knob__epimoric_generators__modus2))
	else
		set_knob_label($knob__epimoric_generators__gradus2, "  " & 0)
	end if
	call calculate_epimoric_tuning
	call recalculate_tuning_dependend_transposition_modules
end function
function onuicontrol__knob__epimoric_generators__modus2()
	call calculate_epimoric_tuning
	call recalculate_tuning_dependend_transposition_modules
end function




function recalculate_edtuning()
	?tuning_table[0] := 0.0
	$number_of_pitch_classes := 1
	~interval_of_equivalence := 1200.0*log( exp((int_to_real($knob__interval_of_equivalence_power_numerator)/int_to_real($knob__interval_of_equivalence_power_denominator)) * log(int_to_real($knob__interval_of_equivalence_numerator)/int_to_real($knob__interval_of_equivalence_denominator))) )/log(2.0)
	~interval_of_equivalence := ~interval_of_equivalence * int_to_real($knob__edtuning_fracofequave_numerator)/int_to_real($knob__edtuning_fracofequave_denominator)
	~interval_of_equivalence := ~interval_of_equivalence + int_to_real($knob__edtuning_detune_step_by_cents) + (int_to_real($knob__edtuning_detune_step_by_centpercent)/100.0)
	set_text ($label_equalsteptuning_settings," e q u a l   s t e p   s i z e    =   " & round(~interval_of_equivalence*10000.0)/10000.0 & "c")
end function
function onuicontrol__knob__edtuning_fracofequave_numerator()
	call recalculate_edtuning
end function
function onuicontrol__knob__edtuning_fracofequave_denominator()
	call recalculate_edtuning
end function
function onuicontrol__knob__edtuning_detune_step_by_cents()
	call recalculate_edtuning
end function
function onuicontrol__knob__edtuning_detune_step_by_centpercent()
	call recalculate_edtuning
end function




function recalculate_tuning()
	if ($paradigms_menu = 800)
		call recalculate_tuning_from_ji_ratios
	end if
	if ($paradigms_menu = 808)
		call recalculate_ji_ratios_tuning_from_knobs
	end if
	if ($paradigms_menu = 98)
		call recalculate_zalewskis_harmonic_structure
	end if
	if ($paradigms_menu = 99)
	call recalculate_zalewski_qnz
	end if
	if ($paradigms_menu = 1100)
		call recalculate_tuning_from_exponent_ratios
	end if
	if ($paradigms_menu = 1001)
		call func_calculate_euler_fokker_genus
	end if
	if ($paradigms_menu = 1002)
		call recalculate_combination_product_set
	end if
	if ($paradigms_menu = 1101)
		call recalculate_tuning_from_expknobs
	end if
	if ($paradigms_menu = 801)
		call recalculate_tuning_from_cent_uivalues
	end if
	if ($paradigms_menu = 1935)
		call recalculate_tuning_from_freq_ratios
	end if
	if ($paradigms_menu = 3)
		call recalculate_tuning_from_periodandgenerator_panel
	end if
	if ($paradigms_menu = 720)
		call recalculate_tuning_from_temperament_units
	end if
	if ($paradigms_menu = 1000)
		call calculate_epimoric_tuning
	end if
	if ($paradigms_menu = 1111)
		call recalculate_edtuning
	end if
	call recalculate_tuning_dependend_transposition_modules
end function

function update_interval_of_equivalence()
			~interval_of_equivalence := 1200.0*log( exp((int_to_real($knob__interval_of_equivalence_power_numerator)/int_to_real($knob__interval_of_equivalence_power_denominator)) * log(int_to_real($knob__interval_of_equivalence_numerator)/int_to_real($knob__interval_of_equivalence_denominator))) )/log(2.0)

			set_text ($label_interval_of_equivalence,"i n t e r v a l   o f   e q u i v a l e n c e    =   ( " & $knob__interval_of_equivalence_numerator & " / " & $knob__interval_of_equivalence_denominator & " ) ^ ( " & $knob__interval_of_equivalence_power_numerator & " / " & $knob__interval_of_equivalence_power_denominator & " ) " & " =  " & floor(~interval_of_equivalence*100.0)/100.0 & "c")

	call recalculate_tuning
end function
function prevent_negative_interval_of_equivalence()
	if ($knob__interval_of_equivalence_power_numerator < $knob__interval_of_equivalence_denominator)
		$__i__ := get_control_par(get_ui_id($knob__interval_of_equivalence_numerator), $CONTROL_PAR_VALUE)
		set_control_par(get_ui_id($knob__interval_of_equivalence_numerator), $CONTROL_PAR_VALUE, get_control_par(get_ui_id($knob__interval_of_equivalence_denominator), $CONTROL_PAR_VALUE)) 
		set_control_par(get_ui_id($knob__interval_of_equivalence_denominator), $CONTROL_PAR_VALUE, $__i__) 
	end if
end function
function onuicontrol__knob__interval_of_equivalence_numerator()
	call prevent_negative_interval_of_equivalence
	call update_interval_of_equivalence
end function
function onuicontrol__knob__interval_of_equivalence_denominator()
	call prevent_negative_interval_of_equivalence
	call update_interval_of_equivalence
end function
function onuicontrol__knob__interval_of_equivalence_power_numerator()
	call update_interval_of_equivalence
end function
function onuicontrol__knob__interval_of_equivalence_power_denominator()
	call update_interval_of_equivalence
end function



function display_correct_view_in_scalesmithing_tab()
	set_control_par(get_ui_id($panel__interval_of_equivalence), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) {common panel}
	if ($paradigms_menu = 800)
		$panel__tune_by_ji_ratios_precise_visibility := 1
		set_control_par(get_ui_id($panel__tune_by_ji_ratios_precise), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
		call recalculate_tuning_from_ji_ratios
	else
		$panel__tune_by_ji_ratios_precise_visibility := 0
		set_control_par(get_ui_id($panel__tune_by_ji_ratios_precise), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
	end if
	if ($paradigms_menu = 808)
		$panel__jiknobs_visibility := 1
		set_control_par(get_ui_id($panel__jiknobs), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
		call display_correct_knobs_in_jiknobs_panel
		call update_jiknobs_gui
		call recalculate_ji_ratios_tuning_from_knobs
	else
		$panel__jiknobs_visibility := 0
		set_control_par(get_ui_id($panel__jiknobs), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
	end if
	if ($paradigms_menu = 98)
		$gui_zalewski_module_visibility := 1
		set_control_par(get_ui_id($gui_zalewski_module), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
		call recalculate_zalewskis_harmonic_structure
	else
		$gui_zalewski_module_visibility := 0
		set_control_par(get_ui_id($gui_zalewski_module), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
	end if
	if ($paradigms_menu = 99)
		$gui_zalewski_qnz_module_visibility := 1
		set_control_par(get_ui_id($gui_zalewski_qnz_module), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
		call recalculate_zalewski_qnz
	else
		$gui_zalewski_qnz_module_visibility := 0
		set_control_par(get_ui_id($gui_zalewski_qnz_module), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
	end if
	if ($paradigms_menu = 1100)
		$panel__tune_by_exponent_ratios_visibility := 1
		set_control_par(get_ui_id($panel__tune_by_exponent_ratios), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
		call recalculate_tuning_from_exponent_ratios
	else
		$panel__tune_by_exponent_ratios_visibility := 0
		set_control_par(get_ui_id($panel__tune_by_exponent_ratios), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
	end if
	if ($paradigms_menu = 1001)
		$panel__euler_fokker_genera_visibility := 1
		set_control_par(get_ui_id($panel_eulerfokkergenera), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
		call func_calculate_euler_fokker_genus
	else
		$panel__euler_fokker_genera_visibility := 0
		set_control_par(get_ui_id($panel_eulerfokkergenera), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
	end if
	if ($paradigms_menu = 1002)
		$panel_cps_visibility := 1
		set_control_par(get_ui_id($panel_cps), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
		call recalculate_combination_product_set
	else
		$panel_cps_visibility := 0
		set_control_par(get_ui_id($panel_cps), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
	end if
	if ($paradigms_menu = 1101)
		$panel__expknobs_visibility := 1
		set_control_par(get_ui_id($panel__expknobs), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
		call display_correct_knobs_in_expknobs_panel
		call update_expknobs_gui
		call recalculate_tuning_from_expknobs
	else
		$panel__expknobs_visibility := 0
		set_control_par(get_ui_id($panel__expknobs), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
	end if
	if ($paradigms_menu = 801)
		$panel__tune_by_cents_visibility := 1
		set_control_par(get_ui_id($panel__tune_by_cents), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
		call recalculate_tuning_from_cent_uivalues
	else
		$panel__tune_by_cents_visibility := 0
		set_control_par(get_ui_id($panel__tune_by_cents), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
	end if
	if ($paradigms_menu = 1935)
		$panel__freqratio_visibility := 1
		set_control_par(get_ui_id($panel__freqratio), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
		call recalculate_tuning_from_freq_ratios
	else
		$panel__freqratio_visibility := 0
		set_control_par(get_ui_id($panel__freqratio), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
	end if
	if ($paradigms_menu = 3)
		$panel__periodandgenerator_visibility := 1
		set_control_par(get_ui_id($panel__periodandgenerator), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
		call recalculate_tuning_from_periodandgenerator_panel
	else
		$panel__periodandgenerator_visibility := 0
		set_control_par(get_ui_id($panel__periodandgenerator), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
	end if
	if ($paradigms_menu = 720)
		$panel__temperament_units_visibility := 1
		set_control_par(get_ui_id($panel__temperament_units), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
		set_control_par(get_ui_id($panel__interval_of_equivalence), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
		call recalculate_tuning_from_temperament_units
	else
		$panel__temperament_units_visibility := 0
		set_control_par(get_ui_id($panel__temperament_units), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
	end if
	if ($paradigms_menu = 1000)
		$panel__epimoric_scales_visibility := 1
		set_control_par(get_ui_id($panel__epimoric_scales), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
		call calculate_epimoric_tuning
	else
		$panel__epimoric_scales_visibility := 0
		set_control_par(get_ui_id($panel__epimoric_scales), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
	end if
	if ($paradigms_menu = 1111)
		$panel__equalsteptuning_visibility := 1
		set_control_par(get_ui_id($panel__equalsteptuning), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
		call recalculate_edtuning
	else
		$panel__equalsteptuning_visibility := 0
		set_control_par(get_ui_id($panel__equalsteptuning), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
	end if
end function
function onuicontrol__paradigms_menu()
	call update_interval_of_equivalence
	call display_correct_view_in_scalesmithing_tab
end function
on ui_control ($paradigms_menu)
	call onuicontrol__paradigms_menu
	select ($paradigms_menu)
		case 800
			$rpn_connect__send_int := 1
		case 808
			$rpn_connect__send_int := 2
		case 98
			$rpn_connect__send_int := 3
		case 99
			$rpn_connect__send_int := 4
		case 1100
			$rpn_connect__send_int := 5
		case 1001
			$rpn_connect__send_int := 6
		case 1002
			$rpn_connect__send_int := 7
		case 1101
			$rpn_connect__send_int := 8
		case 801
			$rpn_connect__send_int := 9
		case 1935
			$rpn_connect__send_int := 10
		case 3
			$rpn_connect__send_int := 11
		case 720
			$rpn_connect__send_int := 12
		case 1000
			$rpn_connect__send_int := 13
		case 1111
			$rpn_connect__send_int := 14

	end select
	$rpn_relative_port_index := 0
	set_rpn($rpn_connect__channel_num + $rpn_relative_port_index , $rpn_connect__send_int)
end on

function setup_tab__show_gui()
	$setup_module_visibility := 1
	set_text($setup_module_visibility,"[ SETUP ]")
	set_control_par(get_ui_id($gui_panel__setup_tab), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
end function
function setup_tab__hide_gui()
	$setup_module_visibility := 0
	set_text($setup_module_visibility,"[setup]")
	set_control_par(get_ui_id($gui_panel__setup_tab), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
end function
function scalesmithing_tab__show_gui()
	$scalesmithing_module_visibility := 1
	set_text($scalesmithing_module_visibility,"[ SCALESMITHING ]")
	set_control_par(get_ui_id($gui_panel__scalesmithing_tab), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
	call display_correct_view_in_scalesmithing_tab
end function
function scalesmithing_tab__hide_gui()
	$scalesmithing_module_visibility := 0
	set_text($scalesmithing_module_visibility,"[scalesmithing]")
	set_control_par(get_ui_id($gui_panel__scalesmithing_tab), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
end function
function pedaling_module_tab__show_gui()
	$pedaling_module_visibility := 1
	set_text($pedaling_module_visibility,"[ PEDALING ]")
	set_control_par(get_ui_id($gui_panel__pedaling_tab), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
	call display_correct_view_in_scalesmithing_tab
end function
function pedaling_module_tab__hide_gui()
	$pedaling_module_visibility := 0
	set_text($pedaling_module_visibility,"[pedaling]")
	set_control_par(get_ui_id($gui_panel__pedaling_tab), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
end function
function scalesmithing_modify_sus_tab__show_gui()
	$pedaling_module_tab_sus_visibility := 1
	set_text($pedaling_module_tab_sus_visibility,"[ SUS ]")
	set_control_par(get_ui_id($gui_panel__pedaling_tab_sus), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
end function
function scalesmithing_modify_sus_tab__hide_gui()
	$pedaling_module_tab_sus_visibility := 0
	set_text($pedaling_module_tab_sus_visibility,"[sus]")
	set_control_par(get_ui_id($gui_panel__pedaling_tab_sus), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
end function
function scalesmithing_modify_harp_tab__show_gui()
	$pedaling_module_tab_harp_visibility := 1
	set_text($pedaling_module_tab_harp_visibility,"[ HARP ]")
	set_control_par(get_ui_id($gui_panel__pedaling_tab_harp), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
end function
function scalesmithing_modify_harp_tab__hide_gui()
	$pedaling_module_tab_harp_visibility := 0
	set_text($pedaling_module_tab_harp_visibility,"[harp]")
	set_control_par(get_ui_id($gui_panel__pedaling_tab_harp), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
end function
function scalesmithing_modify_epimoric_tab__show_gui()
	$pedaling_module_tab_epimoric_visibility := 1
	set_text($pedaling_module_tab_epimoric_visibility,"[ EPIMORIC ]")
	set_control_par(get_ui_id($gui_panel__pedaling_tab_epimoric), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
end function
function scalesmithing_modify_epimoric_tab__hide_gui()
	$pedaling_module_tab_epimoric_visibility := 0
	set_text($pedaling_module_tab_epimoric_visibility,"[epimoric]")
	set_control_par(get_ui_id($gui_panel__pedaling_tab_epimoric), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
end function

function modulation_tab__show_gui()
	$modulation_module_visibility := 1
	set_text($modulation_module_visibility,"[ TRANSPOSITION ]")
	set_control_par(get_ui_id($gui_panel__modulation_tab), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
end function
function modulation_tab__hide_gui()
	$modulation_module_visibility := 0
	set_text($modulation_module_visibility,"[transposition]")
	set_control_par(get_ui_id($gui_panel__modulation_tab), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
end function
function detune_tab__show_gui()
	$detune_module_visibility := 1
	set_text($detune_module_visibility,"[ DETUNE ]")
	set_control_par(get_ui_id($gui_panel__detune_tab), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
end function
function detune_tab__hide_gui()
	$detune_module_visibility := 0
	set_text($detune_module_visibility,"[detune]")
	set_control_par(get_ui_id($gui_panel__detune_tab), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
end function
function onuicontrol__setup_module_visibility()
	call detune_tab__hide_gui
	call scalesmithing_tab__hide_gui
	call pedaling_module_tab__hide_gui
	call modulation_tab__hide_gui
	call setup_tab__show_gui
end function
function onuicontrol__scalesmithing_module_visibility()
	call setup_tab__hide_gui
	call pedaling_module_tab__hide_gui
	call modulation_tab__hide_gui
	call detune_tab__hide_gui
	call scalesmithing_tab__show_gui
end function
function onuicontrol__modulation_module_visibility()
	call setup_tab__hide_gui
	call scalesmithing_tab__hide_gui
	call pedaling_module_tab__hide_gui
	call detune_tab__hide_gui
	call modulation_tab__show_gui
end function
function onuicontrol__detune_module_visibility()
	call setup_tab__hide_gui
	call scalesmithing_tab__hide_gui
	call pedaling_module_tab__hide_gui
	call modulation_tab__hide_gui
	call detune_tab__show_gui
end function

function onuicontrol__pedaling_module_visibility()
	call setup_tab__hide_gui
	call scalesmithing_tab__hide_gui
	call modulation_tab__hide_gui
	call detune_tab__hide_gui
	call pedaling_module_tab__show_gui
end function
function onuicontrol__pedaling_module_tab_sus_visibility()
	call scalesmithing_modify_harp_tab__hide_gui
	call scalesmithing_modify_epimoric_tab__hide_gui
	call scalesmithing_modify_sus_tab__show_gui
end function
function onuicontrol__pedaling_module_tab_harp_visibility()
	call scalesmithing_modify_sus_tab__hide_gui
	call scalesmithing_modify_epimoric_tab__hide_gui
	call scalesmithing_modify_harp_tab__show_gui
end function
function onuicontrol__pedaling_module_tab_epimoric_visibility()
	call scalesmithing_modify_sus_tab__hide_gui
	call scalesmithing_modify_harp_tab__hide_gui
	call scalesmithing_modify_epimoric_tab__show_gui
end function

function modulation_tab_common_note_show_gui()
	$modulation_module__transposition_common_note__visibility := 1
	set_text($modulation_module__transposition_common_note__visibility,"[ COMMON ]")
	set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_common_note), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
end function
function modulation_tab_common_note_hide_gui()
	$modulation_module__transposition_common_note__visibility := 0
	set_text($modulation_module__transposition_common_note__visibility,"[common]")
	set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_common_note), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
end function
function modulation_tab_epimoric_show_gui()
	$modulation_module__transposition_epimoric__visibility := 1
	set_text($modulation_module__transposition_epimoric__visibility,"[ EPIMORIC ]")
	set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_epimoric), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
end function
function modulation_tab_epimoric_hide_gui()
	$modulation_module__transposition_epimoric__visibility := 0
	set_text($modulation_module__transposition_epimoric__visibility,"[epimoric]")
	set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_epimoric), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
end function
function modulation_tab_interval_show_gui()
	$modulation_module__transposition_interval__visibility := 1
	set_text($modulation_module__transposition_interval__visibility,"[ INTERVAL ]")
	set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_interval), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
end function
function modulation_tab_interval_hide_gui()
	$modulation_module__transposition_interval__visibility := 0
	set_text($modulation_module__transposition_interval__visibility,"[interval]")
	set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_interval), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
end function
function modulation_tab_whammy_show_gui()
	$modulation_module__transposition_whammy__visibility := 1
	set_text($modulation_module__transposition_whammy__visibility,"[ WHAMMY ]")
	set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_whammy), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING)
end function
function modulation_tab_whammy_hide_gui()
	$modulation_module__transposition_whammy__visibility := 0
	set_text($modulation_module__transposition_whammy__visibility,"[whammy]")
	set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_whammy), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL)
end function
function modulation_tab_monzo_show_gui()
	$modulation_module__monzo__visibility := 1
	set_text($modulation_module__monzo__visibility,"[ MONZO ]")
	set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_monzo), $CONTROL_PAR_HIDE, $HIDE_PART_NOTHING) 
end function
function modulation_tab_monzo_hide_gui()
	$modulation_module__monzo__visibility := 0
	set_text($modulation_module__monzo__visibility,"[monzo]")
	set_control_par(get_ui_id($gui_panel__modulation_tab_transposition_monzo), $CONTROL_PAR_HIDE, $HIDE_WHOLE_CONTROL) 
end function

function onuicontrol__modulation_module__transposition_common_note__visibility()
	call modulation_tab_epimoric_hide_gui
	call modulation_tab_interval_hide_gui
	call modulation_tab_whammy_hide_gui
	call modulation_tab_monzo_hide_gui
	call modulation_tab_common_note_show_gui
end function
function onuicontrol__modulation_module__transposition_epimoric__visibility()
	call modulation_tab_common_note_hide_gui
	call modulation_tab_interval_hide_gui
	call modulation_tab_whammy_hide_gui
	call modulation_tab_monzo_hide_gui
	call modulation_tab_epimoric_show_gui
end function
function onuicontrol__modulation_module__transposition_interval__visibility()
	call modulation_tab_common_note_hide_gui
	call modulation_tab_epimoric_hide_gui
	call modulation_tab_whammy_hide_gui
	call modulation_tab_monzo_hide_gui
	call modulation_tab_interval_show_gui
end function
function onuicontrol__modulation_module__transposition_whammy__visibility()
	call modulation_tab_common_note_hide_gui
	call modulation_tab_epimoric_hide_gui
	call modulation_tab_interval_hide_gui
	call modulation_tab_monzo_hide_gui
	call modulation_tab_whammy_show_gui
end function
function onuicontrol__modulation_module__monzo__visibility()
	call modulation_tab_common_note_hide_gui
	call modulation_tab_epimoric_hide_gui
	call modulation_tab_interval_hide_gui
	call modulation_tab_whammy_hide_gui
	call modulation_tab_monzo_show_gui
end function

function onuicontrol__uiswitch__suspedal_1()
	%panel__suspedals_state[0] := $uiswitch__suspedal_1
	select(%panel__suspedals_state[0])
		case 0
			set_control_par_str(%panel__suspedals_ids[0], $CONTROL_PAR_TEXT, "[ " & !cyfry_rzymskie[1] & " ]")
		case 1
		set_control_par_str(%panel__suspedals_ids[0], $CONTROL_PAR_TEXT, "[ sus ]")
	end select
end function
function onuicontrol__uiswitch__suspedal_2()
	%panel__suspedals_state[1] := $uiswitch__suspedal_2
	select(%panel__suspedals_state[1])
		case 0
			set_control_par_str(%panel__suspedals_ids[1], $CONTROL_PAR_TEXT, "[ " & !cyfry_rzymskie[2] & " ]")
		case 1
		set_control_par_str(%panel__suspedals_ids[1], $CONTROL_PAR_TEXT, "[ sus ]")
	end select
end function
function onuicontrol__uiswitch__suspedal_3()
	%panel__suspedals_state[2] := $uiswitch__suspedal_3
	select(%panel__suspedals_state[2])
		case 0
			set_control_par_str(%panel__suspedals_ids[2], $CONTROL_PAR_TEXT, "[ " & !cyfry_rzymskie[3] & " ]")
		case 1
		set_control_par_str(%panel__suspedals_ids[2], $CONTROL_PAR_TEXT, "[ sus ]")
	end select
end function
function onuicontrol__uiswitch__suspedal_4()
	%panel__suspedals_state[3] := $uiswitch__suspedal_4
	select(%panel__suspedals_state[3])
		case 0
			set_control_par_str(%panel__suspedals_ids[3], $CONTROL_PAR_TEXT, "[ " & !cyfry_rzymskie[4] & " ]")
		case 1
		set_control_par_str(%panel__suspedals_ids[3], $CONTROL_PAR_TEXT, "[ sus ]")
	end select
end function
function onuicontrol__uiswitch__suspedal_5()
	%panel__suspedals_state[4] := $uiswitch__suspedal_5
	select(%panel__suspedals_state[4])
		case 0
			set_control_par_str(%panel__suspedals_ids[4], $CONTROL_PAR_TEXT, "[ " & !cyfry_rzymskie[5] & " ]")
		case 1
		set_control_par_str(%panel__suspedals_ids[4], $CONTROL_PAR_TEXT, "[ sus ]")
	end select
end function
function onuicontrol__uiswitch__suspedal_6()
	%panel__suspedals_state[5] := $uiswitch__suspedal_6
	select(%panel__suspedals_state[5])
		case 0
			set_control_par_str(%panel__suspedals_ids[5], $CONTROL_PAR_TEXT, "[ " & !cyfry_rzymskie[6] & " ]")
		case 1
		set_control_par_str(%panel__suspedals_ids[5], $CONTROL_PAR_TEXT, "[ sus ]")
	end select
end function
function onuicontrol__uiswitch__suspedal_7()
	%panel__suspedals_state[6] := $uiswitch__suspedal_7
	select(%panel__suspedals_state[6])
		case 0
			set_control_par_str(%panel__suspedals_ids[6], $CONTROL_PAR_TEXT, "[ " & !cyfry_rzymskie[7] & " ]")
		case 1
		set_control_par_str(%panel__suspedals_ids[6], $CONTROL_PAR_TEXT, "[ sus ]")
	end select
end function
function onuicontrol__uiswitch__suspedal_8()
	%panel__suspedals_state[7] := $uiswitch__suspedal_8
	select(%panel__suspedals_state[7])
		case 0
			set_control_par_str(%panel__suspedals_ids[7], $CONTROL_PAR_TEXT, "[ " & !cyfry_rzymskie[8] & " ]")
		case 1
		set_control_par_str(%panel__suspedals_ids[7], $CONTROL_PAR_TEXT, "[ sus ]")
	end select
end function
function onuicontrol__uiswitch__suspedal_9()
	%panel__suspedals_state[8] := $uiswitch__suspedal_9
	select(%panel__suspedals_state[8])
		case 0
			set_control_par_str(%panel__suspedals_ids[8], $CONTROL_PAR_TEXT, "[ " & !cyfry_rzymskie[9] & " ]")
		case 1
		set_control_par_str(%panel__suspedals_ids[8], $CONTROL_PAR_TEXT, "[ sus ]")
	end select
end function
function onuicontrol__uiswitch__suspedal_10()
	%panel__suspedals_state[9] := $uiswitch__suspedal_10
	select(%panel__suspedals_state[9])
		case 0
			set_control_par_str(%panel__suspedals_ids[9], $CONTROL_PAR_TEXT, "[ " & !cyfry_rzymskie[10] & " ]")
		case 1
		set_control_par_str(%panel__suspedals_ids[9], $CONTROL_PAR_TEXT, "[ sus ]")
	end select
end function
function onuicontrol__uiswitch__suspedal_11()
	%panel__suspedals_state[10] := $uiswitch__suspedal_11
	select(%panel__suspedals_state[10])
		case 0
			set_control_par_str(%panel__suspedals_ids[10], $CONTROL_PAR_TEXT, "[ " & !cyfry_rzymskie[11] & " ]")
		case 1
		set_control_par_str(%panel__suspedals_ids[10], $CONTROL_PAR_TEXT, "[ sus ]")
	end select
end function
function onuicontrol__uiswitch__suspedal_12()
	%panel__suspedals_state[11] := $uiswitch__suspedal_12
	select(%panel__suspedals_state[11])
		case 0
			set_control_par_str(%panel__suspedals_ids[11], $CONTROL_PAR_TEXT, "[ " & !cyfry_rzymskie[12] & " ]")
		case 1
		set_control_par_str(%panel__suspedals_ids[11], $CONTROL_PAR_TEXT, "[ sus ]")
	end select
end function





function onuicontrol__knob__harppedal_1__d_sharp_numerator()
	%harppedal__sharp_numerators[0] := $knob__harppedal_1__d_sharp_numerator
end function
function onuicontrol__knob__harppedal_1__d_sharp_denominator()
	%harppedal__sharp_denominators[0] := $knob__harppedal_1__d_sharp_denominator
end function
function onuicontrol__knob__harppedal_2__c_sharp_numerator()
	%harppedal__sharp_numerators[1] := $knob__harppedal_2__c_sharp_numerator
end function
function onuicontrol__knob__harppedal_2__c_sharp_denominator()
	%harppedal__sharp_denominators[1] := $knob__harppedal_2__c_sharp_denominator
end function
function onuicontrol__knob__harppedal_3__b_sharp_numerator()
	%harppedal__sharp_numerators[2] := $knob__harppedal_3__b_sharp_numerator
end function
function onuicontrol__knob__harppedal_3__b_sharp_denominator()
	%harppedal__sharp_denominators[2] := $knob__harppedal_3__b_sharp_denominator
end function
function onuicontrol__knob__harppedal_4__e_sharp_numerator()
	%harppedal__sharp_numerators[3] := $knob__harppedal_4__e_sharp_numerator
end function
function onuicontrol__knob__harppedal_4__e_sharp_denominator()
	%harppedal__sharp_denominators[3] := $knob__harppedal_4__e_sharp_denominator
end function
function onuicontrol__knob__harppedal_5__f_sharp_numerator()
	%harppedal__sharp_numerators[4] := $knob__harppedal_5__f_sharp_numerator
end function
function onuicontrol__knob__harppedal_5__f_sharp_denominator()
	%harppedal__sharp_denominators[4] := $knob__harppedal_5__f_sharp_denominator
end function
function onuicontrol__knob__harppedal_6__g_sharp_numerator()
	%harppedal__sharp_numerators[5] := $knob__harppedal_6__g_sharp_numerator
end function
function onuicontrol__knob__harppedal_6__g_sharp_denominator()
	%harppedal__sharp_denominators[5] := $knob__harppedal_6__g_sharp_denominator
end function
function onuicontrol__knob__harppedal_7__a_sharp_numerator()
	%harppedal__sharp_numerators[6] := $knob__harppedal_7__a_sharp_numerator
end function
function onuicontrol__knob__harppedal_7__a_sharp_denominator()
	%harppedal__sharp_denominators[6] := $knob__harppedal_7__a_sharp_denominator
end function


function onuicontrol__knob__harppedal_1__d_flat_numerator()
	%harppedal__flat_numerators[0] := $knob__harppedal_1__d_flat_numerator
end function
function onuicontrol__knob__harppedal_1__d_flat_denominator()
	%harppedal__flat_denominators[0] := $knob__harppedal_1__d_flat_denominator
end function
function onuicontrol__knob__harppedal_2__c_flat_numerator()
	%harppedal__flat_numerators[1] := $knob__harppedal_2__c_flat_numerator
end function
function onuicontrol__knob__harppedal_2__c_flat_denominator()
	%harppedal__flat_denominators[1] := $knob__harppedal_2__c_flat_denominator
end function
function onuicontrol__knob__harppedal_3__b_flat_numerator()
	%harppedal__flat_numerators[2] := $knob__harppedal_3__b_flat_numerator
end function
function onuicontrol__knob__harppedal_3__b_flat_denominator()
	%harppedal__flat_denominators[2] := $knob__harppedal_3__b_flat_denominator
end function
function onuicontrol__knob__harppedal_4__e_flat_numerator()
	%harppedal__flat_numerators[3] := $knob__harppedal_4__e_flat_numerator
end function
function onuicontrol__knob__harppedal_4__e_flat_denominator()
	%harppedal__flat_denominators[3] := $knob__harppedal_4__e_flat_denominator
end function
function onuicontrol__knob__harppedal_5__f_flat_numerator()
	%harppedal__flat_numerators[4] := $knob__harppedal_5__f_flat_numerator
end function
function onuicontrol__knob__harppedal_5__f_flat_denominator()
	%harppedal__flat_denominators[4] := $knob__harppedal_5__f_flat_denominator
end function
function onuicontrol__knob__harppedal_6__g_flat_numerator()
	%harppedal__flat_numerators[5] := $knob__harppedal_6__g_flat_numerator
end function
function onuicontrol__knob__harppedal_6__g_flat_denominator()
	%harppedal__flat_denominators[5] := $knob__harppedal_6__g_flat_denominator
end function
function onuicontrol__knob__harppedal_7__a_flat_numerator()
	%harppedal__flat_numerators[6] := $knob__harppedal_7__a_flat_numerator
end function
function onuicontrol__knob__harppedal_7__a_flat_denominator()
	%harppedal__flat_denominators[6] := $knob__harppedal_7__a_flat_denominator
end function

function onuicontrol__switch__harppedal_1__d_sharp()
	%harppedal__sharp_switches[0] := $switch__harppedal_1__d_sharp
	select (%harppedal__sharp_switches[0])
		case 0
			set_control_par_str(%switchids__harppedals__sharps_btns[0], $CONTROL_PAR_TEXT, "[ II ]")
		case 1
			set_control_par_str(%switchids__harppedals__sharps_btns[0], $CONTROL_PAR_TEXT, "[  #  ]")
	end select
end function
function onuicontrol__switch__harppedal_2__c_sharp()
	%harppedal__sharp_switches[1] := $switch__harppedal_2__c_sharp
	select (%harppedal__sharp_switches[1])
		case 0
			set_control_par_str(%switchids__harppedals__sharps_btns[1], $CONTROL_PAR_TEXT, "[ I ]")
		case 1
			set_control_par_str(%switchids__harppedals__sharps_btns[1], $CONTROL_PAR_TEXT, "[  #  ]")
	end select
end function
function onuicontrol__switch__harppedal_3__b_sharp()
	%harppedal__sharp_switches[2] := $switch__harppedal_3__b_sharp
	select (%harppedal__sharp_switches[2])
		case 0
			set_control_par_str(%switchids__harppedals__sharps_btns[2], $CONTROL_PAR_TEXT, "[ VII ]")
		case 1
			set_control_par_str(%switchids__harppedals__sharps_btns[2], $CONTROL_PAR_TEXT, "[  #  ]")
	end select
end function
function onuicontrol__switch__harppedal_4__e_sharp()
	%harppedal__sharp_switches[3] := $switch__harppedal_4__e_sharp
	select (%harppedal__sharp_switches[3])
		case 0
			set_control_par_str(%switchids__harppedals__sharps_btns[3], $CONTROL_PAR_TEXT, "[ III ]")
		case 1
			set_control_par_str(%switchids__harppedals__sharps_btns[3], $CONTROL_PAR_TEXT, "[  #  ]")
	end select
end function
function onuicontrol__switch__harppedal_5__f_sharp()
	%harppedal__sharp_switches[4] := $switch__harppedal_5__f_sharp
	select (%harppedal__sharp_switches[4])
		case 0
			set_control_par_str(%switchids__harppedals__sharps_btns[4], $CONTROL_PAR_TEXT, "[ IV ]")
		case 1
			set_control_par_str(%switchids__harppedals__sharps_btns[4], $CONTROL_PAR_TEXT, "[  #  ]")
	end select
end function
function onuicontrol__switch__harppedal_6__g_sharp()
	%harppedal__sharp_switches[5] := $switch__harppedal_6__g_sharp
	select (%harppedal__sharp_switches[5])
		case 0
			set_control_par_str(%switchids__harppedals__sharps_btns[5], $CONTROL_PAR_TEXT, "[ V ]")
		case 1
			set_control_par_str(%switchids__harppedals__sharps_btns[5], $CONTROL_PAR_TEXT, "[  #  ]")
	end select
end function
function onuicontrol__switch__harppedal_7__a_sharp()
	%harppedal__sharp_switches[6] := $switch__harppedal_7__a_sharp
	select (%harppedal__sharp_switches[6])
		case 0
			set_control_par_str(%switchids__harppedals__sharps_btns[6], $CONTROL_PAR_TEXT, "[ VI ]")
		case 1
			set_control_par_str(%switchids__harppedals__sharps_btns[6], $CONTROL_PAR_TEXT, "[  #  ]")
	end select
end function

function onuicontrol__switch__harppedal_1__d_flat()
	%harppedal__flat_switches[0] := $switch__harppedal_1__d_flat
	select (%harppedal__flat_switches[0])
		case 0
			set_control_par_str(%switchids__harppedals__flats_btns[0], $CONTROL_PAR_TEXT, "[ II ]")
		case 1
			set_control_par_str(%switchids__harppedals__flats_btns[0], $CONTROL_PAR_TEXT, "[  b  ]")
	end select
end function
function onuicontrol__switch__harppedal_2__c_flat()
	%harppedal__flat_switches[1] := $switch__harppedal_2__c_flat
	select (%harppedal__flat_switches[1])
		case 0
			set_control_par_str(%switchids__harppedals__flats_btns[1], $CONTROL_PAR_TEXT, "[ I ]")
		case 1
			set_control_par_str(%switchids__harppedals__flats_btns[1], $CONTROL_PAR_TEXT, "[  b  ]")
	end select
end function
function onuicontrol__switch__harppedal_3__b_flat()
	%harppedal__flat_switches[2] := $switch__harppedal_3__b_flat
	select (%harppedal__flat_switches[2])
		case 0
			set_control_par_str(%switchids__harppedals__flats_btns[2], $CONTROL_PAR_TEXT, "[ VII ]")
		case 1
			set_control_par_str(%switchids__harppedals__flats_btns[2], $CONTROL_PAR_TEXT, "[  b  ]")
	end select
end function
function onuicontrol__switch__harppedal_4__e_flat()
	%harppedal__flat_switches[3] := $switch__harppedal_4__e_flat
	select (%harppedal__flat_switches[3])
		case 0
			set_control_par_str(%switchids__harppedals__flats_btns[3], $CONTROL_PAR_TEXT, "[ III ]")
		case 1
			set_control_par_str(%switchids__harppedals__flats_btns[3], $CONTROL_PAR_TEXT, "[  b  ]")
	end select
end function
function onuicontrol__switch__harppedal_5__f_flat()
	%harppedal__flat_switches[4] := $switch__harppedal_5__f_flat
	select (%harppedal__flat_switches[4])
		case 0
			set_control_par_str(%switchids__harppedals__flats_btns[4], $CONTROL_PAR_TEXT, "[ IV ]")
		case 1
			set_control_par_str(%switchids__harppedals__flats_btns[4], $CONTROL_PAR_TEXT, "[  b  ]")
	end select
end function
function onuicontrol__switch__harppedal_6__g_flat()
	%harppedal__flat_switches[5] := $switch__harppedal_6__g_flat
	select (%harppedal__flat_switches[5])
		case 0
			set_control_par_str(%switchids__harppedals__flats_btns[5], $CONTROL_PAR_TEXT, "[ V ]")
		case 1
			set_control_par_str(%switchids__harppedals__flats_btns[5], $CONTROL_PAR_TEXT, "[  b  ]")
	end select
end function
function onuicontrol__switch__harppedal_7__a_flat()
	%harppedal__flat_switches[6] := $switch__harppedal_7__a_flat
	select (%harppedal__flat_switches[6])
		case 0
			set_control_par_str(%switchids__harppedals__flats_btns[6], $CONTROL_PAR_TEXT, "[ VI ]")
		case 1
			set_control_par_str(%switchids__harppedals__flats_btns[6], $CONTROL_PAR_TEXT, "[  b  ]")
	end select
end function


function onuicontrol__epimoric_bitonal_module_onoff()
	call recalculate_tuning
	select ($epimoric_bitonal_module_onoff)
		case 1
			set_control_par_str(get_ui_id($epimoric_bitonal_module_onoff), $CONTROL_PAR_TEXT, "[  ON  ]")
			call recalculate_epimoric_bitonal_twinscale_module
		case 0
			set_control_par_str(get_ui_id($epimoric_bitonal_module_onoff), $CONTROL_PAR_TEXT, "[ off ]")
	end select
end function

function onuicontrol__epimoric_bitonal_twinscale_module__switch1()
	call recalculate_tuning
	select ($epimoric_bitonal_twinscale_module__switch1)
		case 0
			set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module__switch1), $CONTROL_PAR_TEXT, "[ progression ]")
		case 1
			set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module__switch1), $CONTROL_PAR_TEXT, "[ Ouroboros ]")
	end select
	call recalculate_epimoric_bitonal_twinscale_module
end function
function onuicontrol__epimoric_bitonal_twinscale_module__switch2()
	call recalculate_tuning
	select ($epimoric_bitonal_twinscale_module__switch2)
		case 0
			set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module__switch2), $CONTROL_PAR_TEXT, "( vanilla )")
		case 1
			set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module__switch2), $CONTROL_PAR_TEXT, "<  spicy  >")
	end select
	call recalculate_epimoric_bitonal_twinscale_module
end function
function onuicontrol__epimoric_bitonal_twinscale_module__switch3()
	call recalculate_tuning
	select ($epimoric_bitonal_twinscale_module__switch3)
		case 0
			set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module__switch3), $CONTROL_PAR_TEXT, "[ fake mirror ]")
		case 1
			set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module__switch3), $CONTROL_PAR_TEXT, "[ true mirror ]")
	end select
	call recalculate_epimoric_bitonal_twinscale_module
end function
function onuicontrol__epimoric_bitonal_twinscale_module__knob1()
	call recalculate_tuning
	$epimoric_bitonal_twinscale_module__arg1 := ($epimoric_bitonal_twinscale_module__knob1 * $number_of_pitch_classes) / 128
	if ($epimoric_bitonal_module_onoff = 1)
		$epimoric_bitonal_twinscale_module__arg1 := $epimoric_bitonal_twinscale_module__arg1 / 2
	end if
	$epimoric_bitonal_twinscale_module__knob1_orientation := $epimoric_bitonal_twinscale_module__knob1
	set_knob_label($epimoric_bitonal_twinscale_module__knob1, $epimoric_bitonal_twinscale_module__arg1)
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_bitonal_twinscale_module__knob2()
	call recalculate_tuning
	$epimoric_bitonal_twinscale_module__arg2 := ($epimoric_bitonal_twinscale_module__knob2 * $number_of_pitch_classes) / 128
	if ($epimoric_bitonal_module_onoff = 1)
		$epimoric_bitonal_twinscale_module__arg2 := $epimoric_bitonal_twinscale_module__arg2 / 2
	end if
	$epimoric_bitonal_twinscale_module__knob2_orientation := $epimoric_bitonal_twinscale_module__knob2

	set_knob_label($epimoric_bitonal_twinscale_module__knob2,$epimoric_bitonal_twinscale_module__arg2)
	call recalculate_epimoric_module
end function
function onuicontrol__epimoric_bitonal_twinscale_module___sort()
	call recalculate_tuning
	select ($epimoric_bitonal_twinscale_module___sort)
		case 0
			set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module___sort), $CONTROL_PAR_TEXT, "[ append ]")
		case 1
			set_control_par_str(get_ui_id($epimoric_bitonal_twinscale_module___sort), $CONTROL_PAR_TEXT, "[   sort   ]")
	end select
	call recalculate_epimoric_module
end function




function recalculate_panel_masterdetune()
	~panel_masterdetune_cent_value := (1200.0 * log (int_to_real($knob__masterdetune_numerator)/int_to_real($knob__masterdetune_denominator)) / log(2.0)) + int_to_real($knob__masterdetune_by_cents) + (int_to_real($knob__masterdetune_by_centpercents)/1000.0)
end function
function onuicontrol__knob__masterdetune_numerator()
	call recalculate_panel_masterdetune
end function
function onuicontrol__knob__masterdetune_denominator()
	call recalculate_panel_masterdetune
end function
function onuicontrol__knob__masterdetune_by_cents()
	call recalculate_panel_masterdetune
end function
function onuicontrol__knob__masterdetune_by_centpercents()
	call recalculate_panel_masterdetune
end function


function onuicontrol__knob__mastertransposition__equave()
end function
function onuicontrol__knob__mastertransposition__octave()
end function
function onuicontrol__knob__mastertransposition__steps()
end function
function onuicontrol__knob__mastertransposition_circleoffifths()
	~mastertransposition_quick_circleoffifths_detune_cents := int_to_real($knob__mastertransposition_circleoffifths) * 1200.0 * log(3.0/2.0)/log(2.0)
	$mastertransposition_quick_circleoffifths_step_compensation := - ($knob__mastertransposition_circleoffifths * (($number_of_pitch_classes+1) / 2))
end function



function onuicontrol__switch__octave_stretching()
	select ($switch__octave_stretching)
		case 1
			set_control_par_str(get_ui_id($switch__octave_stretching), $CONTROL_PAR_TEXT, "[ ON ]")
		case 0
			set_control_par_str(get_ui_id($switch__octave_stretching), $CONTROL_PAR_TEXT, "[off]")
	end select
end function

function onuicontrol__turn_on_global_cent_mask
	select ($turn_on_global_cent_mask)
		case 0
			set_control_par_str(get_ui_id($turn_on_global_cent_mask), $CONTROL_PAR_TEXT, "[off]")
		case 1
			set_control_par_str(get_ui_id($turn_on_global_cent_mask), $CONTROL_PAR_TEXT, "[ ON ]")
	end select
end function

on ui_control($gui_detune_specific_key_mcent_value_1)
	%panel_detune_specific_key__milicent_array[$panel__detune_specific_key__navigation_counter*$panel__detune_specific_key__num_of_ui_values + 0] := $gui_detune_specific_key_mcent_value_1
end on
on ui_control($gui_detune_specific_key_mcent_value_2)
	%panel_detune_specific_key__milicent_array[$panel__detune_specific_key__navigation_counter*$panel__detune_specific_key__num_of_ui_values + 1] := $gui_detune_specific_key_mcent_value_2
end on
on ui_control($gui_detune_specific_key_mcent_value_3)
	%panel_detune_specific_key__milicent_array[$panel__detune_specific_key__navigation_counter*$panel__detune_specific_key__num_of_ui_values + 2] := $gui_detune_specific_key_mcent_value_3
end on
on ui_control($gui_detune_specific_key_mcent_value_4)
	%panel_detune_specific_key__milicent_array[$panel__detune_specific_key__navigation_counter*$panel__detune_specific_key__num_of_ui_values + 3] := $gui_detune_specific_key_mcent_value_4
end on
on ui_control($gui_detune_specific_key_mcent_value_5)
	%panel_detune_specific_key__milicent_array[$panel__detune_specific_key__navigation_counter*$panel__detune_specific_key__num_of_ui_values + 4] := $gui_detune_specific_key_mcent_value_5
end on
on ui_control($gui_detune_specific_key_mcent_value_6)
	%panel_detune_specific_key__milicent_array[$panel__detune_specific_key__navigation_counter*$panel__detune_specific_key__num_of_ui_values + 5] := $gui_detune_specific_key_mcent_value_6
end on
on ui_control($gui_detune_specific_key_mcent_value_7)
	%panel_detune_specific_key__milicent_array[$panel__detune_specific_key__navigation_counter*$panel__detune_specific_key__num_of_ui_values + 6] := $gui_detune_specific_key_mcent_value_7
end on


function panel__detune_specific_key__cent_mask_par_visibility()
				$counter1 := 0
				while (($panel__detune_specific_key__num_of_ui_values*$panel__detune_specific_key__navigation_counter) + $counter1 < $panel__detune_specific_key__num_of_vars and $counter1 < $panel__detune_specific_key__num_of_ui_values)
					set_control_par(%detune_specific_key__uivalue_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					set_control_par(%detune_specific_key__label_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
					inc($counter1)
				end while
				while ($counter1 <  $panel__detune_specific_key__num_of_ui_values)
					set_control_par(%detune_specific_key__uivalue_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					set_control_par(%detune_specific_key__label_id[$counter1],$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
					inc($counter1)
				end while
end function

function update_centmask_displayed_values()
	$counter1 := 0
	while ($counter1 < $panel__detune_specific_key__num_of_ui_values)
		set_control_par(%detune_specific_key__uivalue_id[$counter1],$CONTROL_PAR_VALUE, %panel_detune_specific_key__milicent_array[$panel__detune_specific_key__navigation_counter*$panel__detune_specific_key__num_of_ui_values + $counter1])
		set_control_par_str (%detune_specific_key__label_id[$counter1],$CONTROL_PAR_TEXT, !note_class[($panel__detune_specific_key__navigation_counter*$panel__detune_specific_key__num_of_ui_values + $counter1) mod 12] & ($panel__detune_specific_key__navigation_counter*$panel__detune_specific_key__num_of_ui_values + $counter1) / 12 & "")
		inc($counter1)
	end while
end function

function update_centmask_navigation_buttons()
	if ($panel__detune_specific_key__navigation_counter # 0)
		set_control_par(get_ui_id($panel__detune_specific_key__navigate_left),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	else
		set_control_par(get_ui_id($panel__detune_specific_key__navigate_left),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	end if
	
	if ($panel__detune_specific_key__num_of_vars > $panel__detune_specific_key__num_of_ui_values*($panel__detune_specific_key__navigation_counter+1))
		set_control_par(get_ui_id($panel__detune_specific_key__navigate_right),$CONTROL_PAR_HIDE,$HIDE_PART_NOTHING)
	else
		set_control_par(get_ui_id($panel__detune_specific_key__navigate_right),$CONTROL_PAR_HIDE,$HIDE_WHOLE_CONTROL)
	end if
end function

function update_centmask_gui()
	while ($panel__detune_specific_key__num_of_vars <= $panel__detune_specific_key__navigation_counter * $panel__detune_specific_key__num_of_ui_values)
		dec($panel__detune_specific_key__navigation_counter)
	end while
	if ($panel__detune_specific_key__navigation_counter * $panel__detune_specific_key__num_of_ui_values > $panel__detune_specific_key__num_of_vars or $panel__detune_specific_key__navigation_counter < 0)
		$panel__detune_specific_key__navigation_counter := 0
	end if

	call update_centmask_navigation_buttons
	call update_centmask_displayed_values
	call panel__detune_specific_key__cent_mask_par_visibility
end function



function onuicontrol__panel__detune_specific_key__navigate_left()
	$panel__detune_specific_key__navigate_left := 0
	dec($panel__detune_specific_key__navigation_counter)
	if ($panel__detune_specific_key__navigation_counter < 0)
		$panel__detune_specific_key__navigation_counter := 0
	end if
	call update_centmask_gui
end function

function onuicontrol__panel__detune_specific_key__navigate_right()
	$panel__detune_specific_key__navigate_right := 0
	if ($panel__detune_specific_key__num_of_vars > ($panel__detune_specific_key__navigation_counter+1)*$panel__detune_specific_key__num_of_ui_values)
		inc($panel__detune_specific_key__navigation_counter)
	end if
	call update_centmask_gui
end function




function recalculate_dynamic_just_intonation()
		if ($switch__adaptive_pure_tuning = 0)
			exit
		end if
		{dynamic pure tuning:}
		if ($previous_event_note_pitch = $pompka__event_note)
				~event_note_pitch_hz := ?active_notes_hertz_table[$previous_event_note_pitch]
			exit
		end if
		{
		if ($dynamic_just_intonation__reset = 1)
			~event_note_pitch_hz := ~event_note_pitch_hz
			~previous_note_pitch_hz := ~event_note_pitch_hz
			$dynamic_just_intonation__reset := 0
			exit
		end if
		}
		$counter1 := 0
		while ($counter1 < num_elements(%held_notes_key_distance_vectors))
			%held_notes_key_distance_vectors[$counter1] := 0
			%held_notes_key_distance_modvectors[$counter1] := 0
			inc($counter1)
		end while

		$number_of_other_pressed_keys := 0
		$counter1 := 0
		while ($counter1 < 128)
			if (%custom_key_down_array[$counter1] = 1 and $counter1 # $pompka__event_note)
				%held_notes_key_distance_vectors[$number_of_other_pressed_keys] := ($counter1 - $pompka__event_note)
				%held_notes_key_distance_modvectors[$number_of_other_pressed_keys] := (((( $counter1 - $pompka__event_note) mod 12) + 12 ) mod 12)
				inc($number_of_other_pressed_keys)
			end if
			inc($counter1)
		end while

		if ($number_of_other_pressed_keys < 1)
			{~event_note_pitch_hz := ~event_note_pitch_hz}
			$pompka__logic_array_index := 0
			while ($pompka__logic_array_index < $pompka__logic_array_length)
				if (%pompka__logic_array[(4*$pompka__logic_array_index)+1] = 0)
					if (%pompka__logic_array[(4*$pompka__logic_array_index)+0] =  (((($pompka__event_note - $previous_event_note_pitch) mod 12) + 12) mod 12) )
						
						~event_note_pitch_hz := ?active_notes_hertz_table[$previous_event_note_pitch] * int_to_real(%pompka__logic_array[(4*$pompka__logic_array_index)+2]) / int_to_real(%pompka__logic_array[(4*$pompka__logic_array_index)+3])
					
						~event_note_pitch_hz := ~event_note_pitch_hz * exp(int_to_real((($pompka__event_note - $previous_event_note_pitch) - (((($pompka__event_note - $previous_event_note_pitch) mod 12) + 12) mod 12) ) / 12 ) * log(2.0))
					
						exit
					end if
				end if
				inc($pompka__logic_array_index)
			end while
		end if
		if ($number_of_other_pressed_keys >= 1)
			$pompka__logic_array_index := 0
			while ($pompka__logic_array_index < $pompka__logic_array_length)
				$counter1 := 0
				while ($counter1 < $number_of_other_pressed_keys)
					if (%held_notes_key_distance_modvectors[$counter1] = %pompka__logic_array[(4*$pompka__logic_array_index)+0])
						if (%pompka__logic_array[(4*$pompka__logic_array_index)+1] # 0)
							$counter2 := 0
							while ($counter2 < $number_of_other_pressed_keys)
								if (%held_notes_key_distance_modvectors[$counter2] = %pompka__logic_array[(4*$pompka__logic_array_index)+1])

									~event_note_pitch_hz := ?active_notes_hertz_table[$pompka__event_note + %held_notes_key_distance_vectors[$counter1]] * int_to_real(%pompka__logic_array[(4*$pompka__logic_array_index)+3]) / int_to_real(%pompka__logic_array[(4*$pompka__logic_array_index)+2])

									~event_note_pitch_hz := ~event_note_pitch_hz * exp(int_to_real(-(%held_notes_key_distance_vectors[$counter1] - %held_notes_key_distance_modvectors[$counter1] ) / 12 ) * log(2.0))
									exit
								end if
								inc($counter2)
							end while
						else

							~event_note_pitch_hz := ?active_notes_hertz_table[$pompka__event_note + %held_notes_key_distance_vectors[$counter1]] * int_to_real(%pompka__logic_array[(4*$pompka__logic_array_index)+3]) / int_to_real(%pompka__logic_array[(4*$pompka__logic_array_index)+2])
							
							~event_note_pitch_hz := ~event_note_pitch_hz * exp(int_to_real(-(%held_notes_key_distance_vectors[$counter1] - %held_notes_key_distance_modvectors[$counter1] ) / 12 ) * log(2.0))
							exit
						end if
					end if
					inc($counter1)
				end while
				inc($pompka__logic_array_index)
			end while
		end if
end function

on ui_control($switch__rpn_connect)
	select ($switch__rpn_connect)
		case 1
			set_control_par_str(get_ui_id($switch__rpn_connect), $CONTROL_PAR_TEXT, "[ ON ]")
		case 0
			set_control_par_str(get_ui_id($switch__rpn_connect), $CONTROL_PAR_TEXT, "[ off ]")
	end select
end on

function onuicontrol__switch__stacking_method()
		select ($switch__stacking_method)
			case 1
				set_control_par_str(get_ui_id($switch__stacking_method), $CONTROL_PAR_TEXT, "[ serial ]")
			case 0
				set_control_par_str(get_ui_id($switch__stacking_method), $CONTROL_PAR_TEXT, "[ parallel ]")
		end select
		call recalculate_tuning
end function

function onuicontrol__switch__interval_reduction()
		select ($switch__interval_reduction)
			case 1
				set_control_par_str(get_ui_id($switch__interval_reduction), $CONTROL_PAR_TEXT, "[ ON ]")
			case 0
				set_control_par_str(get_ui_id($switch__interval_reduction), $CONTROL_PAR_TEXT, "[off]")
		end select
		call recalculate_tuning
end function

function onuicontrol__switch__reduce_by_octave()
		select ($switch__reduce_by_octave)
			case 0
				set_control_par_str(get_ui_id($switch__reduce_by_octave), $CONTROL_PAR_TEXT, "[ equave ]")
			case 1
				set_control_par_str(get_ui_id($switch__reduce_by_octave), $CONTROL_PAR_TEXT, "[ octave ]")
		end select
		call recalculate_tuning
end function
function onuicontrol__switch__reduction_mode()
	select ($switch__reduction_mode)
		case 0
			set_control_par_str(get_ui_id($switch__reduction_mode), $CONTROL_PAR_TEXT, "[ normal ]")
		case 1
			set_control_par_str(get_ui_id($switch__reduction_mode), $CONTROL_PAR_TEXT, "[ alias ]")
	end select
		call recalculate_tuning
end function
function onuicontrol__switch__quantize_to_12edo()
	select ($switch__quantize_to_12edo)
		case 0
			set_control_par_str(get_ui_id($switch__quantize_to_12edo), $CONTROL_PAR_TEXT, "[ no ]")
		case 1
			set_control_par_str(get_ui_id($switch__quantize_to_12edo), $CONTROL_PAR_TEXT, "[ Yes ]")
	end select
end function
function onuicontrol__switch__adaptive_pure_tuning()
	$dynamic_just_intonation__reset := 1
	select ($switch__adaptive_pure_tuning)
		case 0
			set_control_par_str(get_ui_id($switch__adaptive_pure_tuning), $CONTROL_PAR_TEXT, "[ off ]")
		case 1
			set_control_par_str(get_ui_id($switch__adaptive_pure_tuning), $CONTROL_PAR_TEXT, "[ ON ]")
	end select
end function
function onuicontrol__switch__quantizebeatstobpm()
	select ($switch__quantizebeatstobpm)
		case 0
			set_control_par_str(get_ui_id($switch__quantizebeatstobpm), $CONTROL_PAR_TEXT, "[ off ]")
		case 1
			set_control_par_str(get_ui_id($switch__quantizebeatstobpm), $CONTROL_PAR_TEXT, "[ ON ]")
	end select
end function
function onuicontrol__efg_remove_step_duplicates()
		select ($efg_remove_step_duplicates)
			case 1
				set_control_par_str(get_ui_id($efg_remove_step_duplicates), $CONTROL_PAR_TEXT, "[ ON ]")
			case 0
				set_control_par_str(get_ui_id($efg_remove_step_duplicates), $CONTROL_PAR_TEXT, "[off]")
		end select
		call recalculate_tuning
end function









function jm_rpn_receive()
	select($rpn_relative_port_index)
		case 2
			exit
		case 3
			exit
		case 4
			exit
		case 5
			exit
		case 6
			exit
		case 7
			exit
		case 249
			exit
		case 250
			exit
		case 425
			exit
		case 426
			exit
		case 427
			exit
		case 428
			exit
		case 429
			exit
		case 430
			exit
	end select

	set_control_par(%ui_id_rpn_krosownica[$rpn_relative_port_index], $CONTROL_PAR_VALUE, $rpn_connect__receive_value  + get_control_par(%ui_id_rpn_krosownica[$rpn_relative_port_index], $CONTROL_PAR_MIN_VALUE)) 

	select ($rpn_relative_port_index)
		case 0
			select ($rpn_connect__receive_value)
					case 1
						$paradigms_menu := 800
					case 2
						$paradigms_menu := 808
					case 3
						$paradigms_menu := 98
					case 4
						$paradigms_menu := 99
					case 5
						$paradigms_menu := 1100
					case 6
						$paradigms_menu := 1001
					case 7
						$paradigms_menu := 1002
					case 8
						$paradigms_menu := 1101
					case 9
						$paradigms_menu := 801
					case 10
						$paradigms_menu := 1935
					case 11
						$paradigms_menu := 3
					case 12
						$paradigms_menu := 720
					case 13
						$paradigms_menu := 1000
					case 14
						$paradigms_menu := 1111
				end select
				call onuicontrol__paradigms_menu
		case 1
			call onuicontrol__knob__concert_pitch__midi_key
		case 2
			call onuicontrol__switch__play_nearest_zone
		case 3
			call onuicontrol__switch__play_new_id
		case 4
			call onuicontrol__switch__relative_event_tuning
		case 5
			call onuicontrol__switch__use_white_keys
		case 6
			call onuicontrol__switch__use_black_keys
		case 7
			call onuicontrol__switch__monochrome_behaviour
		case 8
			call onuicontrol__knob__common_note_transposition__origin_axis1
		case 9
			call onuicontrol__knob__common_note_transposition__target_axis1
		case 10
			call onuicontrol__knob__common_note_transposition__origin_axis2
		case 11
			call onuicontrol__knob__common_note_transposition__target_axis2
		case 12
			call onuicontrol__knob__common_note_transposition__origin_axis3
		case 13
			call onuicontrol__knob__common_note_transposition__target_axis3
		case 14
			call onuicontrol__knob__common_note_transposition__origin_axis4
		case 15
			call onuicontrol__knob__common_note_transposition__target_axis4
		case 16
			call onuicontrol__knob__common_note_transposition__origin_axis5
		case 17
			call onuicontrol__knob__common_note_transposition__target_axis5
		case 18
			call onuicontrol__knob__common_note_transposition__origin_axis6
		case 19
			call onuicontrol__knob__common_note_transposition__target_axis6
		case 20
			call onuicontrol__epimoric_module_onoff
		case 21
			call onuicontrol__epimoric_module_A__switch1
		case 22
			call onuicontrol__epimoric_module_A__switch2
		case 23
			call onuicontrol__epimoric_module_A__switch3
		case 24
			call onuicontrol__epimoric_module_A__knob1
		case 25
			call onuicontrol__epimoric_module_A__knob2
		case 26
			call onuicontrol__epimoric_module_A__knob3
		case 27
			call onuicontrol__epimoric_module_A__knob4
		case 28
			call onuicontrol__epimoric_module_B__switch1
		case 29
			call onuicontrol__epimoric_module_B__switch2
		case 30
			call onuicontrol__epimoric_module_B__switch3
		case 31
			call onuicontrol__epimoric_module_B__knob1
		case 32
			call onuicontrol__epimoric_module_B__knob2
		case 33
			call onuicontrol__epimoric_module_B__knob3
		case 34
			call onuicontrol__epimoric_module_B__knob4
		case 35
			call onuicontrol__epimoric_module_C__switch1
		case 36
			call onuicontrol__epimoric_module_C__switch2
		case 37
			call onuicontrol__epimoric_module_C__switch3
		case 38
			call onuicontrol__epimoric_module_C__knob1
		case 39
			call onuicontrol__epimoric_module_C__knob2
		case 40
			call onuicontrol__epimoric_module_C__knob3
		case 41
			call onuicontrol__epimoric_module_C__knob4
		case 42
			call onuicontrol__switch__transpositionbyinterval_panel_A
		case 43
			call onuicontrol__knob__transpositionbyinterval_panel_A_iterations
		case 44
			call onuicontrol__knob__transpositionbyinterval_panel_A_numerator
		case 45
			call onuicontrol__knob__transpositionbyinterval_panel_A_denominator
		case 46
			call onuicontrol__knob__transpositionbyinterval_panel_A_power_numerator
		case 47
			call onuicontrol__knob__transpositionbyinterval_panel_A_power_denominator
		case 48
			call onuicontrol__knob__transpositionbyinterval_panel_A_step_compensation
		case 49
			call onuicontrol__switch__transpositionbyinterval_panel_B
		case 50
			call onuicontrol__knob__transpositionbyinterval_panel_B_iterations
		case 51
			call onuicontrol__knob__transpositionbyinterval_panel_B_numerator
		case 52
			call onuicontrol__knob__transpositionbyinterval_panel_B_denominator
		case 53
			call onuicontrol__knob__transpositionbyinterval_panel_B_power_numerator
		case 54
			call onuicontrol__knob__transpositionbyinterval_panel_B_power_denominator
		case 55
			call onuicontrol__knob__transpositionbyinterval_panel_B_step_compensation
		case 56
			call onuicontrol__switch__transpositionbyinterval_panel_C
		case 57
			call onuicontrol__knob__transpositionbyinterval_panel_C_iterations
		case 58
			call onuicontrol__knob__transpositionbyinterval_panel_C_numerator
		case 59
			call onuicontrol__knob__transpositionbyinterval_panel_C_denominator
		case 60
			call onuicontrol__knob__transpositionbyinterval_panel_C_power_numerator
		case 61
			call onuicontrol__knob__transpositionbyinterval_panel_C_power_denominator
		case 62
			call onuicontrol__knob__transpositionbyinterval_panel_C_step_compensation
		case 63
			call onuicontrol__switch__transpositionbyinterval_panel_D
		case 64
			call onuicontrol__knob__transpositionbyinterval_panel_D_iterations
		case 65
			call onuicontrol__knob__transpositionbyinterval_panel_D_numerator
		case 66
			call onuicontrol__knob__transpositionbyinterval_panel_D_denominator
		case 67
			call onuicontrol__knob__transpositionbyinterval_panel_D_power_numerator
		case 68
			call onuicontrol__knob__transpositionbyinterval_panel_D_power_denominator
		case 69
			call onuicontrol__knob__transpositionbyinterval_panel_D_step_compensation
		case 70
			call onuicontrol__switch__transpositionbyinterval_panel_E
		case 71
			call onuicontrol__knob__transpositionbyinterval_panel_E_iterations
		case 72
			call onuicontrol__knob__transpositionbyinterval_panel_E_numerator
		case 73
			call onuicontrol__knob__transpositionbyinterval_panel_E_denominator
		case 74
			call onuicontrol__knob__transpositionbyinterval_panel_E_power_numerator
		case 75
			call onuicontrol__knob__transpositionbyinterval_panel_E_power_denominator
		case 76
			call onuicontrol__knob__transpositionbyinterval_panel_E_step_compensation
		case 77
			call onuicontrol__knob__whammy_panel_A_interval_numerator
		case 78
			call onuicontrol__knob__whammy_panel_A_interval_denominator
		case 79
			call onuicontrol__knob__whammy_panel_A_power_numerator
		case 80
			call onuicontrol__knob__whammy_panel_A_power_denominator
		case 81
			call onuicontrol__knob__whammy_panel_A_amount_interval_denominator
		case 82
			call onuicontrol__knob__whammy_panel_A_amount_power_numerator
		case 83
			call onuicontrol__knob__whammy_panel_B_interval_numerator
		case 84
			call onuicontrol__knob__whammy_panel_B_interval_denominator
		case 85
			call onuicontrol__knob__whammy_panel_B_power_numerator
		case 86
			call onuicontrol__knob__whammy_panel_B_power_denominator
		case 87
			call onuicontrol__knob__whammy_panel_B_amount_interval_denominator
		case 88
			call onuicontrol__knob__whammy_panel_B_amount_power_numerator
		case 89
			call onuicontrol__knob__whammy_panel_C_interval_numerator
		case 90
			call onuicontrol__knob__whammy_panel_C_interval_denominator
		case 91
			call onuicontrol__knob__whammy_panel_C_power_numerator
		case 92
			call onuicontrol__knob__whammy_panel_C_power_denominator
		case 93
			call onuicontrol__knob__whammy_panel_C_amount_interval_denominator
		case 94
			call onuicontrol__knob__whammy_panel_C_amount_power_numerator
		case 95
			call onuicontrol__knob__whammy_panel_D_interval_numerator
		case 96
			call onuicontrol__knob__whammy_panel_D_interval_denominator
		case 97
			call onuicontrol__knob__whammy_panel_D_power_numerator
		case 98
			call onuicontrol__knob__whammy_panel_D_power_denominator
		case 99
			call onuicontrol__knob__whammy_panel_D_amount_interval_denominator
		case 100
			call onuicontrol__knob__whammy_panel_D_amount_power_numerator
		case 101
			call onuicontrol__knob__whammy_panel_E_interval_numerator
		case 102
			call onuicontrol__knob__whammy_panel_E_interval_denominator
		case 103
			call onuicontrol__knob__whammy_panel_E_power_numerator
		case 104
			call onuicontrol__knob__whammy_panel_E_power_denominator
		case 105
			call onuicontrol__knob__whammy_panel_E_amount_interval_denominator
		case 106
			call onuicontrol__knob__whammy_panel_E_amount_power_numerator
		case 107
			call onuicontrol__switch_transposition_by_monzo
		case 108
			call onuicontrol__knob___monzo_powers_of_2
		case 109
			call onuicontrol__knob___monzo_powers_of_3
		case 110
			call onuicontrol__knob___monzo_powers_of_5
		case 111
			call onuicontrol__knob___monzo_powers_of_7
		case 112
			call onuicontrol__knob___monzo_powers_of_11
		case 113
			call onuicontrol__knob___monzo_powers_of_13
		case 114
			call onuicontrol__knob___monzo_powers_of_17
		case 115
			call onuicontrol__knob___monzo_powers_of_19
		case 116
			call onuicontrol__knob___monzo_powers_of_23
		case 117
			call onuicontrol__knob___monzo_powers_of_29
		case 118
			call onuicontrol__knob___monzo_powers_of_31
		case 119
			call onuicontrol__knob___monzo_powers_of_37
		case 120
			call onuicontrol__knob___monzo_powers_of_41
		case 121
			call onuicontrol__knob___monzo_powers_of_43
		case 122
			call onuicontrol__knob___monzo_powers_of_47
		case 123
			call onuicontrol__knob___monzo_powers_of_53
		case 124
			call onuicontrol__knob___monzo_powers_of_59
		case 125
			call onuicontrol__knob___monzo_powers_of_61
		case 126
			call onuicontrol__knob__number_of_pitch_classes__tune_by_cents
		case 127
			call onuicontrol__panel__tune_by_cents__navigate_left
		case 128
			call onuicontrol__panel__tune_by_cents__navigate_right
		case 129
			call onuicontrol__knob__number_of_pitch_classes__jiknobs
		case 130
			call onuicontrol__panel__jiknobs_nav0
		case 131
			call onuicontrol__panel__jiknobs_nav1
		case 132
			call onuicontrol__panel__jiknobs_nav2
		case 133
			call onuicontrol__panel__jiknobs_nav3
		case 134
			call onuicontrol__knob_jiknobs__numerator1
		case 135
			call onuicontrol__knob_jiknobs__numerator2
		case 136
			call onuicontrol__knob_jiknobs__numerator3
		case 137
			call onuicontrol__knob_jiknobs__numerator4
		case 138
			call onuicontrol__knob_jiknobs__numerator5
		case 139
			call onuicontrol__knob_jiknobs__numerator6
		case 140
			call onuicontrol__knob_jiknobs__numerator7
		case 141
			call onuicontrol__knob_jiknobs__numerator8
		case 142
			call onuicontrol__knob_jiknobs__numerator9
		case 143
			call onuicontrol__knob_jiknobs__numerator10
		case 144
			call onuicontrol__knob_jiknobs__numerator11
		case 145
			call onuicontrol__knob_jiknobs__numerator12
		case 146
			call onuicontrol__knob_jiknobs__numerator13
		case 147
			call onuicontrol__knob_jiknobs__numerator14
		case 148
			call onuicontrol__knob_jiknobs__numerator15
		case 149
			call onuicontrol__knob_jiknobs__numerator16
		case 150
			call onuicontrol__knob_jiknobs__numerator17
		case 151
			call onuicontrol__knob_jiknobs__numerator18
		case 152
			call onuicontrol__knob_jiknobs__numerator19
		case 153
			call onuicontrol__knob_jiknobs__numerator20
		case 154
			call onuicontrol__knob_jiknobs__numerator21
		case 155
			call onuicontrol__knob_jiknobs__numerator22
		case 156
			call onuicontrol__knob_jiknobs__numerator23
		case 157
			call onuicontrol__knob_jiknobs__numerator24
		case 158
			call onuicontrol__knob_jiknobs__denominator1
		case 159
			call onuicontrol__knob_jiknobs__denominator2
		case 160
			call onuicontrol__knob_jiknobs__denominator3
		case 161
			call onuicontrol__knob_jiknobs__denominator4
		case 162
			call onuicontrol__knob_jiknobs__denominator5
		case 163
			call onuicontrol__knob_jiknobs__denominator6
		case 164
			call onuicontrol__knob_jiknobs__denominator7
		case 165
			call onuicontrol__knob_jiknobs__denominator8
		case 166
			call onuicontrol__knob_jiknobs__denominator9
		case 167
			call onuicontrol__knob_jiknobs__denominator10
		case 168
			call onuicontrol__knob_jiknobs__denominator11
		case 169
			call onuicontrol__knob_jiknobs__denominator12
		case 170
			call onuicontrol__knob_jiknobs__denominator13
		case 171
			call onuicontrol__knob_jiknobs__denominator14
		case 172
			call onuicontrol__knob_jiknobs__denominator15
		case 173
			call onuicontrol__knob_jiknobs__denominator16
		case 174
			call onuicontrol__knob_jiknobs__denominator17
		case 175
			call onuicontrol__knob_jiknobs__denominator18
		case 176
			call onuicontrol__knob_jiknobs__denominator19
		case 177
			call onuicontrol__knob_jiknobs__denominator20
		case 178
			call onuicontrol__knob_jiknobs__denominator21
		case 179
			call onuicontrol__knob_jiknobs__denominator22
		case 180
			call onuicontrol__knob_jiknobs__denominator23
		case 181
			call onuicontrol__knob_jiknobs__denominator24
		case 182
			call onuicontrol__knob__number_of_pitch_classes__expknobs
		case 183
			call onuicontrol__panel__expknobs_nav0
		case 184
			call onuicontrol__panel__expknobs_nav1
		case 185
			call onuicontrol__panel__expknobs_nav2
		case 186
			call onuicontrol__panel__expknobs_nav3
		case 187
			call onuicontrol__knob_expknobs__numerator1
		case 188
			call onuicontrol__knob_expknobs__numerator2
		case 189
			call onuicontrol__knob_expknobs__numerator3
		case 190
			call onuicontrol__knob_expknobs__numerator4
		case 191
			call onuicontrol__knob_expknobs__numerator5
		case 192
			call onuicontrol__knob_expknobs__numerator6
		case 193
			call onuicontrol__knob_expknobs__numerator7
		case 194
			call onuicontrol__knob_expknobs__numerator8
		case 195
			call onuicontrol__knob_expknobs__numerator9
		case 196
			call onuicontrol__knob_expknobs__numerator10
		case 197
			call onuicontrol__knob_expknobs__numerator11
		case 198
			call onuicontrol__knob_expknobs__numerator12
		case 199
			call onuicontrol__knob_expknobs__numerator13
		case 200
			call onuicontrol__knob_expknobs__numerator14
		case 201
			call onuicontrol__knob_expknobs__numerator15
		case 202
			call onuicontrol__knob_expknobs__numerator16
		case 203
			call onuicontrol__knob_expknobs__numerator17
		case 204
			call onuicontrol__knob_expknobs__numerator18
		case 205
			call onuicontrol__knob_expknobs__numerator19
		case 206
			call onuicontrol__knob_expknobs__numerator20
		case 207
			call onuicontrol__knob_expknobs__numerator21
		case 208
			call onuicontrol__knob_expknobs__numerator22
		case 209
			call onuicontrol__knob_expknobs__numerator23
		case 210
			call onuicontrol__knob_expknobs__numerator24
		case 211
			call onuicontrol__knob_expknobs__denominator1
		case 212
			call onuicontrol__knob_expknobs__denominator2
		case 213
			call onuicontrol__knob_expknobs__denominator3
		case 214
			call onuicontrol__knob_expknobs__denominator4
		case 215
			call onuicontrol__knob_expknobs__denominator5
		case 216
			call onuicontrol__knob_expknobs__denominator6
		case 217
			call onuicontrol__knob_expknobs__denominator7
		case 218
			call onuicontrol__knob_expknobs__denominator8
		case 219
			call onuicontrol__knob_expknobs__denominator9
		case 220
			call onuicontrol__knob_expknobs__denominator10
		case 221
			call onuicontrol__knob_expknobs__denominator11
		case 222
			call onuicontrol__knob_expknobs__denominator12
		case 223
			call onuicontrol__knob_expknobs__denominator13
		case 224
			call onuicontrol__knob_expknobs__denominator14
		case 225
			call onuicontrol__knob_expknobs__denominator15
		case 226
			call onuicontrol__knob_expknobs__denominator16
		case 227
			call onuicontrol__knob_expknobs__denominator17
		case 228
			call onuicontrol__knob_expknobs__denominator18
		case 229
			call onuicontrol__knob_expknobs__denominator19
		case 230
			call onuicontrol__knob_expknobs__denominator20
		case 231
			call onuicontrol__knob_expknobs__denominator21
		case 232
			call onuicontrol__knob_expknobs__denominator22
		case 233
			call onuicontrol__knob_expknobs__denominator23
		case 234
			call onuicontrol__knob_expknobs__denominator24
		case 235
			call onuicontrol__efg_generator_1
		case 236
			call onuicontrol__efg_generator_2
		case 237
			call onuicontrol__efg_generator_3
		case 238
			call onuicontrol__efg_generator_4
		case 239
			call onuicontrol__efg_generator_5
		case 240
			call onuicontrol__knob_cps_n__generator_set_size
		case 241
			call onuicontrol__knob_cps_k__num_of_elem_in_combination
		case 242
			call onuicontrol__cps_identity
		case 243
			call onuicontrol__knob_cps_generator_1
		case 244
			call onuicontrol__knob_cps_generator_2
		case 245
			call onuicontrol__knob_cps_generator_3
		case 246
			call onuicontrol__knob_cps_generator_4
		case 247
			call onuicontrol__knob_cps_generator_5
		case 248
			call onuicontrol__knob_cps_generator_6
		case 249
			call onuicontrol__knob__script_min
		case 250
			call onuicontrol__knob__script_max
		case 251
			call onuicontrol__knob__number_of_pitch_classes__tune_by_ji_ratios_precise
		case 252
			call onuicontrol__panel__tune_by_ji_ratios_precise__navigate_left
		case 253
			call onuicontrol__panel__tune_by_ji_ratios_precise__navigate_right
		case 254
			call onuicontrol__knob__number_of_pitch_classes__tune_by_exp_ratios
		case 255
			call onuicontrol__panel__tune_by_exponent_ratios__navigate_left
		case 256
			call onuicontrol__panel__tune_by_exponent_ratios__navigate_right
		case 257
			call onuicontrol__knob__number_of_pitch_classes__freqratio
		case 258
			call onuicontrol__panel__freqratio__navigate_left
		case 259
			call onuicontrol__panel__freqratio__navigate_right
		case 260
			call onuicontrol__knob__zalewski_qnz_deformation_numerator
		case 261
			call onuicontrol__knob__zalewski_qnz_deformation_denominator
		case 262
			call onuicontrol__knob__zalewski_qnz_order
		case 263
			call onuicontrol__knob__zalewski__cursor_position
		case 264
			call onuicontrol__knob__zalewski__var_a
		case 265
			call onuicontrol__knob__zalewski__var_b
		case 266
			call onuicontrol__knob__zalewski__var_c
		case 267
			call onuicontrol__knob__zalewski__template_ratio_numerator
		case 268
			call onuicontrol__knob__zalewski__template_ratio_denominator
		case 269
			call onuicontrol__gui_zalewski__struktura_odbita
		case 270
			call onuicontrol__gui_zalewski__struktura_przeciwna
		case 271
			call onuicontrol__gui_zalewski__clear_all
		case 272
			call onuicontrol__gui_zalewski__backspace
		case 273
			call onuicontrol__gui_zalewski__spacja
		case 274
			call onuicontrol__gui_zalewski__template_ratio
		case 275
			call onuicontrol__gui_zalewski__plus
		case 276
			call onuicontrol__gui_zalewski__minus
		case 277
			call onuicontrol__gui_zalewski__razy
		case 278
			call onuicontrol__gui_zalewski__przecinek
		case 279
			call onuicontrol__gui_zalewski__decimal_places_separator
		case 280
			call onuicontrol__gui_zalewski__podzielic
		case 281
			call onuicontrol__gui_zalewski__numpad_0
		case 282
			call onuicontrol__gui_zalewski__numpad_1
		case 283
			call onuicontrol__gui_zalewski__numpad_2
		case 284
			call onuicontrol__gui_zalewski__numpad_3
		case 285
			call onuicontrol__gui_zalewski__numpad_4
		case 286
			call onuicontrol__gui_zalewski__numpad_5
		case 287
			call onuicontrol__gui_zalewski__numpad_6
		case 288
			call onuicontrol__gui_zalewski__numpad_7
		case 289
			call onuicontrol__gui_zalewski__numpad_8
		case 290
			call onuicontrol__gui_zalewski__numpad_9
		case 291
			call onuicontrol__gui_zalewski__var_a
		case 292
			call onuicontrol__gui_zalewski__var_b
		case 293
			call onuicontrol__gui_zalewski__var_c
		case 294
			call onuicontrol__knob__generator_interval_numerator
		case 295
			call onuicontrol__knob__generator_interval_denominator
		case 296
			call onuicontrol__knob__generator_interval_power_numerator
		case 297
			call onuicontrol__knob__generator_interval_power_denominator
		case 298
			call onuicontrol__knob__periodandgenerator__stack_up
		case 299
			call onuicontrol__knob__periodandgenerator__num_of_untempered_intervals
		case 300
			call onuicontrol__knob__periodandgenerator__stack_down
		case 301
			call onuicontrol__knob__comma_interval_numerator
		case 302
			call onuicontrol__knob__comma_interval_denominator
		case 303
			call onuicontrol__knob__comma_fraction_numerator
		case 304
			call onuicontrol__knob__comma_fraction_denominator
		case 305
			call onuicontrol__knob__epimoric_generators__gradus1
		case 306
			call onuicontrol__knob__epimoric_generators__modus1
		case 307
			call onuicontrol__epimoric_generators_utonal_switch_1
		case 308
			call onuicontrol__epimoric_generators_utonal_switch_2
		case 309
			call onuicontrol__knob__epimoric_generators__gradus2
		case 310
			call onuicontrol__knob__epimoric_generators__modus2
		case 311
			call onuicontrol__knob__edtuning_fracofequave_numerator
		case 312
			call onuicontrol__knob__edtuning_fracofequave_denominator
		case 313
			call onuicontrol__knob__edtuning_detune_step_by_cents
		case 314
			{call onuicontrol__knob__edtuning_detune_step_by_centpercent}
		case 315
			call onuicontrol__setup_module_visibility
		case 316
			call onuicontrol__scalesmithing_module_visibility
		case 317
			call onuicontrol__modulation_module_visibility
		case 318
			call onuicontrol__detune_module_visibility
		case 319
			call onuicontrol__pedaling_module_visibility
		case 320
			call onuicontrol__pedaling_module_tab_sus_visibility
		case 321
			call onuicontrol__pedaling_module_tab_harp_visibility
		case 322
			call onuicontrol__pedaling_module_tab_epimoric_visibility
		case 323
			call onuicontrol__modulation_module__transposition_common_note__visibility
		case 324
			call onuicontrol__modulation_module__transposition_epimoric__visibility
		case 325
			call onuicontrol__modulation_module__transposition_interval__visibility
		case 326
			call onuicontrol__modulation_module__transposition_whammy__visibility
		case 327
			call onuicontrol__modulation_module__monzo__visibility
		case 328
			call onuicontrol__uiswitch__suspedal_1
		case 329
			call onuicontrol__uiswitch__suspedal_2
		case 330
			call onuicontrol__uiswitch__suspedal_3
		case 331
			call onuicontrol__uiswitch__suspedal_4
		case 332
			call onuicontrol__uiswitch__suspedal_5
		case 333
			call onuicontrol__uiswitch__suspedal_6
		case 334
			call onuicontrol__uiswitch__suspedal_7
		case 335
			call onuicontrol__uiswitch__suspedal_8
		case 336
			call onuicontrol__uiswitch__suspedal_9
		case 337
			call onuicontrol__uiswitch__suspedal_10
		case 338
			call onuicontrol__uiswitch__suspedal_11
		case 339
			call onuicontrol__uiswitch__suspedal_12
		case 340
			call onuicontrol__knob__harppedal_1__d_sharp_numerator
		case 341
			call onuicontrol__knob__harppedal_1__d_sharp_denominator
		case 342
			call onuicontrol__knob__harppedal_2__c_sharp_numerator
		case 343
			call onuicontrol__knob__harppedal_2__c_sharp_denominator
		case 344
			call onuicontrol__knob__harppedal_3__b_sharp_numerator
		case 345
			call onuicontrol__knob__harppedal_3__b_sharp_denominator
		case 346
			call onuicontrol__knob__harppedal_4__e_sharp_numerator
		case 347
			call onuicontrol__knob__harppedal_4__e_sharp_denominator
		case 348
			call onuicontrol__knob__harppedal_5__f_sharp_numerator
		case 349
			call onuicontrol__knob__harppedal_5__f_sharp_denominator
		case 350
			call onuicontrol__knob__harppedal_6__g_sharp_numerator
		case 351
			call onuicontrol__knob__harppedal_6__g_sharp_denominator
		case 352
			call onuicontrol__knob__harppedal_7__a_sharp_numerator
		case 353
			call onuicontrol__knob__harppedal_7__a_sharp_denominator
		case 354
			call onuicontrol__knob__harppedal_1__d_flat_numerator
		case 355
			call onuicontrol__knob__harppedal_1__d_flat_denominator
		case 356
			call onuicontrol__knob__harppedal_2__c_flat_numerator
		case 357
			call onuicontrol__knob__harppedal_2__c_flat_denominator
		case 358
			call onuicontrol__knob__harppedal_3__b_flat_numerator
		case 359
			call onuicontrol__knob__harppedal_3__b_flat_denominator
		case 360
			call onuicontrol__knob__harppedal_4__e_flat_numerator
		case 361
			call onuicontrol__knob__harppedal_4__e_flat_denominator
		case 362
			call onuicontrol__knob__harppedal_5__f_flat_numerator
		case 363
			call onuicontrol__knob__harppedal_5__f_flat_denominator
		case 364
			call onuicontrol__knob__harppedal_6__g_flat_numerator
		case 365
			call onuicontrol__knob__harppedal_6__g_flat_denominator
		case 366
			call onuicontrol__knob__harppedal_7__a_flat_numerator
		case 367
			call onuicontrol__knob__harppedal_7__a_flat_denominator
		case 368
			call onuicontrol__switch__harppedal_1__d_sharp
		case 369
			call onuicontrol__switch__harppedal_2__c_sharp
		case 370
			call onuicontrol__switch__harppedal_3__b_sharp
		case 371
			call onuicontrol__switch__harppedal_4__e_sharp
		case 372
			call onuicontrol__switch__harppedal_5__f_sharp
		case 373
			call onuicontrol__switch__harppedal_6__g_sharp
		case 374
			call onuicontrol__switch__harppedal_7__a_sharp
		case 375
			call onuicontrol__switch__harppedal_1__d_flat
		case 376
			call onuicontrol__switch__harppedal_2__c_flat
		case 377
			call onuicontrol__switch__harppedal_3__b_flat
		case 378
			call onuicontrol__switch__harppedal_4__e_flat
		case 379
			call onuicontrol__switch__harppedal_5__f_flat
		case 380
			call onuicontrol__switch__harppedal_6__g_flat
		case 381
			call onuicontrol__switch__harppedal_7__a_flat
		case 382
			call onuicontrol__epimoric_bitonal_module_onoff
		case 383
			call onuicontrol__epimoric_bitonal_twinscale_module__switch1
		case 384
			call onuicontrol__epimoric_bitonal_twinscale_module__switch2
		case 385
			call onuicontrol__epimoric_bitonal_twinscale_module__switch3
		case 386
			call onuicontrol__epimoric_bitonal_twinscale_module__knob1
		case 387
			call onuicontrol__epimoric_bitonal_twinscale_module__knob2
		case 388
			call onuicontrol__epimoric_bitonal_twinscale_module___sort
		case 389
			call onuicontrol__knob__masterdetune_numerator
		case 390
			call onuicontrol__knob__masterdetune_denominator
		case 391
			call onuicontrol__knob__masterdetune_by_cents
		case 392
			call onuicontrol__knob__masterdetune_by_centpercents
		case 393
			call onuicontrol__knob__mastertransposition__equave
		case 394
			call onuicontrol__knob__mastertransposition__octave
		case 395
			call onuicontrol__knob__mastertransposition__steps
		case 396
			call onuicontrol__knob__mastertransposition_circleoffifths
		case 397
			call onuicontrol__switch__octave_stretching
		case 398
			call onuicontrol__turn_on_global_cent_mask
		case 399
			call onuicontrol__panel__detune_specific_key__navigate_left
		case 400
			call onuicontrol__panel__detune_specific_key__navigate_right
		case 401
			call onuicontrol__knob__interval_of_equivalence_numerator
		case 402
			call onuicontrol__knob__interval_of_equivalence_denominator
		case 403
			call onuicontrol__knob__interval_of_equivalence_power_numerator
		case 404
			call onuicontrol__knob__interval_of_equivalence_power_denominator
		case 405
			call onuicontrol__switch__stacking_method
		case 406
			call onuicontrol__switch__interval_reduction
		case 407
			call onuicontrol__switch__reduce_by_octave
		case 408
			call onuicontrol__switch__reduction_mode
		case 409
			call onuicontrol__switch__quantize_to_12edo
		case 410
			call onuicontrol__switch__adaptive_pure_tuning
		case 411
			call onuicontrol__switch__quantizebeatstobpm
		case 412
			call onuicontrol__switch_common_note_transposition_module
		case 413
			call onuicontrol__whammy_module_onoff
		case 415 to 421
			%rpn_connect__chunk[$rpn_relative_port_index- 415] := $rpn_connect__receive_value
			wait(1000)
			$ui_value_diapason_hz := (%rpn_connect__chunk[6] * 128) + (%rpn_connect__chunk[5] * 128 * 128) + (%rpn_connect__chunk[4] * 128 * 128 * 128) + (%rpn_connect__chunk[3] * 128 * 128 * 128 * 128) + (%rpn_connect__chunk[2] * 128 * 128 * 128 * 128 * 128) + (%rpn_connect__chunk[1] * 128 * 128 * 128 * 128 * 128 * 128) + (%rpn_connect__chunk[0] * 128 * 128 * 128 * 128 * 128 * 128 * 128)
		case 425 to 429
			{
			$dummy_knob_semitone
			$dummy_knob_velocity
			$dummy_knob_chroma
			$dummy_knob_detune_value_cents
			$dummy_knob_detune_value_cent_percentage
			}
		case 430
			call onuicontrol__switch__ksp_mode_0changetune_1eventpartune
		case 431
			call onuicontrol__efg_remove_step_duplicates
	end select
end function





on ui_control($knob__concert_pitch__midi_key)
	call onuicontrol__knob__concert_pitch__midi_key
	$rpn_relative_port_index := 1
	call jm_rpn_send
end on
on ui_control($switch__play_nearest_zone)
	call onuicontrol__switch__play_nearest_zone
	$rpn_relative_port_index := 2
	call jm_rpn_send
end on
on ui_control($switch__play_new_id)
	call onuicontrol__switch__play_new_id
	$rpn_relative_port_index := 3
	call jm_rpn_send
end on
on ui_control($switch__relative_event_tuning)
	call onuicontrol__switch__relative_event_tuning
	$rpn_relative_port_index := 4
	call jm_rpn_send
end on
on ui_control($switch__ksp_mode_0changetune_1eventpartune)
	call onuicontrol__switch__ksp_mode_0changetune_1eventpartune
	$rpn_relative_port_index := 430
	call jm_rpn_send
end on
on ui_control($switch__use_white_keys)
	call onuicontrol__switch__use_white_keys
	$rpn_relative_port_index := 5
	call jm_rpn_send
end on
on ui_control($switch__use_black_keys)
	call onuicontrol__switch__use_black_keys
	$rpn_relative_port_index := 6
	call jm_rpn_send
end on
on ui_control($switch__monochrome_behaviour)
	call onuicontrol__switch__monochrome_behaviour
	$rpn_relative_port_index := 7
	call jm_rpn_send
end on
on ui_control($switch_common_note_transposition_module)
	call onuicontrol__switch_common_note_transposition_module
	$rpn_relative_port_index := 412
	call jm_rpn_send
end on
on ui_control($knob__common_note_transposition__origin_axis1)
	call onuicontrol__knob__common_note_transposition__origin_axis1
	$rpn_relative_port_index := 8
	call jm_rpn_send
end on
on ui_control($knob__common_note_transposition__target_axis1)
	call onuicontrol__knob__common_note_transposition__target_axis1
	$rpn_relative_port_index := 9
	call jm_rpn_send
end on
on ui_control($knob__common_note_transposition__origin_axis2)
	call onuicontrol__knob__common_note_transposition__origin_axis2
	$rpn_relative_port_index := 10
	call jm_rpn_send
end on
on ui_control($knob__common_note_transposition__target_axis2)
	call onuicontrol__knob__common_note_transposition__target_axis2
	$rpn_relative_port_index := 11
	call jm_rpn_send
end on
on ui_control($knob__common_note_transposition__origin_axis3)
	call onuicontrol__knob__common_note_transposition__origin_axis3
	$rpn_relative_port_index := 12
	call jm_rpn_send
end on
on ui_control($knob__common_note_transposition__target_axis3)
	call onuicontrol__knob__common_note_transposition__target_axis3
	$rpn_relative_port_index := 13
	call jm_rpn_send
end on
on ui_control($knob__common_note_transposition__origin_axis4)
	call onuicontrol__knob__common_note_transposition__origin_axis4
	$rpn_relative_port_index := 14
	call jm_rpn_send
end on
on ui_control($knob__common_note_transposition__target_axis4)
	call onuicontrol__knob__common_note_transposition__target_axis4
	$rpn_relative_port_index := 15
	call jm_rpn_send
end on
on ui_control($knob__common_note_transposition__origin_axis5)
	call onuicontrol__knob__common_note_transposition__origin_axis5
	$rpn_relative_port_index := 16
	call jm_rpn_send
end on
on ui_control($knob__common_note_transposition__target_axis5)
	call onuicontrol__knob__common_note_transposition__target_axis5
	$rpn_relative_port_index := 17
	call jm_rpn_send
end on
on ui_control($knob__common_note_transposition__origin_axis6)
	call onuicontrol__knob__common_note_transposition__origin_axis6
	$rpn_relative_port_index := 18
	call jm_rpn_send
end on
on ui_control($knob__common_note_transposition__target_axis6)
	call onuicontrol__knob__common_note_transposition__target_axis6
	$rpn_relative_port_index := 19
	call jm_rpn_send
end on
on ui_control($epimoric_module_onoff)
	call onuicontrol__epimoric_module_onoff
	$rpn_relative_port_index := 20
	call jm_rpn_send
end on
on ui_control($epimoric_module_A__switch1)
	call onuicontrol__epimoric_module_A__switch1
	$rpn_relative_port_index := 21
	call jm_rpn_send
end on
on ui_control($epimoric_module_A__switch2)
	call onuicontrol__epimoric_module_A__switch2
	$rpn_relative_port_index := 22
	call jm_rpn_send
end on
on ui_control($epimoric_module_A__switch3)
	call onuicontrol__epimoric_module_A__switch3
	$rpn_relative_port_index := 23
	call jm_rpn_send
end on
on ui_control($epimoric_module_A__knob1)
	call onuicontrol__epimoric_module_A__knob1
	$rpn_relative_port_index := 24
	call jm_rpn_send
end on
on ui_control($epimoric_module_A__knob2)
	call onuicontrol__epimoric_module_A__knob2
	$rpn_relative_port_index := 25
	call jm_rpn_send
end on
on ui_control($epimoric_module_A__knob3)
	call onuicontrol__epimoric_module_A__knob3
	$rpn_relative_port_index := 26
	call jm_rpn_send
end on
on ui_control($epimoric_module_A__knob4)
	call onuicontrol__epimoric_module_A__knob4
	$rpn_relative_port_index := 27
	call jm_rpn_send
end on
on ui_control($epimoric_module_B__switch1)
	call onuicontrol__epimoric_module_B__switch1
	$rpn_relative_port_index := 28
	call jm_rpn_send
end on
on ui_control($epimoric_module_B__switch2)
	call onuicontrol__epimoric_module_B__switch2
	$rpn_relative_port_index := 29
	call jm_rpn_send
end on
on ui_control($epimoric_module_B__switch3)
	call onuicontrol__epimoric_module_B__switch3
	$rpn_relative_port_index := 30
	call jm_rpn_send
end on
on ui_control($epimoric_module_B__knob1)
	call onuicontrol__epimoric_module_B__knob1
	$rpn_relative_port_index := 31
	call jm_rpn_send
end on
on ui_control($epimoric_module_B__knob2)
	call onuicontrol__epimoric_module_B__knob2
	$rpn_relative_port_index := 32
	call jm_rpn_send
end on
on ui_control($epimoric_module_B__knob3)
	call onuicontrol__epimoric_module_B__knob3
	$rpn_relative_port_index := 33
	call jm_rpn_send
end on
on ui_control($epimoric_module_B__knob4)
	call onuicontrol__epimoric_module_B__knob4
	$rpn_relative_port_index := 34
	call jm_rpn_send
end on
on ui_control($epimoric_module_C__switch1)
	call onuicontrol__epimoric_module_C__switch1
	$rpn_relative_port_index := 35
	call jm_rpn_send
end on
on ui_control($epimoric_module_C__switch2)
	call onuicontrol__epimoric_module_C__switch2
	$rpn_relative_port_index := 36
	call jm_rpn_send
end on
on ui_control($epimoric_module_C__switch3)
	call onuicontrol__epimoric_module_C__switch3
	$rpn_relative_port_index := 37
	call jm_rpn_send
end on
on ui_control($epimoric_module_C__knob1)
	call onuicontrol__epimoric_module_C__knob1
	$rpn_relative_port_index := 38
	call jm_rpn_send
end on
on ui_control($epimoric_module_C__knob2)
	call onuicontrol__epimoric_module_C__knob2
	$rpn_relative_port_index := 39
	call jm_rpn_send
end on
on ui_control($epimoric_module_C__knob3)
	call onuicontrol__epimoric_module_C__knob3
	$rpn_relative_port_index := 40
	call jm_rpn_send
end on
on ui_control($epimoric_module_C__knob4)
	call onuicontrol__epimoric_module_C__knob4
	$rpn_relative_port_index := 41
	call jm_rpn_send
end on
on ui_control($switch__transpositionbyinterval_panel_A)
	call onuicontrol__switch__transpositionbyinterval_panel_A
	$rpn_relative_port_index := 42
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_A_iterations)
	call onuicontrol__knob__transpositionbyinterval_panel_A_iterations
	$rpn_relative_port_index := 43
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_A_numerator)
	call onuicontrol__knob__transpositionbyinterval_panel_A_numerator
	$rpn_relative_port_index := 44
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_A_denominator)
	call onuicontrol__knob__transpositionbyinterval_panel_A_denominator
	$rpn_relative_port_index := 45
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_A_power_numerator)
	call onuicontrol__knob__transpositionbyinterval_panel_A_power_numerator
	$rpn_relative_port_index := 46
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_A_power_denominator)
	call onuicontrol__knob__transpositionbyinterval_panel_A_power_denominator
	$rpn_relative_port_index := 47
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_A_step_compensation)
	call onuicontrol__knob__transpositionbyinterval_panel_A_step_compensation
	$rpn_relative_port_index := 48
	call jm_rpn_send
end on
on ui_control($switch__transpositionbyinterval_panel_B)
	call onuicontrol__switch__transpositionbyinterval_panel_B
	$rpn_relative_port_index := 49
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_B_iterations)
	call onuicontrol__knob__transpositionbyinterval_panel_B_iterations
	$rpn_relative_port_index := 50
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_B_numerator)
	call onuicontrol__knob__transpositionbyinterval_panel_B_numerator
	$rpn_relative_port_index := 51
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_B_denominator)
	call onuicontrol__knob__transpositionbyinterval_panel_B_denominator
	$rpn_relative_port_index := 52
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_B_power_numerator)
	call onuicontrol__knob__transpositionbyinterval_panel_B_power_numerator
	$rpn_relative_port_index := 53
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_B_power_denominator)
	call onuicontrol__knob__transpositionbyinterval_panel_B_power_denominator
	$rpn_relative_port_index := 54
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_B_step_compensation)
	call onuicontrol__knob__transpositionbyinterval_panel_B_step_compensation
	$rpn_relative_port_index := 55
	call jm_rpn_send
end on
on ui_control($switch__transpositionbyinterval_panel_C)
	call onuicontrol__switch__transpositionbyinterval_panel_C
	$rpn_relative_port_index := 56
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_C_iterations)
	call onuicontrol__knob__transpositionbyinterval_panel_C_iterations
	$rpn_relative_port_index := 57
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_C_numerator)
	call onuicontrol__knob__transpositionbyinterval_panel_C_numerator
	$rpn_relative_port_index := 58
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_C_denominator)
	call onuicontrol__knob__transpositionbyinterval_panel_C_denominator
	$rpn_relative_port_index := 59
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_C_power_numerator)
	call onuicontrol__knob__transpositionbyinterval_panel_C_power_numerator
	$rpn_relative_port_index := 60
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_C_power_denominator)
	call onuicontrol__knob__transpositionbyinterval_panel_C_power_denominator
	$rpn_relative_port_index := 61
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_C_step_compensation)
	call onuicontrol__knob__transpositionbyinterval_panel_C_step_compensation
	$rpn_relative_port_index := 62
	call jm_rpn_send
end on
on ui_control($switch__transpositionbyinterval_panel_D)
	call onuicontrol__switch__transpositionbyinterval_panel_D
	$rpn_relative_port_index := 63
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_D_iterations)
	call onuicontrol__knob__transpositionbyinterval_panel_D_iterations
	$rpn_relative_port_index := 64
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_D_numerator)
	call onuicontrol__knob__transpositionbyinterval_panel_D_numerator
	$rpn_relative_port_index := 65
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_D_denominator)
	call onuicontrol__knob__transpositionbyinterval_panel_D_denominator
	$rpn_relative_port_index := 66
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_D_power_numerator)
	call onuicontrol__knob__transpositionbyinterval_panel_D_power_numerator
	$rpn_relative_port_index := 67
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_D_power_denominator)
	call onuicontrol__knob__transpositionbyinterval_panel_D_power_denominator
	$rpn_relative_port_index := 68
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_D_step_compensation)
	call onuicontrol__knob__transpositionbyinterval_panel_D_step_compensation
	$rpn_relative_port_index := 69
	call jm_rpn_send
end on
on ui_control($switch__transpositionbyinterval_panel_E)
	call onuicontrol__switch__transpositionbyinterval_panel_E
	$rpn_relative_port_index := 70
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_E_iterations)
	call onuicontrol__knob__transpositionbyinterval_panel_E_iterations
	$rpn_relative_port_index := 71
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_E_numerator)
	call onuicontrol__knob__transpositionbyinterval_panel_E_numerator
	$rpn_relative_port_index := 72
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_E_denominator)
	call onuicontrol__knob__transpositionbyinterval_panel_E_denominator
	$rpn_relative_port_index := 73
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_E_power_numerator)
	call onuicontrol__knob__transpositionbyinterval_panel_E_power_numerator
	$rpn_relative_port_index := 74
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_E_power_denominator)
	call onuicontrol__knob__transpositionbyinterval_panel_E_power_denominator
	$rpn_relative_port_index := 75
	call jm_rpn_send
end on
on ui_control($knob__transpositionbyinterval_panel_E_step_compensation)
	call onuicontrol__knob__transpositionbyinterval_panel_E_step_compensation
	$rpn_relative_port_index := 76
	call jm_rpn_send
end on


on ui_control($whammy_module_onoff)
	call onuicontrol__whammy_module_onoff
	$rpn_relative_port_index := 413
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_A_interval_numerator)
	call onuicontrol__knob__whammy_panel_A_interval_numerator
	$rpn_relative_port_index := 77
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_A_interval_denominator)
	call onuicontrol__knob__whammy_panel_A_interval_denominator
	$rpn_relative_port_index := 78
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_A_power_numerator)
	call onuicontrol__knob__whammy_panel_A_power_numerator
	$rpn_relative_port_index := 79
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_A_power_denominator)
	call onuicontrol__knob__whammy_panel_A_power_denominator
	$rpn_relative_port_index := 80
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_A_amount_interval_denominator)
	call onuicontrol__knob__whammy_panel_A_amount_interval_denominator
	$rpn_relative_port_index := 81
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_A_amount_power_numerator)
	call onuicontrol__knob__whammy_panel_A_amount_power_numerator
	$rpn_relative_port_index := 82
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_B_interval_numerator)
	call onuicontrol__knob__whammy_panel_B_interval_numerator
	$rpn_relative_port_index := 83
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_B_interval_denominator)
	call onuicontrol__knob__whammy_panel_B_interval_denominator
	$rpn_relative_port_index := 84
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_B_power_numerator)
	call onuicontrol__knob__whammy_panel_B_power_numerator
	$rpn_relative_port_index := 85
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_B_power_denominator)
	call onuicontrol__knob__whammy_panel_B_power_denominator
	$rpn_relative_port_index := 86
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_B_amount_interval_denominator)
	call onuicontrol__knob__whammy_panel_B_amount_interval_denominator
	$rpn_relative_port_index := 87
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_B_amount_power_numerator)
	call onuicontrol__knob__whammy_panel_B_amount_power_numerator
	$rpn_relative_port_index := 88
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_C_interval_numerator)
	call onuicontrol__knob__whammy_panel_C_interval_numerator
	$rpn_relative_port_index := 89
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_C_interval_denominator)
	call onuicontrol__knob__whammy_panel_C_interval_denominator
	$rpn_relative_port_index := 90
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_C_power_numerator)
	call onuicontrol__knob__whammy_panel_C_power_numerator
	$rpn_relative_port_index := 91
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_C_power_denominator)
	call onuicontrol__knob__whammy_panel_C_power_denominator
	$rpn_relative_port_index := 92
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_C_amount_interval_denominator)
	call onuicontrol__knob__whammy_panel_C_amount_interval_denominator
	$rpn_relative_port_index := 93
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_C_amount_power_numerator)
	call onuicontrol__knob__whammy_panel_C_amount_power_numerator
	$rpn_relative_port_index := 94
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_D_interval_numerator)
	call onuicontrol__knob__whammy_panel_D_interval_numerator
	$rpn_relative_port_index := 95
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_D_interval_denominator)
	call onuicontrol__knob__whammy_panel_D_interval_denominator
	$rpn_relative_port_index := 96
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_D_power_numerator)
	call onuicontrol__knob__whammy_panel_D_power_numerator
	$rpn_relative_port_index := 97
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_D_power_denominator)
	call onuicontrol__knob__whammy_panel_D_power_denominator
	$rpn_relative_port_index := 98
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_D_amount_interval_denominator)
	call onuicontrol__knob__whammy_panel_D_amount_interval_denominator
	$rpn_relative_port_index := 99
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_D_amount_power_numerator)
	call onuicontrol__knob__whammy_panel_D_amount_power_numerator
	$rpn_relative_port_index := 100
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_E_interval_numerator)
	call onuicontrol__knob__whammy_panel_E_interval_numerator
	$rpn_relative_port_index := 101
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_E_interval_denominator)
	call onuicontrol__knob__whammy_panel_E_interval_denominator
	$rpn_relative_port_index := 102
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_E_power_numerator)
	call onuicontrol__knob__whammy_panel_E_power_numerator
	$rpn_relative_port_index := 103
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_E_power_denominator)
	call onuicontrol__knob__whammy_panel_E_power_denominator
	$rpn_relative_port_index := 104
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_E_amount_interval_denominator)
	call onuicontrol__knob__whammy_panel_E_amount_interval_denominator
	$rpn_relative_port_index := 105
	call jm_rpn_send
end on
on ui_control($knob__whammy_panel_E_amount_power_numerator)
	call onuicontrol__knob__whammy_panel_E_amount_power_numerator
	$rpn_relative_port_index := 106
	call jm_rpn_send
end on

on ui_control($switch_transposition_by_monzo)
	call onuicontrol__switch_transposition_by_monzo
	$rpn_relative_port_index := 107
	call jm_rpn_send
end on
on ui_control($knob___monzo_powers_of_2)
	call onuicontrol__knob___monzo_powers_of_2
	$rpn_relative_port_index := 108
	call jm_rpn_send
end on
on ui_control($knob___monzo_powers_of_3)
	call onuicontrol__knob___monzo_powers_of_3
	$rpn_relative_port_index := 109
	call jm_rpn_send
end on
on ui_control($knob___monzo_powers_of_5)
	call onuicontrol__knob___monzo_powers_of_5
	$rpn_relative_port_index := 110
	call jm_rpn_send
end on
on ui_control($knob___monzo_powers_of_7)
	call onuicontrol__knob___monzo_powers_of_7
	$rpn_relative_port_index := 111
	call jm_rpn_send
end on
on ui_control($knob___monzo_powers_of_11)
	call onuicontrol__knob___monzo_powers_of_11
	$rpn_relative_port_index := 112
	call jm_rpn_send
end on
on ui_control($knob___monzo_powers_of_13)
	call onuicontrol__knob___monzo_powers_of_13
	$rpn_relative_port_index := 113
	call jm_rpn_send
end on
on ui_control($knob___monzo_powers_of_17)
	call onuicontrol__knob___monzo_powers_of_17
	$rpn_relative_port_index := 114
	call jm_rpn_send
end on
on ui_control($knob___monzo_powers_of_19)
	call onuicontrol__knob___monzo_powers_of_19
	$rpn_relative_port_index := 115
	call jm_rpn_send
end on
on ui_control($knob___monzo_powers_of_23)
	call onuicontrol__knob___monzo_powers_of_23
	$rpn_relative_port_index := 116
	call jm_rpn_send
end on
on ui_control($knob___monzo_powers_of_29)
	call onuicontrol__knob___monzo_powers_of_29
	$rpn_relative_port_index := 117
	call jm_rpn_send
end on
on ui_control($knob___monzo_powers_of_31)
	call onuicontrol__knob___monzo_powers_of_31
	$rpn_relative_port_index := 118
	call jm_rpn_send
end on
on ui_control($knob___monzo_powers_of_37)
	call onuicontrol__knob___monzo_powers_of_37
	$rpn_relative_port_index := 119
	call jm_rpn_send
end on
on ui_control($knob___monzo_powers_of_41)
	call onuicontrol__knob___monzo_powers_of_41
	$rpn_relative_port_index := 120
	call jm_rpn_send
end on
on ui_control($knob___monzo_powers_of_43)
	call onuicontrol__knob___monzo_powers_of_43
	$rpn_relative_port_index := 121
	call jm_rpn_send
end on
on ui_control($knob___monzo_powers_of_47)
	call onuicontrol__knob___monzo_powers_of_47
	$rpn_relative_port_index := 122
	call jm_rpn_send
end on
on ui_control($knob___monzo_powers_of_53)
	call onuicontrol__knob___monzo_powers_of_53
	$rpn_relative_port_index := 123
	call jm_rpn_send
end on
on ui_control($knob___monzo_powers_of_59)
	call onuicontrol__knob___monzo_powers_of_59
	$rpn_relative_port_index := 124
	call jm_rpn_send
end on
on ui_control($knob___monzo_powers_of_61)
	call onuicontrol__knob___monzo_powers_of_61
	$rpn_relative_port_index := 125
	call jm_rpn_send
end on
on ui_control($knob__number_of_pitch_classes__tune_by_cents)
	call onuicontrol__knob__number_of_pitch_classes__tune_by_cents
	$rpn_relative_port_index := 126
	call jm_rpn_send
end on
on ui_control($panel__tune_by_cents__navigate_left)
	call onuicontrol__panel__tune_by_cents__navigate_left
	$rpn_relative_port_index := 127
	call jm_rpn_send
end on
on ui_control($panel__tune_by_cents__navigate_right)
	call onuicontrol__panel__tune_by_cents__navigate_right
	$rpn_relative_port_index := 128
	call jm_rpn_send
end on
on ui_control($knob__number_of_pitch_classes__jiknobs)
	call onuicontrol__knob__number_of_pitch_classes__jiknobs
	$rpn_relative_port_index := 129
	call jm_rpn_send
end on
on ui_control($panel__jiknobs_nav0)
	call onuicontrol__panel__jiknobs_nav0
	$rpn_relative_port_index := 130
	call jm_rpn_send
end on
on ui_control($panel__jiknobs_nav1)
	call onuicontrol__panel__jiknobs_nav1
	$rpn_relative_port_index := 131
	call jm_rpn_send
end on
on ui_control($panel__jiknobs_nav2)
	call onuicontrol__panel__jiknobs_nav2
	$rpn_relative_port_index := 132
	call jm_rpn_send
end on
on ui_control($panel__jiknobs_nav3)
	call onuicontrol__panel__jiknobs_nav3
	$rpn_relative_port_index := 133
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator1)
	call onuicontrol__knob_jiknobs__numerator1
	$rpn_relative_port_index := 134
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator2)
	call onuicontrol__knob_jiknobs__numerator2
	$rpn_relative_port_index := 135
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator3)
	call onuicontrol__knob_jiknobs__numerator3
	$rpn_relative_port_index := 136
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator4)
	call onuicontrol__knob_jiknobs__numerator4
	$rpn_relative_port_index := 137
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator5)
	call onuicontrol__knob_jiknobs__numerator5
	$rpn_relative_port_index := 138
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator6)
	call onuicontrol__knob_jiknobs__numerator6
	$rpn_relative_port_index := 139
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator7)
	call onuicontrol__knob_jiknobs__numerator7
	$rpn_relative_port_index := 140
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator8)
	call onuicontrol__knob_jiknobs__numerator8
	$rpn_relative_port_index := 141
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator9)
	call onuicontrol__knob_jiknobs__numerator9
	$rpn_relative_port_index := 142
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator10)
	call onuicontrol__knob_jiknobs__numerator10
	$rpn_relative_port_index := 143
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator11)
	call onuicontrol__knob_jiknobs__numerator11
	$rpn_relative_port_index := 144
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator12)
	call onuicontrol__knob_jiknobs__numerator12
	$rpn_relative_port_index := 145
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator13)
	call onuicontrol__knob_jiknobs__numerator13
	$rpn_relative_port_index := 146
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator14)
	call onuicontrol__knob_jiknobs__numerator14
	$rpn_relative_port_index := 147
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator15)
	call onuicontrol__knob_jiknobs__numerator15
	$rpn_relative_port_index := 148
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator16)
	call onuicontrol__knob_jiknobs__numerator16
	$rpn_relative_port_index := 149
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator17)
	call onuicontrol__knob_jiknobs__numerator17
	$rpn_relative_port_index := 150
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator18)
	call onuicontrol__knob_jiknobs__numerator18
	$rpn_relative_port_index := 151
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator19)
	call onuicontrol__knob_jiknobs__numerator19
	$rpn_relative_port_index := 152
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator20)
	call onuicontrol__knob_jiknobs__numerator20
	$rpn_relative_port_index := 153
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator21)
	call onuicontrol__knob_jiknobs__numerator21
	$rpn_relative_port_index := 154
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator22)
	call onuicontrol__knob_jiknobs__numerator22
	$rpn_relative_port_index := 155
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator23)
	call onuicontrol__knob_jiknobs__numerator23
	$rpn_relative_port_index := 156
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__numerator24)
	call onuicontrol__knob_jiknobs__numerator24
	$rpn_relative_port_index := 157
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator1)
	call onuicontrol__knob_jiknobs__denominator1
	$rpn_relative_port_index := 158
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator2)
	call onuicontrol__knob_jiknobs__denominator2
	$rpn_relative_port_index := 159
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator3)
	call onuicontrol__knob_jiknobs__denominator3
	$rpn_relative_port_index := 160
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator4)
	call onuicontrol__knob_jiknobs__denominator4
	$rpn_relative_port_index := 161
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator5)
	call onuicontrol__knob_jiknobs__denominator5
	$rpn_relative_port_index := 162
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator6)
	call onuicontrol__knob_jiknobs__denominator6
	$rpn_relative_port_index := 163
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator7)
	call onuicontrol__knob_jiknobs__denominator7
	$rpn_relative_port_index := 164
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator8)
	call onuicontrol__knob_jiknobs__denominator8
	$rpn_relative_port_index := 165
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator9)
	call onuicontrol__knob_jiknobs__denominator9
	$rpn_relative_port_index := 166
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator10)
	call onuicontrol__knob_jiknobs__denominator10
	$rpn_relative_port_index := 167
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator11)
	call onuicontrol__knob_jiknobs__denominator11
	$rpn_relative_port_index := 168
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator12)
	call onuicontrol__knob_jiknobs__denominator12
	$rpn_relative_port_index := 169
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator13)
	call onuicontrol__knob_jiknobs__denominator13
	$rpn_relative_port_index := 170
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator14)
	call onuicontrol__knob_jiknobs__denominator14
	$rpn_relative_port_index := 171
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator15)
	call onuicontrol__knob_jiknobs__denominator15
	$rpn_relative_port_index := 172
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator16)
	call onuicontrol__knob_jiknobs__denominator16
	$rpn_relative_port_index := 173
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator17)
	call onuicontrol__knob_jiknobs__denominator17
	$rpn_relative_port_index := 174
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator18)
	call onuicontrol__knob_jiknobs__denominator18
	$rpn_relative_port_index := 175
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator19)
	call onuicontrol__knob_jiknobs__denominator19
	$rpn_relative_port_index := 176
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator20)
	call onuicontrol__knob_jiknobs__denominator20
	$rpn_relative_port_index := 177
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator21)
	call onuicontrol__knob_jiknobs__denominator21
	$rpn_relative_port_index := 178
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator22)
	call onuicontrol__knob_jiknobs__denominator22
	$rpn_relative_port_index := 179
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator23)
	call onuicontrol__knob_jiknobs__denominator23
	$rpn_relative_port_index := 180
	call jm_rpn_send
end on
on ui_control($knob_jiknobs__denominator24)
	call onuicontrol__knob_jiknobs__denominator24
	$rpn_relative_port_index := 181
	call jm_rpn_send
end on
on ui_control($knob__number_of_pitch_classes__expknobs)
	call onuicontrol__knob__number_of_pitch_classes__expknobs
	$rpn_relative_port_index := 182
	call jm_rpn_send
end on
on ui_control($panel__expknobs_nav0)
	call onuicontrol__panel__expknobs_nav0
	$rpn_relative_port_index := 183
	call jm_rpn_send
end on
on ui_control($panel__expknobs_nav1)
	call onuicontrol__panel__expknobs_nav1
	$rpn_relative_port_index := 184
	call jm_rpn_send
end on
on ui_control($panel__expknobs_nav2)
	call onuicontrol__panel__expknobs_nav2
	$rpn_relative_port_index := 185
	call jm_rpn_send
end on
on ui_control($panel__expknobs_nav3)
	call onuicontrol__panel__expknobs_nav3
	$rpn_relative_port_index := 186
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator1)
	call onuicontrol__knob_expknobs__numerator1
	$rpn_relative_port_index := 187
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator2)
	call onuicontrol__knob_expknobs__numerator2
	$rpn_relative_port_index := 188
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator3)
	call onuicontrol__knob_expknobs__numerator3
	$rpn_relative_port_index := 189
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator4)
	call onuicontrol__knob_expknobs__numerator4
	$rpn_relative_port_index := 190
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator5)
	call onuicontrol__knob_expknobs__numerator5
	$rpn_relative_port_index := 191
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator6)
	call onuicontrol__knob_expknobs__numerator6
	$rpn_relative_port_index := 192
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator7)
	call onuicontrol__knob_expknobs__numerator7
	$rpn_relative_port_index := 193
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator8)
	call onuicontrol__knob_expknobs__numerator8
	$rpn_relative_port_index := 194
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator9)
	call onuicontrol__knob_expknobs__numerator9
	$rpn_relative_port_index := 195
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator10)
	call onuicontrol__knob_expknobs__numerator10
	$rpn_relative_port_index := 196
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator11)
	call onuicontrol__knob_expknobs__numerator11
	$rpn_relative_port_index := 197
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator12)
	call onuicontrol__knob_expknobs__numerator12
	$rpn_relative_port_index := 198
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator13)
	call onuicontrol__knob_expknobs__numerator13
	$rpn_relative_port_index := 199
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator14)
	call onuicontrol__knob_expknobs__numerator14
	$rpn_relative_port_index := 200
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator15)
	call onuicontrol__knob_expknobs__numerator15
	$rpn_relative_port_index := 201
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator16)
	call onuicontrol__knob_expknobs__numerator16
	$rpn_relative_port_index := 202
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator17)
	call onuicontrol__knob_expknobs__numerator17
	$rpn_relative_port_index := 203
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator18)
	call onuicontrol__knob_expknobs__numerator18
	$rpn_relative_port_index := 204
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator19)
	call onuicontrol__knob_expknobs__numerator19
	$rpn_relative_port_index := 205
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator20)
	call onuicontrol__knob_expknobs__numerator20
	$rpn_relative_port_index := 206
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator21)
	call onuicontrol__knob_expknobs__numerator21
	$rpn_relative_port_index := 207
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator22)
	call onuicontrol__knob_expknobs__numerator22
	$rpn_relative_port_index := 208
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator23)
	call onuicontrol__knob_expknobs__numerator23
	$rpn_relative_port_index := 209
	call jm_rpn_send
end on
on ui_control($knob_expknobs__numerator24)
	call onuicontrol__knob_expknobs__numerator24
	$rpn_relative_port_index := 210
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator1)
	call onuicontrol__knob_expknobs__denominator1
	$rpn_relative_port_index := 211
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator2)
	call onuicontrol__knob_expknobs__denominator2
	$rpn_relative_port_index := 212
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator3)
	call onuicontrol__knob_expknobs__denominator3
	$rpn_relative_port_index := 213
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator4)
	call onuicontrol__knob_expknobs__denominator4
	$rpn_relative_port_index := 214
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator5)
	call onuicontrol__knob_expknobs__denominator5
	$rpn_relative_port_index := 215
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator6)
	call onuicontrol__knob_expknobs__denominator6
	$rpn_relative_port_index := 216
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator7)
	call onuicontrol__knob_expknobs__denominator7
	$rpn_relative_port_index := 217
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator8)
	call onuicontrol__knob_expknobs__denominator8
	$rpn_relative_port_index := 218
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator9)
	call onuicontrol__knob_expknobs__denominator9
	$rpn_relative_port_index := 219
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator10)
	call onuicontrol__knob_expknobs__denominator10
	$rpn_relative_port_index := 220
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator11)
	call onuicontrol__knob_expknobs__denominator11
	$rpn_relative_port_index := 221
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator12)
	call onuicontrol__knob_expknobs__denominator12
	$rpn_relative_port_index := 222
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator13)
	call onuicontrol__knob_expknobs__denominator13
	$rpn_relative_port_index := 223
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator14)
	call onuicontrol__knob_expknobs__denominator14
	$rpn_relative_port_index := 224
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator15)
	call onuicontrol__knob_expknobs__denominator15
	$rpn_relative_port_index := 225
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator16)
	call onuicontrol__knob_expknobs__denominator16
	$rpn_relative_port_index := 226
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator17)
	call onuicontrol__knob_expknobs__denominator17
	$rpn_relative_port_index := 227
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator18)
	call onuicontrol__knob_expknobs__denominator18
	$rpn_relative_port_index := 228
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator19)
	call onuicontrol__knob_expknobs__denominator19
	$rpn_relative_port_index := 229
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator20)
	call onuicontrol__knob_expknobs__denominator20
	$rpn_relative_port_index := 230
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator21)
	call onuicontrol__knob_expknobs__denominator21
	$rpn_relative_port_index := 231
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator22)
	call onuicontrol__knob_expknobs__denominator22
	$rpn_relative_port_index := 232
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator23)
	call onuicontrol__knob_expknobs__denominator23
	$rpn_relative_port_index := 233
	call jm_rpn_send
end on
on ui_control($knob_expknobs__denominator24)
	call onuicontrol__knob_expknobs__denominator24
	$rpn_relative_port_index := 234
	call jm_rpn_send
end on
on ui_control($efg_generator_1)
	call onuicontrol__efg_generator_1
	$rpn_relative_port_index := 235
	call jm_rpn_send
end on
on ui_control($efg_generator_2)
	call onuicontrol__efg_generator_2
	$rpn_relative_port_index := 236
	call jm_rpn_send
end on
on ui_control($efg_generator_3)
	call onuicontrol__efg_generator_3
	$rpn_relative_port_index := 237
	call jm_rpn_send
end on
on ui_control($efg_generator_4)
	call onuicontrol__efg_generator_4
	$rpn_relative_port_index := 238
	call jm_rpn_send
end on
on ui_control($efg_generator_5)
	call onuicontrol__efg_generator_5
	$rpn_relative_port_index := 239
	call jm_rpn_send
end on
on ui_control($knob_cps_n__generator_set_size)
	call onuicontrol__knob_cps_n__generator_set_size
	$rpn_relative_port_index := 240
	call jm_rpn_send
end on
on ui_control($knob_cps_k__num_of_elem_in_combination)
	call onuicontrol__knob_cps_k__num_of_elem_in_combination
	$rpn_relative_port_index := 241
	call jm_rpn_send
end on
on ui_control($cps_identity)
	call onuicontrol__cps_identity
	$rpn_relative_port_index := 242
	call jm_rpn_send
end on
on ui_control($knob_cps_generator_1)
	call onuicontrol__knob_cps_generator_1
	$rpn_relative_port_index := 243
	call jm_rpn_send
end on
on ui_control($knob_cps_generator_2)
	call onuicontrol__knob_cps_generator_2
	$rpn_relative_port_index := 244
	call jm_rpn_send
end on
on ui_control($knob_cps_generator_3)
	call onuicontrol__knob_cps_generator_3
	$rpn_relative_port_index := 245
	call jm_rpn_send
end on
on ui_control($knob_cps_generator_4)
	call onuicontrol__knob_cps_generator_4
	$rpn_relative_port_index := 246
	call jm_rpn_send
end on
on ui_control($knob_cps_generator_5)
	call onuicontrol__knob_cps_generator_5
	$rpn_relative_port_index := 247
	call jm_rpn_send
end on
on ui_control($knob_cps_generator_6)
	call onuicontrol__knob_cps_generator_6
	$rpn_relative_port_index := 248
	call jm_rpn_send
end on
on ui_control($knob__script_min)
	call onuicontrol__knob__script_min
	$rpn_relative_port_index := 249
	call jm_rpn_send
end on
on ui_control($knob__script_max)
	call onuicontrol__knob__script_max
	$rpn_relative_port_index := 250
	call jm_rpn_send
end on
on ui_control($knob__number_of_pitch_classes__tune_by_ji_ratios_precise)
	call onuicontrol__knob__number_of_pitch_classes__tune_by_ji_ratios_precise
	$rpn_relative_port_index := 251
	call jm_rpn_send
end on
on ui_control($panel__tune_by_ji_ratios_precise__navigate_left)
	call onuicontrol__panel__tune_by_ji_ratios_precise__navigate_left
	$rpn_relative_port_index := 252
	call jm_rpn_send
end on
on ui_control($panel__tune_by_ji_ratios_precise__navigate_right)
	call onuicontrol__panel__tune_by_ji_ratios_precise__navigate_right
	$rpn_relative_port_index := 253
	call jm_rpn_send
end on
on ui_control($knob__number_of_pitch_classes__tune_by_exp_ratios)
	call onuicontrol__knob__number_of_pitch_classes__tune_by_exp_ratios
	$rpn_relative_port_index := 254
	call jm_rpn_send
end on
on ui_control($panel__tune_by_exponent_ratios__navigate_left)
	call onuicontrol__panel__tune_by_exponent_ratios__navigate_left
	$rpn_relative_port_index := 255
	call jm_rpn_send
end on
on ui_control($panel__tune_by_exponent_ratios__navigate_right)
	call onuicontrol__panel__tune_by_exponent_ratios__navigate_right
	$rpn_relative_port_index := 256
	call jm_rpn_send
end on
on ui_control($knob__number_of_pitch_classes__freqratio)
	call onuicontrol__knob__number_of_pitch_classes__freqratio
	$rpn_relative_port_index := 257
	call jm_rpn_send
end on
on ui_control($panel__freqratio__navigate_left)
	call onuicontrol__panel__freqratio__navigate_left
	$rpn_relative_port_index := 258
	call jm_rpn_send
end on
on ui_control($panel__freqratio__navigate_right)
	call onuicontrol__panel__freqratio__navigate_right
	$rpn_relative_port_index := 259
	call jm_rpn_send
end on
on ui_control($knob__zalewski_qnz_deformation_numerator)
	call onuicontrol__knob__zalewski_qnz_deformation_numerator
	$rpn_relative_port_index := 260
	call jm_rpn_send
end on
on ui_control($knob__zalewski_qnz_deformation_denominator)
	call onuicontrol__knob__zalewski_qnz_deformation_denominator
	$rpn_relative_port_index := 261
	call jm_rpn_send
end on
on ui_control($knob__zalewski_qnz_order)
	call onuicontrol__knob__zalewski_qnz_order
	$rpn_relative_port_index := 262
	call jm_rpn_send
end on
on ui_control($knob__zalewski__cursor_position)
	call onuicontrol__knob__zalewski__cursor_position
	$rpn_relative_port_index := 263
	call jm_rpn_send
end on
on ui_control($knob__zalewski__var_a)
	call onuicontrol__knob__zalewski__var_a
	$rpn_relative_port_index := 264
	call jm_rpn_send
end on
on ui_control($knob__zalewski__var_b)
	call onuicontrol__knob__zalewski__var_b
	$rpn_relative_port_index := 265
	call jm_rpn_send
end on
on ui_control($knob__zalewski__var_c)
	call onuicontrol__knob__zalewski__var_c
	$rpn_relative_port_index := 266
	call jm_rpn_send
end on
on ui_control($knob__zalewski__template_ratio_numerator)
	call onuicontrol__knob__zalewski__template_ratio_numerator
	$rpn_relative_port_index := 267
	call jm_rpn_send
end on
on ui_control($knob__zalewski__template_ratio_denominator)
	call onuicontrol__knob__zalewski__template_ratio_denominator
	$rpn_relative_port_index := 268
	call jm_rpn_send
end on
on ui_control($gui_zalewski__struktura_odbita)
	call onuicontrol__gui_zalewski__struktura_odbita
	$rpn_relative_port_index := 269
	call jm_rpn_send
end on
on ui_control($gui_zalewski__struktura_przeciwna)
	call onuicontrol__gui_zalewski__struktura_przeciwna
	$rpn_relative_port_index := 270
	call jm_rpn_send
end on
on ui_control($gui_zalewski__clear_all)
	call onuicontrol__gui_zalewski__clear_all
	$rpn_relative_port_index := 271
	call jm_rpn_send
end on
on ui_control($gui_zalewski__backspace)
	call onuicontrol__gui_zalewski__backspace
	$rpn_relative_port_index := 272
	call jm_rpn_send
end on
on ui_control($gui_zalewski__spacja)
	call onuicontrol__gui_zalewski__spacja
	$rpn_relative_port_index := 273
	call jm_rpn_send
end on
on ui_control($gui_zalewski__template_ratio)
	call onuicontrol__gui_zalewski__template_ratio
	$rpn_relative_port_index := 274
	call jm_rpn_send
end on
on ui_control($gui_zalewski__plus)
	call onuicontrol__gui_zalewski__plus
	$rpn_relative_port_index := 275
	call jm_rpn_send
end on
on ui_control($gui_zalewski__minus)
	call onuicontrol__gui_zalewski__minus
	$rpn_relative_port_index := 276
	call jm_rpn_send
end on
on ui_control($gui_zalewski__razy)
	call onuicontrol__gui_zalewski__razy
	$rpn_relative_port_index := 277
	call jm_rpn_send
end on
on ui_control($gui_zalewski__przecinek)
	call onuicontrol__gui_zalewski__przecinek
	$rpn_relative_port_index := 278
	call jm_rpn_send
end on
on ui_control($gui_zalewski__decimal_places_separator)
	call onuicontrol__gui_zalewski__decimal_places_separator
	$rpn_relative_port_index := 279
	call jm_rpn_send
end on
on ui_control($gui_zalewski__podzielic)
	call onuicontrol__gui_zalewski__podzielic
	$rpn_relative_port_index := 280
	call jm_rpn_send
end on
on ui_control($gui_zalewski__numpad_0)
	call onuicontrol__gui_zalewski__numpad_0
	$rpn_relative_port_index := 281
	call jm_rpn_send
end on
on ui_control($gui_zalewski__numpad_1)
	call onuicontrol__gui_zalewski__numpad_1
	$rpn_relative_port_index := 282
	call jm_rpn_send
end on
on ui_control($gui_zalewski__numpad_2)
	call onuicontrol__gui_zalewski__numpad_2
	$rpn_relative_port_index := 283
	call jm_rpn_send
end on
on ui_control($gui_zalewski__numpad_3)
	call onuicontrol__gui_zalewski__numpad_3
	$rpn_relative_port_index := 284
	call jm_rpn_send
end on
on ui_control($gui_zalewski__numpad_4)
	call onuicontrol__gui_zalewski__numpad_4
	$rpn_relative_port_index := 285
	call jm_rpn_send
end on
on ui_control($gui_zalewski__numpad_5)
	call onuicontrol__gui_zalewski__numpad_5
	$rpn_relative_port_index := 286
	call jm_rpn_send
end on
on ui_control($gui_zalewski__numpad_6)
	call onuicontrol__gui_zalewski__numpad_6
	$rpn_relative_port_index := 287
	call jm_rpn_send
end on
on ui_control($gui_zalewski__numpad_7)
	call onuicontrol__gui_zalewski__numpad_7
	$rpn_relative_port_index := 288
	call jm_rpn_send
end on
on ui_control($gui_zalewski__numpad_8)
	call onuicontrol__gui_zalewski__numpad_8
	$rpn_relative_port_index := 289
	call jm_rpn_send
end on
on ui_control($gui_zalewski__numpad_9)
	call onuicontrol__gui_zalewski__numpad_9
	$rpn_relative_port_index := 290
	call jm_rpn_send
end on
on ui_control($gui_zalewski__var_a)
	call onuicontrol__gui_zalewski__var_a
	$rpn_relative_port_index := 291
	call jm_rpn_send
end on
on ui_control($gui_zalewski__var_b)
	call onuicontrol__gui_zalewski__var_b
	$rpn_relative_port_index := 292
	call jm_rpn_send
end on
on ui_control($gui_zalewski__var_c)
	call onuicontrol__gui_zalewski__var_c
	$rpn_relative_port_index := 293
	call jm_rpn_send
end on
on ui_control($knob__generator_interval_numerator)
	call onuicontrol__knob__generator_interval_numerator
	$rpn_relative_port_index := 294
	call jm_rpn_send
end on
on ui_control($knob__generator_interval_denominator)
	call onuicontrol__knob__generator_interval_denominator
	$rpn_relative_port_index := 295
	call jm_rpn_send
end on
on ui_control($knob__generator_interval_power_numerator)
	call onuicontrol__knob__generator_interval_power_numerator
	$rpn_relative_port_index := 296
	call jm_rpn_send
end on
on ui_control($knob__generator_interval_power_denominator)
	call onuicontrol__knob__generator_interval_power_denominator
	$rpn_relative_port_index := 297
	call jm_rpn_send
end on
on ui_control($knob__periodandgenerator__stack_up)
	call onuicontrol__knob__periodandgenerator__stack_up
	$rpn_relative_port_index := 298
	call jm_rpn_send
end on
on ui_control($knob__periodandgenerator__num_of_untempered_intervals)
	call onuicontrol__knob__periodandgenerator__num_of_untempered_intervals
	$rpn_relative_port_index := 299
	call jm_rpn_send
end on
on ui_control($knob__periodandgenerator__stack_down)
	call onuicontrol__knob__periodandgenerator__stack_down
	$rpn_relative_port_index := 300
	call jm_rpn_send
end on
on ui_control($knob__comma_interval_numerator)
	call onuicontrol__knob__comma_interval_numerator
	$rpn_relative_port_index := 301
	call jm_rpn_send
end on
on ui_control($knob__comma_interval_denominator)
	call onuicontrol__knob__comma_interval_denominator
	$rpn_relative_port_index := 302
	call jm_rpn_send
end on
on ui_control($knob__comma_fraction_numerator)
	call onuicontrol__knob__comma_fraction_numerator
	$rpn_relative_port_index := 303
	call jm_rpn_send
end on
on ui_control($knob__comma_fraction_denominator)
	call onuicontrol__knob__comma_fraction_denominator
	$rpn_relative_port_index := 304
	call jm_rpn_send
end on
on ui_control($knob__epimoric_generators__gradus1)
	call onuicontrol__knob__epimoric_generators__gradus1
	$rpn_relative_port_index := 305
	call jm_rpn_send
end on
on ui_control($knob__epimoric_generators__modus1)
	call onuicontrol__knob__epimoric_generators__modus1
	$rpn_relative_port_index := 306
	call jm_rpn_send
end on
on ui_control($epimoric_generators_utonal_switch_1)
	call onuicontrol__epimoric_generators_utonal_switch_1
	$rpn_relative_port_index := 307
	call jm_rpn_send
end on
on ui_control($epimoric_generators_utonal_switch_2)
	call onuicontrol__epimoric_generators_utonal_switch_2
	$rpn_relative_port_index := 308
	call jm_rpn_send
end on
on ui_control($knob__epimoric_generators__gradus2)
	call onuicontrol__knob__epimoric_generators__gradus2
	$rpn_relative_port_index := 309
	call jm_rpn_send
end on
on ui_control($knob__epimoric_generators__modus2)
	call onuicontrol__knob__epimoric_generators__modus2
	$rpn_relative_port_index := 310
	call jm_rpn_send
end on
on ui_control($knob__edtuning_fracofequave_numerator)
	call onuicontrol__knob__edtuning_fracofequave_numerator
	$rpn_relative_port_index := 311
	call jm_rpn_send
end on
on ui_control($knob__edtuning_fracofequave_denominator)
	call onuicontrol__knob__edtuning_fracofequave_denominator
	$rpn_relative_port_index := 312
	call jm_rpn_send
end on
on ui_control($knob__edtuning_detune_step_by_cents)
	call onuicontrol__knob__edtuning_detune_step_by_cents
	$rpn_relative_port_index := 313
	call jm_rpn_send
end on
on ui_control($knob__edtuning_detune_step_by_centpercent)
	call onuicontrol__knob__edtuning_detune_step_by_centpercent
	$rpn_relative_port_index := 314
	call jm_rpn_send
end on
on ui_control($setup_module_visibility)
	call onuicontrol__setup_module_visibility
	$rpn_relative_port_index := 315
	call jm_rpn_send
end on
on ui_control($scalesmithing_module_visibility)
	call onuicontrol__scalesmithing_module_visibility
	$rpn_relative_port_index := 316
	call jm_rpn_send
end on
on ui_control($modulation_module_visibility)
	call onuicontrol__modulation_module_visibility
	$rpn_relative_port_index := 317
	call jm_rpn_send
end on
on ui_control($detune_module_visibility)
	call onuicontrol__detune_module_visibility
	$rpn_relative_port_index := 318
	call jm_rpn_send
end on
on ui_control($pedaling_module_visibility)
	call onuicontrol__pedaling_module_visibility
	$rpn_relative_port_index := 319
	call jm_rpn_send
end on
on ui_control($pedaling_module_tab_sus_visibility)
	call onuicontrol__pedaling_module_tab_sus_visibility
	$rpn_relative_port_index := 320
	call jm_rpn_send
end on
on ui_control($pedaling_module_tab_harp_visibility)
	call onuicontrol__pedaling_module_tab_harp_visibility
	$rpn_relative_port_index := 321
	call jm_rpn_send
end on
on ui_control($pedaling_module_tab_epimoric_visibility)
	call onuicontrol__pedaling_module_tab_epimoric_visibility
	$rpn_relative_port_index := 322
	call jm_rpn_send
end on
on ui_control($modulation_module__transposition_common_note__visibility)
	call onuicontrol__modulation_module__transposition_common_note__visibility
	$rpn_relative_port_index := 323
	call jm_rpn_send
end on
on ui_control($modulation_module__transposition_epimoric__visibility)
	call onuicontrol__modulation_module__transposition_epimoric__visibility
	$rpn_relative_port_index := 324
	call jm_rpn_send
end on
on ui_control($modulation_module__transposition_interval__visibility)
	call onuicontrol__modulation_module__transposition_interval__visibility
	$rpn_relative_port_index := 325
	call jm_rpn_send
end on
on ui_control($modulation_module__transposition_whammy__visibility)
	call onuicontrol__modulation_module__transposition_whammy__visibility
	$rpn_relative_port_index := 326
	call jm_rpn_send
end on
on ui_control($modulation_module__monzo__visibility)
	call onuicontrol__modulation_module__monzo__visibility
	$rpn_relative_port_index := 327
	call jm_rpn_send
end on
on ui_control($uiswitch__suspedal_1)
	call onuicontrol__uiswitch__suspedal_1
	$rpn_relative_port_index := 328
	call jm_rpn_send
end on
on ui_control($uiswitch__suspedal_2)
	call onuicontrol__uiswitch__suspedal_2
	$rpn_relative_port_index := 329
	call jm_rpn_send
end on
on ui_control($uiswitch__suspedal_3)
	call onuicontrol__uiswitch__suspedal_3
	$rpn_relative_port_index := 330
	call jm_rpn_send
end on
on ui_control($uiswitch__suspedal_4)
	call onuicontrol__uiswitch__suspedal_4
	$rpn_relative_port_index := 331
	call jm_rpn_send
end on
on ui_control($uiswitch__suspedal_5)
	call onuicontrol__uiswitch__suspedal_5
	$rpn_relative_port_index := 332
	call jm_rpn_send
end on
on ui_control($uiswitch__suspedal_6)
	call onuicontrol__uiswitch__suspedal_6
	$rpn_relative_port_index := 333
	call jm_rpn_send
end on
on ui_control($uiswitch__suspedal_7)
	call onuicontrol__uiswitch__suspedal_7
	$rpn_relative_port_index := 334
	call jm_rpn_send
end on
on ui_control($uiswitch__suspedal_8)
	call onuicontrol__uiswitch__suspedal_8
	$rpn_relative_port_index := 335
	call jm_rpn_send
end on
on ui_control($uiswitch__suspedal_9)
	call onuicontrol__uiswitch__suspedal_9
	$rpn_relative_port_index := 336
	call jm_rpn_send
end on
on ui_control($uiswitch__suspedal_10)
	call onuicontrol__uiswitch__suspedal_10
	$rpn_relative_port_index := 337
	call jm_rpn_send
end on
on ui_control($uiswitch__suspedal_11)
	call onuicontrol__uiswitch__suspedal_11
	$rpn_relative_port_index := 338
	call jm_rpn_send
end on
on ui_control($uiswitch__suspedal_12)
	call onuicontrol__uiswitch__suspedal_12
	$rpn_relative_port_index := 339
	call jm_rpn_send
end on
on ui_control($knob__harppedal_1__d_sharp_numerator)
	call onuicontrol__knob__harppedal_1__d_sharp_numerator
	$rpn_relative_port_index := 340
	call jm_rpn_send
end on
on ui_control($knob__harppedal_1__d_sharp_denominator)
	call onuicontrol__knob__harppedal_1__d_sharp_denominator
	$rpn_relative_port_index := 341
	call jm_rpn_send
end on
on ui_control($knob__harppedal_2__c_sharp_numerator)
	call onuicontrol__knob__harppedal_2__c_sharp_numerator
	$rpn_relative_port_index := 342
	call jm_rpn_send
end on
on ui_control($knob__harppedal_2__c_sharp_denominator)
	call onuicontrol__knob__harppedal_2__c_sharp_denominator
	$rpn_relative_port_index := 343
	call jm_rpn_send
end on
on ui_control($knob__harppedal_3__b_sharp_numerator)
	call onuicontrol__knob__harppedal_3__b_sharp_numerator
	$rpn_relative_port_index := 344
	call jm_rpn_send
end on
on ui_control($knob__harppedal_3__b_sharp_denominator)
	call onuicontrol__knob__harppedal_3__b_sharp_denominator
	$rpn_relative_port_index := 345
	call jm_rpn_send
end on
on ui_control($knob__harppedal_4__e_sharp_numerator)
	call onuicontrol__knob__harppedal_4__e_sharp_numerator
	$rpn_relative_port_index := 346
	call jm_rpn_send
end on
on ui_control($knob__harppedal_4__e_sharp_denominator)
	call onuicontrol__knob__harppedal_4__e_sharp_denominator
	$rpn_relative_port_index := 347
	call jm_rpn_send
end on
on ui_control($knob__harppedal_5__f_sharp_numerator)
	call onuicontrol__knob__harppedal_5__f_sharp_numerator
	$rpn_relative_port_index := 348
	call jm_rpn_send
end on
on ui_control($knob__harppedal_5__f_sharp_denominator)
	call onuicontrol__knob__harppedal_5__f_sharp_denominator
	$rpn_relative_port_index := 349
	call jm_rpn_send
end on
on ui_control($knob__harppedal_6__g_sharp_numerator)
	call onuicontrol__knob__harppedal_6__g_sharp_numerator
	$rpn_relative_port_index := 350
	call jm_rpn_send
end on
on ui_control($knob__harppedal_6__g_sharp_denominator)
	call onuicontrol__knob__harppedal_6__g_sharp_denominator
	$rpn_relative_port_index := 351
	call jm_rpn_send
end on
on ui_control($knob__harppedal_7__a_sharp_numerator)
	call onuicontrol__knob__harppedal_7__a_sharp_numerator
	$rpn_relative_port_index := 352
	call jm_rpn_send
end on
on ui_control($knob__harppedal_7__a_sharp_denominator)
	call onuicontrol__knob__harppedal_7__a_sharp_denominator
	$rpn_relative_port_index := 353
	call jm_rpn_send
end on
on ui_control($knob__harppedal_1__d_flat_numerator)
	call onuicontrol__knob__harppedal_1__d_flat_numerator
	$rpn_relative_port_index := 354
	call jm_rpn_send
end on
on ui_control($knob__harppedal_1__d_flat_denominator)
	call onuicontrol__knob__harppedal_1__d_flat_denominator
	$rpn_relative_port_index := 355
	call jm_rpn_send
end on
on ui_control($knob__harppedal_2__c_flat_numerator)
	call onuicontrol__knob__harppedal_2__c_flat_numerator
	$rpn_relative_port_index := 356
	call jm_rpn_send
end on
on ui_control($knob__harppedal_2__c_flat_denominator)
	call onuicontrol__knob__harppedal_2__c_flat_denominator
	$rpn_relative_port_index := 357
	call jm_rpn_send
end on
on ui_control($knob__harppedal_3__b_flat_numerator)
	call onuicontrol__knob__harppedal_3__b_flat_numerator
	$rpn_relative_port_index := 358
	call jm_rpn_send
end on
on ui_control($knob__harppedal_3__b_flat_denominator)
	call onuicontrol__knob__harppedal_3__b_flat_denominator
	$rpn_relative_port_index := 359
	call jm_rpn_send
end on
on ui_control($knob__harppedal_4__e_flat_numerator)
	call onuicontrol__knob__harppedal_4__e_flat_numerator
	$rpn_relative_port_index := 360
	call jm_rpn_send
end on
on ui_control($knob__harppedal_4__e_flat_denominator)
	call onuicontrol__knob__harppedal_4__e_flat_denominator
	$rpn_relative_port_index := 361
	call jm_rpn_send
end on
on ui_control($knob__harppedal_5__f_flat_numerator)
	call onuicontrol__knob__harppedal_5__f_flat_numerator
	$rpn_relative_port_index := 362
	call jm_rpn_send
end on
on ui_control($knob__harppedal_5__f_flat_denominator)
	call onuicontrol__knob__harppedal_5__f_flat_denominator
	$rpn_relative_port_index := 363
	call jm_rpn_send
end on
on ui_control($knob__harppedal_6__g_flat_numerator)
	call onuicontrol__knob__harppedal_6__g_flat_numerator
	$rpn_relative_port_index := 364
	call jm_rpn_send
end on
on ui_control($knob__harppedal_6__g_flat_denominator)
	call onuicontrol__knob__harppedal_6__g_flat_denominator
	$rpn_relative_port_index := 365
	call jm_rpn_send
end on
on ui_control($knob__harppedal_7__a_flat_numerator)
	call onuicontrol__knob__harppedal_7__a_flat_numerator
	$rpn_relative_port_index := 366
	call jm_rpn_send
end on
on ui_control($knob__harppedal_7__a_flat_denominator)
	call onuicontrol__knob__harppedal_7__a_flat_denominator
	$rpn_relative_port_index := 367
	call jm_rpn_send
end on
on ui_control($switch__harppedal_1__d_sharp)
	call onuicontrol__switch__harppedal_1__d_sharp
	$rpn_relative_port_index := 368
	call jm_rpn_send
end on
on ui_control($switch__harppedal_2__c_sharp)
	call onuicontrol__switch__harppedal_2__c_sharp
	$rpn_relative_port_index := 369
	call jm_rpn_send
end on
on ui_control($switch__harppedal_3__b_sharp)
	call onuicontrol__switch__harppedal_3__b_sharp
	$rpn_relative_port_index := 370
	call jm_rpn_send
end on
on ui_control($switch__harppedal_4__e_sharp)
	call onuicontrol__switch__harppedal_4__e_sharp
	$rpn_relative_port_index := 371
	call jm_rpn_send
end on
on ui_control($switch__harppedal_5__f_sharp)
	call onuicontrol__switch__harppedal_5__f_sharp
	$rpn_relative_port_index := 372
	call jm_rpn_send
end on
on ui_control($switch__harppedal_6__g_sharp)
	call onuicontrol__switch__harppedal_6__g_sharp
	$rpn_relative_port_index := 373
	call jm_rpn_send
end on
on ui_control($switch__harppedal_7__a_sharp)
	call onuicontrol__switch__harppedal_7__a_sharp
	$rpn_relative_port_index := 374
	call jm_rpn_send
end on
on ui_control($switch__harppedal_1__d_flat)
	call onuicontrol__switch__harppedal_1__d_flat
	$rpn_relative_port_index := 375
	call jm_rpn_send
end on
on ui_control($switch__harppedal_2__c_flat)
	call onuicontrol__switch__harppedal_2__c_flat
	$rpn_relative_port_index := 376
	call jm_rpn_send
end on
on ui_control($switch__harppedal_3__b_flat)
	call onuicontrol__switch__harppedal_3__b_flat
	$rpn_relative_port_index := 377
	call jm_rpn_send
end on
on ui_control($switch__harppedal_4__e_flat)
	call onuicontrol__switch__harppedal_4__e_flat
	$rpn_relative_port_index := 378
	call jm_rpn_send
end on
on ui_control($switch__harppedal_5__f_flat)
	call onuicontrol__switch__harppedal_5__f_flat
	$rpn_relative_port_index := 379
	call jm_rpn_send
end on
on ui_control($switch__harppedal_6__g_flat)
	call onuicontrol__switch__harppedal_6__g_flat
	$rpn_relative_port_index := 380
	call jm_rpn_send
end on
on ui_control($switch__harppedal_7__a_flat)
	call onuicontrol__switch__harppedal_7__a_flat
	$rpn_relative_port_index := 381
	call jm_rpn_send
end on
on ui_control($epimoric_bitonal_module_onoff)
	call onuicontrol__epimoric_bitonal_module_onoff
	$rpn_relative_port_index := 382
	call jm_rpn_send
end on
on ui_control($epimoric_bitonal_twinscale_module__switch1)
	call onuicontrol__epimoric_bitonal_twinscale_module__switch1
	$rpn_relative_port_index := 383
	call jm_rpn_send
end on
on ui_control($epimoric_bitonal_twinscale_module__switch2)
	call onuicontrol__epimoric_bitonal_twinscale_module__switch2
	$rpn_relative_port_index := 384
	call jm_rpn_send
end on
on ui_control($epimoric_bitonal_twinscale_module__switch3)
	call onuicontrol__epimoric_bitonal_twinscale_module__switch3
	$rpn_relative_port_index := 385
	call jm_rpn_send
end on
on ui_control($epimoric_bitonal_twinscale_module__knob1)
	call onuicontrol__epimoric_bitonal_twinscale_module__knob1
	$rpn_relative_port_index := 386
	call jm_rpn_send
end on
on ui_control($epimoric_bitonal_twinscale_module__knob2)
	call onuicontrol__epimoric_bitonal_twinscale_module__knob2
	$rpn_relative_port_index := 387
	call jm_rpn_send
end on
on ui_control($epimoric_bitonal_twinscale_module___sort)
	call onuicontrol__epimoric_bitonal_twinscale_module___sort
	$rpn_relative_port_index := 388
	call jm_rpn_send
end on
on ui_control($knob__masterdetune_numerator)
	call onuicontrol__knob__masterdetune_numerator
	$rpn_relative_port_index := 389
	call jm_rpn_send
end on
on ui_control($knob__masterdetune_denominator)
	call onuicontrol__knob__masterdetune_denominator
	$rpn_relative_port_index := 390
	call jm_rpn_send
end on
on ui_control($knob__masterdetune_by_cents)
	call onuicontrol__knob__masterdetune_by_cents
	$rpn_relative_port_index := 391
	call jm_rpn_send
end on
on ui_control($knob__masterdetune_by_centpercents)
	call onuicontrol__knob__masterdetune_by_centpercents
	$rpn_relative_port_index := 392
	call jm_rpn_send
end on
on ui_control($knob__mastertransposition__equave)
	call onuicontrol__knob__mastertransposition__equave
	$rpn_relative_port_index := 393
	call jm_rpn_send
end on
on ui_control($knob__mastertransposition__octave)
	call onuicontrol__knob__mastertransposition__octave
	$rpn_relative_port_index := 394
	call jm_rpn_send
end on
on ui_control($knob__mastertransposition__steps)
	call onuicontrol__knob__mastertransposition__steps
	$rpn_relative_port_index := 395
	call jm_rpn_send
end on
on ui_control($knob__mastertransposition_circleoffifths)
	call onuicontrol__knob__mastertransposition_circleoffifths
	$rpn_relative_port_index := 396
	call jm_rpn_send
end on
on ui_control($switch__octave_stretching)
	call onuicontrol__switch__octave_stretching
	$rpn_relative_port_index := 397
	call jm_rpn_send
end on
on ui_control($turn_on_global_cent_mask)
	call onuicontrol__turn_on_global_cent_mask
	$rpn_relative_port_index := 398
	call jm_rpn_send
end on
on ui_control($panel__detune_specific_key__navigate_left)
	call onuicontrol__panel__detune_specific_key__navigate_left
	$rpn_relative_port_index := 399
	call jm_rpn_send
end on
on ui_control($panel__detune_specific_key__navigate_right)
	call onuicontrol__panel__detune_specific_key__navigate_right
	$rpn_relative_port_index := 400
	call jm_rpn_send
end on
on ui_control($knob__interval_of_equivalence_numerator)
	call onuicontrol__knob__interval_of_equivalence_numerator
	$rpn_relative_port_index := 401
	call jm_rpn_send
end on
on ui_control($knob__interval_of_equivalence_denominator)
	call onuicontrol__knob__interval_of_equivalence_denominator
	$rpn_relative_port_index := 402
	call jm_rpn_send
end on
on ui_control($knob__interval_of_equivalence_power_numerator)
	call onuicontrol__knob__interval_of_equivalence_power_numerator
	$rpn_relative_port_index := 403
	call jm_rpn_send
end on
on ui_control($knob__interval_of_equivalence_power_denominator)
	call onuicontrol__knob__interval_of_equivalence_power_denominator
	$rpn_relative_port_index := 404
	call jm_rpn_send
end on
on ui_control($switch__stacking_method)
	call onuicontrol__switch__stacking_method
	$rpn_relative_port_index := 405
	call jm_rpn_send
end on
on ui_control($switch__interval_reduction)
	call onuicontrol__switch__interval_reduction
	$rpn_relative_port_index := 406
	call jm_rpn_send
end on
on ui_control($switch__reduce_by_octave)
	call onuicontrol__switch__reduce_by_octave
	$rpn_relative_port_index := 407
	call jm_rpn_send
end on
on ui_control($switch__reduction_mode)
	call onuicontrol__switch__reduction_mode
	$rpn_relative_port_index := 408
	call jm_rpn_send
end on
on ui_control($switch__quantize_to_12edo)
	call onuicontrol__switch__quantize_to_12edo
	$rpn_relative_port_index := 409
	call jm_rpn_send
end on
on ui_control($switch__adaptive_pure_tuning)
	call onuicontrol__switch__adaptive_pure_tuning
	$rpn_relative_port_index := 410
	call jm_rpn_send
end on
on ui_control($switch__quantizebeatstobpm)
	call onuicontrol__switch__quantizebeatstobpm
	$rpn_relative_port_index := 411
	call jm_rpn_send
end on
on ui_control($dummy_knob_semitone)
	$rpn_relative_port_index := 425
	call jm_rpn_send
end on
on ui_control($dummy_knob_velocity)
	$rpn_relative_port_index := 426
	call jm_rpn_send
end on
on ui_control($dummy_knob_chroma)
	$rpn_relative_port_index := 427
	call jm_rpn_send
end on
on ui_control($dummy_knob_detune_value_cents)
	$rpn_relative_port_index := 428
	call jm_rpn_send
end on
on ui_control($dummy_knob_detune_value_cent_percentage)
	$rpn_relative_port_index := 429
	call jm_rpn_send
end on

on ui_control($efg_remove_step_duplicates)
	call onuicontrol__efg_remove_step_duplicates
	$rpn_relative_port_index := 431
	call jm_rpn_send
end on

function send_rpn_last_note_info
	{NOTE THAT KONTAKT CAN'T HANDLE FAST RPN MESSAGES.}
			{send MIDI RPN messages with the information about last note:}
				if (1=1)
					$rpn_relative_port_index := 425 {midi note pitch info (0-127)}
					call jm_rpn_send
				end if
				if (1=1)
					$rpn_relative_port_index := 426 {midi note velocity info (0-127)}
					call jm_rpn_send
				end if
				if (1=1)
					$rpn_relative_port_index := 427 {chromatic semitone info (0-11)}
					call jm_rpn_send
				end if
				if (1=1)
					$rpn_relative_port_index := 428 {cent detune from 12EDO A440 (-63,+64c)}
					call jm_rpn_send
				end if
				if (1=1)
					$rpn_relative_port_index := 429 {cent percent (0.01c. units from 0 to 100)}
					call jm_rpn_send
				end if
end function

on rpn
	if ($switch__rpn_connect = 1)
		{message($RPN_ADDRESS - $rpn_connect__channel_num)}


		if (($RPN_ADDRESS - $rpn_connect__channel_num) >= 0 and ($RPN_ADDRESS - $rpn_connect__channel_num) <= 500)
			$rpn_relative_port_index  := $RPN_ADDRESS - $rpn_connect__channel_num
		{	$rpn_connect__receive_value := ($RPN_VALUE - 2048)} {$RPN_VALUE - 2048}

			$rpn_connect__receive_value := $RPN_VALUE mod 128
{*}
			{$rpn_connect__receive_value := 7
			$rpn_relative_port_index := 1}
			call jm_rpn_receive
			wait(1000)
		end if
	end if
end on




on note
	$display_value_of_the_most_recent_event_note := $EVENT_NOTE

	if (($EVENT_NOTE >= $script_min) and ($EVENT_NOTE <= $script_max))

		{monochrome layout mode - omit mapping white or black keys}
		if ($monochrome_layout_mode # 0 and $monochrome_behaviour = 0)
			if ($monochrome_layout_mode = 1) {don't play the black keys}
				select($EVENT_NOTE mod 12)
					case 1
						exit
					case 3
						exit
					case 6
						exit
					case 8
						exit
					case 10
						exit
				end select
			end if
			if ($monochrome_layout_mode = -1) {don't play the white keys}
				select($EVENT_NOTE mod 12)
					case 0
						exit
					case 2
						exit
					case 4
						exit
					case 5
						exit
					case 7
						exit
					case 9
						exit
					case 11
						exit
				end select
			end if
		end if

		{measure steps from reference note:}
		select ($monochrome_layout_mode)
			case 0
				$steps_from_reference_note :=  $EVENT_NOTE - $concert_pitch_midi_key {default, monochrome layout off}
			case 1
				$steps_from_reference_note := %number_of_white_keys[$EVENT_NOTE]-%number_of_white_keys[$concert_pitch_midi_key]
			case -1
					$steps_from_reference_note := %number_of_black_keys[$EVENT_NOTE]-%number_of_black_keys[$concert_pitch_midi_key]
		end select

		$key_shift := $transpositionbyinterval__compound_step_transposition + $knob__mastertransposition__steps + $mastertransposition_quick_circleoffifths_step_compensation

			if ($common_note_transposition_module_is_on = 1)
				$key_shift := $key_shift + $common_note_transposition_module_step_compensation
			end if

			if ($epimoric_module_is_on = 1)
				$key_shift := $key_shift + $epimoric_module__step_compensation
			end if

		$steps_from_reference_note := $steps_from_reference_note + $key_shift


		{calculate scale degree and period:}
			if ($steps_from_reference_note >= 0)
				$scale_degree_number := $steps_from_reference_note mod $number_of_pitch_classes
				$scale_period_number := $steps_from_reference_note / $number_of_pitch_classes
			else {mod operator fix for negative numbers}
				$scale_degree_number := ($steps_from_reference_note mod $number_of_pitch_classes)
				if ($scale_degree_number # 0)
					$scale_degree_number := $number_of_pitch_classes+$scale_degree_number
				end if
				$scale_period_number := ((1+$steps_from_reference_note)/$number_of_pitch_classes)-1
			end if

		$play_note_from_mirrored_version_of_the_scale := $epimoric_module__mirror_flag


		{suspedals module - suspended chords}
		if ($scale_degree_number < 12)
			if (get_control_par(%panel__suspedals_ids[$scale_degree_number],$CONTROL_PAR_VALUE) = 1)
				$scale_degree_number := $scale_degree_number + 1
				if ($scale_degree_number = $number_of_pitch_classes)
					$scale_period_number := $scale_period_number + 1
					$scale_degree_number := 0
				end if
			end if
		end if

		{harp pedaling}
		~harppedaling_note_transposition_cents := 0.0
		if ($scale_degree_number < 7)
			if (get_control_par(%switchids__harppedals__sharps_btns[$scale_degree_number],$CONTROL_PAR_VALUE) = 1)
					~harppedaling_note_transposition_cents := 1200.0 * log ( ...
					int_to_real(get_control_par(%knobids__harppedals__sharps_numerators[$scale_degree_number], $CONTROL_PAR_VALUE)) / ...
					int_to_real(get_control_par(%knobids__harppedals__sharps_denominators[$scale_degree_number], $CONTROL_PAR_VALUE))   ...
					) / log(2.0)
			end if
			if (get_control_par(%switchids__harppedals__flats_btns[$scale_degree_number],$CONTROL_PAR_VALUE) = 1)
				~harppedaling_note_transposition_cents := 1200.0 * log ( ...
				int_to_real(get_control_par(%knobids__harppedals__flats_numerators[$scale_degree_number], $CONTROL_PAR_VALUE)) / ...
				int_to_real(get_control_par(%knobids__harppedals__flats_denominators[$scale_degree_number], $CONTROL_PAR_VALUE))   ...
				) / log(2.0)
			end if
		end if


		{master transposition}
			$scale_period_number := $scale_period_number + $knob__mastertransposition__equave

		{calculate cents:}

			{convert scale period to interval in cents:}
				~scale_period_cents := int_to_real($scale_period_number) * ~interval_of_equivalence

			{convert scale degree to interval in cents:}
				select ($play_note_from_mirrored_version_of_the_scale)
				case 0
				  ~scale_degree_cents := ?tuning_table[$scale_degree_number]
				case 1
				  if ($scale_degree_number = 0)
				     ~scale_degree_cents := -?tuning_table[$scale_degree_number]
				  end if
				  if ($scale_degree_number # 0)
				    ~scale_degree_cents := ~interval_of_equivalence - ?tuning_table[($number_of_pitch_classes)-($scale_degree_number)]
				  end if
				end select

		{add transposition values}

			if ($turn_on_global_cent_mask = 1)
				~master_cent_mask_detune_value := int_to_real(%panel_detune_specific_key__milicent_array[$EVENT_NOTE])/1000.0
				~root_transposition_cents := ~root_transposition_cents + ~master_cent_mask_detune_value
			end if


			{cent do centa az bedzie renta:}
			~root_transposition_cents := ~concert_pitch_deviation_from_a440 + ~harppedaling_note_transposition_cents + ~transpositionbyinterval__compound_cent_transposition + ~panel_masterdetune_cent_value + int_to_real(1200*$knob__mastertransposition__octave) + ~mastertransposition_quick_circleoffifths_detune_cents + ~master_detune

			if ($common_note_transposition_module_is_on = 1)
				~root_transposition_cents := ~root_transposition_cents + ~common_note_transposition_module_calculated_cents
			end if


			if ($epimoric_module_is_on = 1)
				~root_transposition_cents := ~root_transposition_cents + ~epimoric_module__transposition_cents
			end if

			if ($whammy_module_onoff = 1)
				~root_transposition_cents := ~root_transposition_cents + ~whammy_module_compound_transposition_cents
			end if

			if ($switch_transposition_by_monzo = 1)
				~root_transposition_cents := ~root_transposition_cents + ~monzo_module_compound_transposition_cents
			end if

			~cents_from_a440 := ~scale_degree_cents + ~scale_period_cents + ~root_transposition_cents


		{octave detune}
			if ($switch__octave_stretching = 1)
				~octave_stretching_input_frequency_relto69a440 := 440.0 * exp(log(2.0)*(~cents_from_a440/1200.0))
				~octave_stretching_note_detune_cents := 0.0
				if (~octave_stretching_input_frequency_relto69a440 > int_to_real($gui_octave_stretching_high_thresh_mhz)/1000.0)
					~octave_stretching_note_detune_cents := -(int_to_real($gui_octave_stretching_high_detune_milicent)/1000.0) * ~octave_stretching_input_frequency_relto69a440/(int_to_real($gui_octave_stretching_high_thresh_mhz)/1000.0)
				else
					if  (~octave_stretching_input_frequency_relto69a440 < int_to_real($gui_octave_stretching_low_thresh_mhz)/1000.0)
					~octave_stretching_note_detune_cents := -(int_to_real($gui_octave_stretching_low_detune_milicent)/1000.0) * ~octave_stretching_input_frequency_relto69a440/(int_to_real($gui_octave_stretching_low_thresh_mhz)/1000.0)
					end if
				end if
				~cents_from_a440 := ~cents_from_a440 - ~octave_stretching_note_detune_cents
			end if


		{calculate frequency:}
			~event_note_pitch_hz := 440.0 * exp((~cents_from_a440/1200.0)*log(2.0))
		
		{quantize frequencies to the overtones of the BPM}
			
			if ($switch__quantizebeatstobpm = 1 and $DURATION_BAR # 0)
				~event_note_pitch_hz := (int_to_real($DURATION_BAR) * round( (~event_note_pitch_hz*1000000.0) / int_to_real($DURATION_BAR) ))/1000000.0
			end if

		{functions that "bypass" the main tuning algorithm:}
			if ($switch__adaptive_pure_tuning = 1)
				$pompka__event_note := $EVENT_NOTE
				call recalculate_dynamic_just_intonation
			end if

			?active_notes_hertz_table[$EVENT_NOTE] := ~event_note_pitch_hz
			~cents_from_a440 := 1200.0*log(~event_note_pitch_hz/440.0)/log(2.0)
			
			{quantization to A=440Hz 12EDO tuning (12-tone equal-temperament switch)}
			if ($switch__quantize_to_12edo = 1)
				~cents_from_a440 := 100.0*round(~cents_from_a440/100.0)
			end if


		{PLAY note:}
			$nearest_key := 69+real_to_int(round(~cents_from_a440/100.0)) {milicent to semitones}
			select ($play_nearest_zone)
				case 1
					$detune_amount_milicents := real_to_int(1000.0*( ~cents_from_a440 - int_to_real($nearest_key*100-6900)))
					$target_key := $nearest_key
				case 0
					$detune_amount_milicents := (69-$EVENT_NOTE)*100000 + real_to_int((~cents_from_a440 * 1000.0))
					$target_key := $EVENT_NOTE
			end select



			$target_velocity := get_event_par($EVENT_ID, $EVENT_PAR_VELOCITY)

			if ($play_new_id = 0)
				if ($EVENT_NOTE # $target_key)
					set_event_par($EVENT_ID,$EVENT_PAR_NOTE,$target_key)
				end if
				if ($relative_event_tuning = 0)
	    			if ($ksp_0changetune_1eventpartune = 0)
						change_tune ($EVENT_ID,$detune_amount_milicents,$relative_event_tuning)
	    			end if
	    			if ($ksp_0changetune_1eventpartune = 1)
						set_event_par($EVENT_ID,$EVENT_PAR_TUNE,$detune_amount_milicents)
	    			end if
				end if
				if ($relative_event_tuning = 1)
	    			if ($ksp_0changetune_1eventpartune = 0)
						change_tune ($EVENT_ID,$detune_amount_milicents,$relative_event_tuning)
	    			end if
	    			if ($ksp_0changetune_1eventpartune = 1)
					set_event_par($EVENT_ID,$EVENT_PAR_TUNE,get_event_par($EVENT_ID,$EVENT_PAR_TUNE)+$detune_amount_milicents)
	    			end if
				end if
    			set_event_par($EVENT_ID, $EVENT_PAR_0, real_to_int(~event_note_pitch_hz*1000.0))
			else
				ignore_event($EVENT_ID)
				$new_id := play_note($target_key,$target_velocity,0,-1) 

				change_vol($new_id, get_event_par($EVENT_ID, $EVENT_PAR_VOLUME), 1)
    		  { change_tune($new_id, get_event_par($EVENT_ID, $EVENT_PAR_TUNE), 1)		}
    			change_pan($new_id, get_event_par($EVENT_ID, $EVENT_PAR_PAN), 1)
    			if ($ksp_0changetune_1eventpartune = 0)
					change_tune ($new_id,$detune_amount_milicents,$relative_event_tuning)
    			end if
    			if ($ksp_0changetune_1eventpartune = 1)
    				set_event_par($new_id,$EVENT_PAR_TUNE,$detune_amount_milicents)
    			end if
    			set_event_par($new_id, $EVENT_PAR_0, real_to_int(~event_note_pitch_hz*1000.0))
			end if

			~previous_note_pitch_hz := ~event_note_pitch_hz
			$previous_event_note_pitch := $EVENT_NOTE
	end if
	
	call update__last_note_info_panel	
	{call send_rpn_last_note_info}
	%custom_key_down_array[$EVENT_NOTE] := 1

	if(1=1)
	end if
end on

on release	
	%custom_key_down_array[$EVENT_NOTE] := 0
end on

{++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++}
{+                                                                                              +}
{+                                                                                              +}
{+                                                                                              +}
{+                                                                                              +}
{+                         H a r m o n i c   E n i g m a   S c r i p t                          +}
{+                                                                                              +}
{+                                        v  1 . 0  4  7                                        +}
{+                                                                                              +}
{+                               last edit date: 2024-12-27-00-32                               +}
{+                                                                                              +}
{+                               (c)   J a n   M a c h a l s k i                                +}
{+                                                                                              +}
{+                                                                                              +}
{+                          please consider supporting me on patreon:                           +}
{+                                patreon.com/ioannivarsovius                                   +}
{+                                                                                              +}
{+                                                                                              +}
{+                                                                                              +}
{++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++}